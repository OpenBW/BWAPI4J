package mockdata.dataexporter;

import bwapi.*;
import java.lang.reflect.*;
import java.util.*;
import java.util.stream.*;
import org.openbw.bwapi4j.util.*;

class UnitTypes {
  static void initializeUnitType() throws Exception {
    initializeUnitType_Terran_Marine();
    initializeUnitType_Terran_Ghost();
    initializeUnitType_Terran_Vulture();
    initializeUnitType_Terran_Goliath();
    initializeUnitType_Terran_Goliath_Turret();
    initializeUnitType_Terran_Siege_Tank_Tank_Mode();
    initializeUnitType_Terran_Siege_Tank_Tank_Mode_Turret();
    initializeUnitType_Terran_SCV();
    initializeUnitType_Terran_Wraith();
    initializeUnitType_Terran_Science_Vessel();
    initializeUnitType_Hero_Gui_Montag();
    initializeUnitType_Terran_Dropship();
    initializeUnitType_Terran_Battlecruiser();
    initializeUnitType_Terran_Vulture_Spider_Mine();
    initializeUnitType_Terran_Nuclear_Missile();
    initializeUnitType_Terran_Civilian();
    initializeUnitType_Hero_Sarah_Kerrigan();
    initializeUnitType_Hero_Alan_Schezar();
    initializeUnitType_Hero_Alan_Schezar_Turret();
    initializeUnitType_Hero_Jim_Raynor_Vulture();
    initializeUnitType_Hero_Jim_Raynor_Marine();
    initializeUnitType_Hero_Tom_Kazansky();
    initializeUnitType_Hero_Magellan();
    initializeUnitType_Hero_Edmund_Duke_Tank_Mode();
    initializeUnitType_Hero_Edmund_Duke_Tank_Mode_Turret();
    initializeUnitType_Hero_Edmund_Duke_Siege_Mode();
    initializeUnitType_Hero_Edmund_Duke_Siege_Mode_Turret();
    initializeUnitType_Hero_Arcturus_Mengsk();
    initializeUnitType_Hero_Hyperion();
    initializeUnitType_Hero_Norad_II();
    initializeUnitType_Terran_Siege_Tank_Siege_Mode();
    initializeUnitType_Terran_Siege_Tank_Siege_Mode_Turret();
    initializeUnitType_Terran_Firebat();
    initializeUnitType_Spell_Scanner_Sweep();
    initializeUnitType_Terran_Medic();
    initializeUnitType_Zerg_Larva();
    initializeUnitType_Zerg_Egg();
    initializeUnitType_Zerg_Zergling();
    initializeUnitType_Zerg_Hydralisk();
    initializeUnitType_Zerg_Ultralisk();
    initializeUnitType_Zerg_Broodling();
    initializeUnitType_Zerg_Drone();
    initializeUnitType_Zerg_Overlord();
    initializeUnitType_Zerg_Mutalisk();
    initializeUnitType_Zerg_Guardian();
    initializeUnitType_Zerg_Queen();
    initializeUnitType_Zerg_Defiler();
    initializeUnitType_Zerg_Scourge();
    initializeUnitType_Hero_Torrasque();
    initializeUnitType_Hero_Matriarch();
    initializeUnitType_Zerg_Infested_Terran();
    initializeUnitType_Hero_Infested_Kerrigan();
    initializeUnitType_Hero_Unclean_One();
    initializeUnitType_Hero_Hunter_Killer();
    initializeUnitType_Hero_Devouring_One();
    initializeUnitType_Hero_Kukulza_Mutalisk();
    initializeUnitType_Hero_Kukulza_Guardian();
    initializeUnitType_Hero_Yggdrasill();
    initializeUnitType_Terran_Valkyrie();
    initializeUnitType_Zerg_Cocoon();
    initializeUnitType_Protoss_Corsair();
    initializeUnitType_Protoss_Dark_Templar();
    initializeUnitType_Zerg_Devourer();
    initializeUnitType_Protoss_Dark_Archon();
    initializeUnitType_Protoss_Probe();
    initializeUnitType_Protoss_Zealot();
    initializeUnitType_Protoss_Dragoon();
    initializeUnitType_Protoss_High_Templar();
    initializeUnitType_Protoss_Archon();
    initializeUnitType_Protoss_Shuttle();
    initializeUnitType_Protoss_Scout();
    initializeUnitType_Protoss_Arbiter();
    initializeUnitType_Protoss_Carrier();
    initializeUnitType_Protoss_Interceptor();
    initializeUnitType_Hero_Dark_Templar();
    initializeUnitType_Hero_Zeratul();
    initializeUnitType_Hero_Tassadar_Zeratul_Archon();
    initializeUnitType_Hero_Fenix_Zealot();
    initializeUnitType_Hero_Fenix_Dragoon();
    initializeUnitType_Hero_Tassadar();
    initializeUnitType_Hero_Mojo();
    initializeUnitType_Hero_Warbringer();
    initializeUnitType_Hero_Gantrithor();
    initializeUnitType_Protoss_Reaver();
    initializeUnitType_Protoss_Observer();
    initializeUnitType_Protoss_Scarab();
    initializeUnitType_Hero_Danimoth();
    initializeUnitType_Hero_Aldaris();
    initializeUnitType_Hero_Artanis();
    initializeUnitType_Critter_Rhynadon();
    initializeUnitType_Critter_Bengalaas();
    initializeUnitType_Special_Cargo_Ship();
    initializeUnitType_Special_Mercenary_Gunship();
    initializeUnitType_Critter_Scantid();
    initializeUnitType_Critter_Kakaru();
    initializeUnitType_Critter_Ragnasaur();
    initializeUnitType_Critter_Ursadon();
    initializeUnitType_Zerg_Lurker_Egg();
    initializeUnitType_Hero_Raszagal();
    initializeUnitType_Hero_Samir_Duran();
    initializeUnitType_Hero_Alexei_Stukov();
    initializeUnitType_Special_Map_Revealer();
    initializeUnitType_Hero_Gerard_DuGalle();
    initializeUnitType_Zerg_Lurker();
    initializeUnitType_Hero_Infested_Duran();
    initializeUnitType_Spell_Disruption_Web();
    initializeUnitType_Terran_Command_Center();
    initializeUnitType_Terran_Comsat_Station();
    initializeUnitType_Terran_Nuclear_Silo();
    initializeUnitType_Terran_Supply_Depot();
    initializeUnitType_Terran_Refinery();
    initializeUnitType_Terran_Barracks();
    initializeUnitType_Terran_Academy();
    initializeUnitType_Terran_Factory();
    initializeUnitType_Terran_Starport();
    initializeUnitType_Terran_Control_Tower();
    initializeUnitType_Terran_Science_Facility();
    initializeUnitType_Terran_Covert_Ops();
    initializeUnitType_Terran_Physics_Lab();
    initializeUnitType_Unused_Terran1();
    initializeUnitType_Terran_Machine_Shop();
    initializeUnitType_Unused_Terran2();
    initializeUnitType_Terran_Engineering_Bay();
    initializeUnitType_Terran_Armory();
    initializeUnitType_Terran_Missile_Turret();
    initializeUnitType_Terran_Bunker();
    initializeUnitType_Special_Crashed_Norad_II();
    initializeUnitType_Special_Ion_Cannon();
    initializeUnitType_Powerup_Uraj_Crystal();
    initializeUnitType_Powerup_Khalis_Crystal();
    initializeUnitType_Zerg_Infested_Command_Center();
    initializeUnitType_Zerg_Hatchery();
    initializeUnitType_Zerg_Lair();
    initializeUnitType_Zerg_Hive();
    initializeUnitType_Zerg_Nydus_Canal();
    initializeUnitType_Zerg_Hydralisk_Den();
    initializeUnitType_Zerg_Defiler_Mound();
    initializeUnitType_Zerg_Greater_Spire();
    initializeUnitType_Zerg_Queens_Nest();
    initializeUnitType_Zerg_Evolution_Chamber();
    initializeUnitType_Zerg_Ultralisk_Cavern();
    initializeUnitType_Zerg_Spire();
    initializeUnitType_Zerg_Spawning_Pool();
    initializeUnitType_Zerg_Creep_Colony();
    initializeUnitType_Zerg_Spore_Colony();
    initializeUnitType_Unused_Zerg1();
    initializeUnitType_Zerg_Sunken_Colony();
    initializeUnitType_Special_Overmind_With_Shell();
    initializeUnitType_Special_Overmind();
    initializeUnitType_Zerg_Extractor();
    initializeUnitType_Special_Mature_Chrysalis();
    initializeUnitType_Special_Cerebrate();
    initializeUnitType_Special_Cerebrate_Daggoth();
    initializeUnitType_Unused_Zerg2();
    initializeUnitType_Protoss_Nexus();
    initializeUnitType_Protoss_Robotics_Facility();
    initializeUnitType_Protoss_Pylon();
    initializeUnitType_Protoss_Assimilator();
    initializeUnitType_Unused_Protoss1();
    initializeUnitType_Protoss_Observatory();
    initializeUnitType_Protoss_Gateway();
    initializeUnitType_Unused_Protoss2();
    initializeUnitType_Protoss_Photon_Cannon();
    initializeUnitType_Protoss_Citadel_of_Adun();
    initializeUnitType_Protoss_Cybernetics_Core();
    initializeUnitType_Protoss_Templar_Archives();
    initializeUnitType_Protoss_Forge();
    initializeUnitType_Protoss_Stargate();
    initializeUnitType_Special_Stasis_Cell_Prison();
    initializeUnitType_Protoss_Fleet_Beacon();
    initializeUnitType_Protoss_Arbiter_Tribunal();
    initializeUnitType_Protoss_Robotics_Support_Bay();
    initializeUnitType_Protoss_Shield_Battery();
    initializeUnitType_Special_Khaydarin_Crystal_Form();
    initializeUnitType_Special_Protoss_Temple();
    initializeUnitType_Special_XelNaga_Temple();
    initializeUnitType_Resource_Mineral_Field();
    initializeUnitType_Resource_Mineral_Field_Type_2();
    initializeUnitType_Resource_Mineral_Field_Type_3();
    initializeUnitType_Unused_Cave();
    initializeUnitType_Unused_Cave_In();
    initializeUnitType_Unused_Cantina();
    initializeUnitType_Unused_Mining_Platform();
    initializeUnitType_Unused_Independant_Command_Center();
    initializeUnitType_Special_Independant_Starport();
    initializeUnitType_Unused_Independant_Jump_Gate();
    initializeUnitType_Unused_Ruins();
    initializeUnitType_Unused_Khaydarin_Crystal_Formation();
    initializeUnitType_Resource_Vespene_Geyser();
    initializeUnitType_Special_Warp_Gate();
    initializeUnitType_Special_Psi_Disrupter();
    initializeUnitType_Unused_Zerg_Marker();
    initializeUnitType_Unused_Terran_Marker();
    initializeUnitType_Unused_Protoss_Marker();
    initializeUnitType_Special_Zerg_Beacon();
    initializeUnitType_Special_Terran_Beacon();
    initializeUnitType_Special_Protoss_Beacon();
    initializeUnitType_Special_Zerg_Flag_Beacon();
    initializeUnitType_Special_Terran_Flag_Beacon();
    initializeUnitType_Special_Protoss_Flag_Beacon();
    initializeUnitType_Special_Power_Generator();
    initializeUnitType_Special_Overmind_Cocoon();
    initializeUnitType_Spell_Dark_Swarm();
    initializeUnitType_Special_Floor_Missile_Trap();
    initializeUnitType_Special_Floor_Hatch();
    initializeUnitType_Special_Upper_Level_Door();
    initializeUnitType_Special_Right_Upper_Level_Door();
    initializeUnitType_Special_Pit_Door();
    initializeUnitType_Special_Right_Pit_Door();
    initializeUnitType_Special_Floor_Gun_Trap();
    initializeUnitType_Special_Wall_Missile_Trap();
    initializeUnitType_Special_Wall_Flame_Trap();
    initializeUnitType_Special_Right_Wall_Missile_Trap();
    initializeUnitType_Special_Right_Wall_Flame_Trap();
    initializeUnitType_Special_Start_Location();
    initializeUnitType_Powerup_Flag();
    initializeUnitType_Powerup_Young_Chrysalis();
    initializeUnitType_Powerup_Psi_Emitter();
    initializeUnitType_Powerup_Data_Disk();
    initializeUnitType_Powerup_Khaydarin_Crystal();
    initializeUnitType_Powerup_Mineral_Cluster_Type_1();
    initializeUnitType_Powerup_Mineral_Cluster_Type_2();
    initializeUnitType_Powerup_Protoss_Gas_Orb_Type_1();
    initializeUnitType_Powerup_Protoss_Gas_Orb_Type_2();
    initializeUnitType_Powerup_Zerg_Gas_Sac_Type_1();
    initializeUnitType_Powerup_Zerg_Gas_Sac_Type_2();
    initializeUnitType_Powerup_Terran_Gas_Tank_Type_1();
    initializeUnitType_Powerup_Terran_Gas_Tank_Type_2();
    initializeUnitType_None();
    initializeUnitType_AllUnits();
    initializeUnitType_Men();
    initializeUnitType_Buildings();
    initializeUnitType_Factories();
    initializeUnitType_Unknown();
    initializeUnitType_MAX();
  }

  private static void initializeUnitType_Terran_Marine() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Marine, 0);
    fields.get("race").set(UnitType.Terran_Marine, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Marine, new UnitType.WhatBuilds(UnitType.Terran_Barracks, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Marine, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Terran_Marine, toMap(UnitType.Terran_Barracks, 1));
    fields.get("requiredTech").set(UnitType.Terran_Marine, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Marine, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Terran_Marine, new ArrayList(Arrays.asList(TechType.Stim_Packs)));
    fields
        .get("upgrades")
        .set(
            UnitType.Terran_Marine,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.U_238_Shells,
                    UpgradeType.Terran_Infantry_Armor,
                    UpgradeType.Terran_Infantry_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Terran_Marine, UpgradeType.Terran_Infantry_Armor);
    fields.get("maxHitPoints").set(UnitType.Terran_Marine, 40);
    fields.get("maxShields").set(UnitType.Terran_Marine, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Marine, 0);
    fields.get("armor").set(UnitType.Terran_Marine, 0);
    fields.get("mineralPrice").set(UnitType.Terran_Marine, 50);
    fields.get("gasPrice").set(UnitType.Terran_Marine, 0);
    fields.get("buildTime").set(UnitType.Terran_Marine, 360);
    fields.get("supplyRequired").set(UnitType.Terran_Marine, 2);
    fields.get("supplyProvided").set(UnitType.Terran_Marine, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Marine, 1);
    fields.get("spaceProvided").set(UnitType.Terran_Marine, 0);
    fields.get("buildScore").set(UnitType.Terran_Marine, 50);
    fields.get("destroyScore").set(UnitType.Terran_Marine, 100);
    fields.get("size").set(UnitType.Terran_Marine, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Terran_Marine, 1);
    fields.get("tileHeight").set(UnitType.Terran_Marine, 1);
    fields.get("dimensionLeft").set(UnitType.Terran_Marine, 8);
    fields.get("dimensionUp").set(UnitType.Terran_Marine, 9);
    fields.get("dimensionRight").set(UnitType.Terran_Marine, 8);
    fields.get("dimensionDown").set(UnitType.Terran_Marine, 10);
    fields.get("width").set(UnitType.Terran_Marine, 17);
    fields.get("height").set(UnitType.Terran_Marine, 20);
    fields.get("seekRange").set(UnitType.Terran_Marine, 0);
    fields.get("sightRange").set(UnitType.Terran_Marine, 224);
    fields.get("groundWeapon").set(UnitType.Terran_Marine, WeaponType.Gauss_Rifle);
    fields.get("maxGroundHits").set(UnitType.Terran_Marine, 1);
    fields.get("airWeapon").set(UnitType.Terran_Marine, WeaponType.Gauss_Rifle);
    fields.get("maxAirHits").set(UnitType.Terran_Marine, 1);
    fields.get("topSpeed").set(UnitType.Terran_Marine, 3.125);
    fields.get("acceleration").set(UnitType.Terran_Marine, 1);
    fields.get("haltDistance").set(UnitType.Terran_Marine, 1);
    fields.get("turnRadius").set(UnitType.Terran_Marine, 40);
    fields.get("canProduce").set(UnitType.Terran_Marine, false);
    fields.get("canAttack").set(UnitType.Terran_Marine, true);
    fields.get("canMove").set(UnitType.Terran_Marine, true);
    fields.get("flyer").set(UnitType.Terran_Marine, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Marine, false);
    fields.get("spellcaster").set(UnitType.Terran_Marine, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Marine, false);
    fields.get("invincible").set(UnitType.Terran_Marine, false);
    fields.get("organic").set(UnitType.Terran_Marine, true);
    fields.get("mechanical").set(UnitType.Terran_Marine, false);
    fields.get("robotic").set(UnitType.Terran_Marine, false);
    fields.get("detector").set(UnitType.Terran_Marine, false);
    fields.get("resourceContainer").set(UnitType.Terran_Marine, false);
    fields.get("resourceDepot").set(UnitType.Terran_Marine, false);
    fields.get("refinery").set(UnitType.Terran_Marine, false);
    fields.get("worker").set(UnitType.Terran_Marine, false);
    fields.get("requiresPsi").set(UnitType.Terran_Marine, false);
    fields.get("requiresCreep").set(UnitType.Terran_Marine, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Marine, false);
    fields.get("burrowable").set(UnitType.Terran_Marine, false);
    fields.get("cloakable").set(UnitType.Terran_Marine, false);
    fields.get("building").set(UnitType.Terran_Marine, false);
    fields.get("addon").set(UnitType.Terran_Marine, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Marine, false);
    fields.get("neutral").set(UnitType.Terran_Marine, false);
    fields.get("hero").set(UnitType.Terran_Marine, false);
    fields.get("powerup").set(UnitType.Terran_Marine, false);
    fields.get("beacon").set(UnitType.Terran_Marine, false);
    fields.get("flagBeacon").set(UnitType.Terran_Marine, false);
    fields.get("specialBuilding").set(UnitType.Terran_Marine, false);
    fields.get("spell").set(UnitType.Terran_Marine, false);
    fields.get("producesCreep").set(UnitType.Terran_Marine, false);
    fields.get("producesLarva").set(UnitType.Terran_Marine, false);
    fields.get("mineralField").set(UnitType.Terran_Marine, false);
    fields.get("critter").set(UnitType.Terran_Marine, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Marine, false);
    fields.get("researchesWhat").set(UnitType.Terran_Marine, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Marine, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Ghost() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Ghost, 1);
    fields.get("race").set(UnitType.Terran_Ghost, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Ghost, new UnitType.WhatBuilds(UnitType.Terran_Barracks, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Ghost, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Terran_Ghost,
            toMap(
                UnitType.Terran_Academy,
                1,
                UnitType.Terran_Barracks,
                1,
                UnitType.Terran_Covert_Ops,
                1));
    fields.get("requiredTech").set(UnitType.Terran_Ghost, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Ghost, TechType.Personnel_Cloaking);
    fields
        .get("abilities")
        .set(
            UnitType.Terran_Ghost,
            new ArrayList(
                Arrays.asList(
                    TechType.Lockdown, TechType.Personnel_Cloaking, TechType.Nuclear_Strike)));
    fields
        .get("upgrades")
        .set(
            UnitType.Terran_Ghost,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Infantry_Armor,
                    UpgradeType.Terran_Infantry_Weapons,
                    UpgradeType.Ocular_Implants,
                    UpgradeType.Moebius_Reactor)));
    fields.get("armorUpgrade").set(UnitType.Terran_Ghost, UpgradeType.Terran_Infantry_Armor);
    fields.get("maxHitPoints").set(UnitType.Terran_Ghost, 45);
    fields.get("maxShields").set(UnitType.Terran_Ghost, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Ghost, 200);
    fields.get("armor").set(UnitType.Terran_Ghost, 0);
    fields.get("mineralPrice").set(UnitType.Terran_Ghost, 25);
    fields.get("gasPrice").set(UnitType.Terran_Ghost, 75);
    fields.get("buildTime").set(UnitType.Terran_Ghost, 750);
    fields.get("supplyRequired").set(UnitType.Terran_Ghost, 2);
    fields.get("supplyProvided").set(UnitType.Terran_Ghost, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Ghost, 1);
    fields.get("spaceProvided").set(UnitType.Terran_Ghost, 0);
    fields.get("buildScore").set(UnitType.Terran_Ghost, 175);
    fields.get("destroyScore").set(UnitType.Terran_Ghost, 350);
    fields.get("size").set(UnitType.Terran_Ghost, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Terran_Ghost, 1);
    fields.get("tileHeight").set(UnitType.Terran_Ghost, 1);
    fields.get("dimensionLeft").set(UnitType.Terran_Ghost, 7);
    fields.get("dimensionUp").set(UnitType.Terran_Ghost, 10);
    fields.get("dimensionRight").set(UnitType.Terran_Ghost, 7);
    fields.get("dimensionDown").set(UnitType.Terran_Ghost, 11);
    fields.get("width").set(UnitType.Terran_Ghost, 15);
    fields.get("height").set(UnitType.Terran_Ghost, 22);
    fields.get("seekRange").set(UnitType.Terran_Ghost, 0);
    fields.get("sightRange").set(UnitType.Terran_Ghost, 288);
    fields.get("groundWeapon").set(UnitType.Terran_Ghost, WeaponType.C_10_Canister_Rifle);
    fields.get("maxGroundHits").set(UnitType.Terran_Ghost, 1);
    fields.get("airWeapon").set(UnitType.Terran_Ghost, WeaponType.C_10_Canister_Rifle);
    fields.get("maxAirHits").set(UnitType.Terran_Ghost, 1);
    fields.get("topSpeed").set(UnitType.Terran_Ghost, 3.125);
    fields.get("acceleration").set(UnitType.Terran_Ghost, 1);
    fields.get("haltDistance").set(UnitType.Terran_Ghost, 1);
    fields.get("turnRadius").set(UnitType.Terran_Ghost, 40);
    fields.get("canProduce").set(UnitType.Terran_Ghost, false);
    fields.get("canAttack").set(UnitType.Terran_Ghost, true);
    fields.get("canMove").set(UnitType.Terran_Ghost, true);
    fields.get("flyer").set(UnitType.Terran_Ghost, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Ghost, false);
    fields.get("spellcaster").set(UnitType.Terran_Ghost, true);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Ghost, false);
    fields.get("invincible").set(UnitType.Terran_Ghost, false);
    fields.get("organic").set(UnitType.Terran_Ghost, true);
    fields.get("mechanical").set(UnitType.Terran_Ghost, false);
    fields.get("robotic").set(UnitType.Terran_Ghost, false);
    fields.get("detector").set(UnitType.Terran_Ghost, false);
    fields.get("resourceContainer").set(UnitType.Terran_Ghost, false);
    fields.get("resourceDepot").set(UnitType.Terran_Ghost, false);
    fields.get("refinery").set(UnitType.Terran_Ghost, false);
    fields.get("worker").set(UnitType.Terran_Ghost, false);
    fields.get("requiresPsi").set(UnitType.Terran_Ghost, false);
    fields.get("requiresCreep").set(UnitType.Terran_Ghost, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Ghost, false);
    fields.get("burrowable").set(UnitType.Terran_Ghost, false);
    fields.get("cloakable").set(UnitType.Terran_Ghost, true);
    fields.get("building").set(UnitType.Terran_Ghost, false);
    fields.get("addon").set(UnitType.Terran_Ghost, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Ghost, false);
    fields.get("neutral").set(UnitType.Terran_Ghost, false);
    fields.get("hero").set(UnitType.Terran_Ghost, false);
    fields.get("powerup").set(UnitType.Terran_Ghost, false);
    fields.get("beacon").set(UnitType.Terran_Ghost, false);
    fields.get("flagBeacon").set(UnitType.Terran_Ghost, false);
    fields.get("specialBuilding").set(UnitType.Terran_Ghost, false);
    fields.get("spell").set(UnitType.Terran_Ghost, false);
    fields.get("producesCreep").set(UnitType.Terran_Ghost, false);
    fields.get("producesLarva").set(UnitType.Terran_Ghost, false);
    fields.get("mineralField").set(UnitType.Terran_Ghost, false);
    fields.get("critter").set(UnitType.Terran_Ghost, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Ghost, false);
    fields.get("researchesWhat").set(UnitType.Terran_Ghost, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Ghost, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Vulture() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Vulture, 2);
    fields.get("race").set(UnitType.Terran_Vulture, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Vulture, new UnitType.WhatBuilds(UnitType.Terran_Factory, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Vulture, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Terran_Vulture, toMap(UnitType.Terran_Factory, 1));
    fields.get("requiredTech").set(UnitType.Terran_Vulture, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Vulture, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Terran_Vulture, new ArrayList(Arrays.asList(TechType.Spider_Mines)));
    fields
        .get("upgrades")
        .set(
            UnitType.Terran_Vulture,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Ion_Thrusters,
                    UpgradeType.Terran_Vehicle_Plating,
                    UpgradeType.Terran_Vehicle_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Terran_Vulture, UpgradeType.Terran_Vehicle_Plating);
    fields.get("maxHitPoints").set(UnitType.Terran_Vulture, 80);
    fields.get("maxShields").set(UnitType.Terran_Vulture, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Vulture, 0);
    fields.get("armor").set(UnitType.Terran_Vulture, 0);
    fields.get("mineralPrice").set(UnitType.Terran_Vulture, 75);
    fields.get("gasPrice").set(UnitType.Terran_Vulture, 0);
    fields.get("buildTime").set(UnitType.Terran_Vulture, 450);
    fields.get("supplyRequired").set(UnitType.Terran_Vulture, 4);
    fields.get("supplyProvided").set(UnitType.Terran_Vulture, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Vulture, 2);
    fields.get("spaceProvided").set(UnitType.Terran_Vulture, 0);
    fields.get("buildScore").set(UnitType.Terran_Vulture, 75);
    fields.get("destroyScore").set(UnitType.Terran_Vulture, 150);
    fields.get("size").set(UnitType.Terran_Vulture, UnitSizeType.Medium);
    fields.get("tileWidth").set(UnitType.Terran_Vulture, 1);
    fields.get("tileHeight").set(UnitType.Terran_Vulture, 1);
    fields.get("dimensionLeft").set(UnitType.Terran_Vulture, 16);
    fields.get("dimensionUp").set(UnitType.Terran_Vulture, 16);
    fields.get("dimensionRight").set(UnitType.Terran_Vulture, 15);
    fields.get("dimensionDown").set(UnitType.Terran_Vulture, 15);
    fields.get("width").set(UnitType.Terran_Vulture, 32);
    fields.get("height").set(UnitType.Terran_Vulture, 32);
    fields.get("seekRange").set(UnitType.Terran_Vulture, 0);
    fields.get("sightRange").set(UnitType.Terran_Vulture, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Vulture, WeaponType.Fragmentation_Grenade);
    fields.get("maxGroundHits").set(UnitType.Terran_Vulture, 1);
    fields.get("airWeapon").set(UnitType.Terran_Vulture, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Vulture, 0);
    fields.get("topSpeed").set(UnitType.Terran_Vulture, 5.0);
    fields.get("acceleration").set(UnitType.Terran_Vulture, 100);
    fields.get("haltDistance").set(UnitType.Terran_Vulture, 14569);
    fields.get("turnRadius").set(UnitType.Terran_Vulture, 40);
    fields.get("canProduce").set(UnitType.Terran_Vulture, false);
    fields.get("canAttack").set(UnitType.Terran_Vulture, true);
    fields.get("canMove").set(UnitType.Terran_Vulture, true);
    fields.get("flyer").set(UnitType.Terran_Vulture, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Vulture, false);
    fields.get("spellcaster").set(UnitType.Terran_Vulture, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Vulture, false);
    fields.get("invincible").set(UnitType.Terran_Vulture, false);
    fields.get("organic").set(UnitType.Terran_Vulture, false);
    fields.get("mechanical").set(UnitType.Terran_Vulture, true);
    fields.get("robotic").set(UnitType.Terran_Vulture, false);
    fields.get("detector").set(UnitType.Terran_Vulture, false);
    fields.get("resourceContainer").set(UnitType.Terran_Vulture, false);
    fields.get("resourceDepot").set(UnitType.Terran_Vulture, false);
    fields.get("refinery").set(UnitType.Terran_Vulture, false);
    fields.get("worker").set(UnitType.Terran_Vulture, false);
    fields.get("requiresPsi").set(UnitType.Terran_Vulture, false);
    fields.get("requiresCreep").set(UnitType.Terran_Vulture, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Vulture, false);
    fields.get("burrowable").set(UnitType.Terran_Vulture, false);
    fields.get("cloakable").set(UnitType.Terran_Vulture, false);
    fields.get("building").set(UnitType.Terran_Vulture, false);
    fields.get("addon").set(UnitType.Terran_Vulture, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Vulture, false);
    fields.get("neutral").set(UnitType.Terran_Vulture, false);
    fields.get("hero").set(UnitType.Terran_Vulture, false);
    fields.get("powerup").set(UnitType.Terran_Vulture, false);
    fields.get("beacon").set(UnitType.Terran_Vulture, false);
    fields.get("flagBeacon").set(UnitType.Terran_Vulture, false);
    fields.get("specialBuilding").set(UnitType.Terran_Vulture, false);
    fields.get("spell").set(UnitType.Terran_Vulture, false);
    fields.get("producesCreep").set(UnitType.Terran_Vulture, false);
    fields.get("producesLarva").set(UnitType.Terran_Vulture, false);
    fields.get("mineralField").set(UnitType.Terran_Vulture, false);
    fields.get("critter").set(UnitType.Terran_Vulture, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Vulture, false);
    fields.get("researchesWhat").set(UnitType.Terran_Vulture, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Vulture, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Goliath() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Goliath, 3);
    fields.get("race").set(UnitType.Terran_Goliath, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Goliath, new UnitType.WhatBuilds(UnitType.Terran_Factory, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Goliath, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Terran_Goliath, toMap(UnitType.Terran_Armory, 1, UnitType.Terran_Factory, 1));
    fields.get("requiredTech").set(UnitType.Terran_Goliath, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Goliath, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Goliath, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Terran_Goliath,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Vehicle_Plating,
                    UpgradeType.Terran_Vehicle_Weapons,
                    UpgradeType.Charon_Boosters)));
    fields.get("armorUpgrade").set(UnitType.Terran_Goliath, UpgradeType.Terran_Vehicle_Plating);
    fields.get("maxHitPoints").set(UnitType.Terran_Goliath, 125);
    fields.get("maxShields").set(UnitType.Terran_Goliath, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Goliath, 0);
    fields.get("armor").set(UnitType.Terran_Goliath, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Goliath, 100);
    fields.get("gasPrice").set(UnitType.Terran_Goliath, 50);
    fields.get("buildTime").set(UnitType.Terran_Goliath, 600);
    fields.get("supplyRequired").set(UnitType.Terran_Goliath, 4);
    fields.get("supplyProvided").set(UnitType.Terran_Goliath, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Goliath, 2);
    fields.get("spaceProvided").set(UnitType.Terran_Goliath, 0);
    fields.get("buildScore").set(UnitType.Terran_Goliath, 200);
    fields.get("destroyScore").set(UnitType.Terran_Goliath, 400);
    fields.get("size").set(UnitType.Terran_Goliath, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Goliath, 1);
    fields.get("tileHeight").set(UnitType.Terran_Goliath, 1);
    fields.get("dimensionLeft").set(UnitType.Terran_Goliath, 16);
    fields.get("dimensionUp").set(UnitType.Terran_Goliath, 16);
    fields.get("dimensionRight").set(UnitType.Terran_Goliath, 15);
    fields.get("dimensionDown").set(UnitType.Terran_Goliath, 15);
    fields.get("width").set(UnitType.Terran_Goliath, 32);
    fields.get("height").set(UnitType.Terran_Goliath, 32);
    fields.get("seekRange").set(UnitType.Terran_Goliath, 160);
    fields.get("sightRange").set(UnitType.Terran_Goliath, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Goliath, WeaponType.Twin_Autocannons);
    fields.get("maxGroundHits").set(UnitType.Terran_Goliath, 1);
    fields.get("airWeapon").set(UnitType.Terran_Goliath, WeaponType.Hellfire_Missile_Pack);
    fields.get("maxAirHits").set(UnitType.Terran_Goliath, 1);
    fields.get("topSpeed").set(UnitType.Terran_Goliath, 3.5703125);
    fields.get("acceleration").set(UnitType.Terran_Goliath, 1);
    fields.get("haltDistance").set(UnitType.Terran_Goliath, 1);
    fields.get("turnRadius").set(UnitType.Terran_Goliath, 17);
    fields.get("canProduce").set(UnitType.Terran_Goliath, false);
    fields.get("canAttack").set(UnitType.Terran_Goliath, true);
    fields.get("canMove").set(UnitType.Terran_Goliath, true);
    fields.get("flyer").set(UnitType.Terran_Goliath, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Goliath, false);
    fields.get("spellcaster").set(UnitType.Terran_Goliath, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Goliath, false);
    fields.get("invincible").set(UnitType.Terran_Goliath, false);
    fields.get("organic").set(UnitType.Terran_Goliath, false);
    fields.get("mechanical").set(UnitType.Terran_Goliath, true);
    fields.get("robotic").set(UnitType.Terran_Goliath, false);
    fields.get("detector").set(UnitType.Terran_Goliath, false);
    fields.get("resourceContainer").set(UnitType.Terran_Goliath, false);
    fields.get("resourceDepot").set(UnitType.Terran_Goliath, false);
    fields.get("refinery").set(UnitType.Terran_Goliath, false);
    fields.get("worker").set(UnitType.Terran_Goliath, false);
    fields.get("requiresPsi").set(UnitType.Terran_Goliath, false);
    fields.get("requiresCreep").set(UnitType.Terran_Goliath, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Goliath, false);
    fields.get("burrowable").set(UnitType.Terran_Goliath, false);
    fields.get("cloakable").set(UnitType.Terran_Goliath, false);
    fields.get("building").set(UnitType.Terran_Goliath, false);
    fields.get("addon").set(UnitType.Terran_Goliath, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Goliath, false);
    fields.get("neutral").set(UnitType.Terran_Goliath, false);
    fields.get("hero").set(UnitType.Terran_Goliath, false);
    fields.get("powerup").set(UnitType.Terran_Goliath, false);
    fields.get("beacon").set(UnitType.Terran_Goliath, false);
    fields.get("flagBeacon").set(UnitType.Terran_Goliath, false);
    fields.get("specialBuilding").set(UnitType.Terran_Goliath, false);
    fields.get("spell").set(UnitType.Terran_Goliath, false);
    fields.get("producesCreep").set(UnitType.Terran_Goliath, false);
    fields.get("producesLarva").set(UnitType.Terran_Goliath, false);
    fields.get("mineralField").set(UnitType.Terran_Goliath, false);
    fields.get("critter").set(UnitType.Terran_Goliath, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Goliath, false);
    fields.get("researchesWhat").set(UnitType.Terran_Goliath, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Goliath, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Goliath_Turret() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Goliath_Turret, 4);
    fields.get("race").set(UnitType.Terran_Goliath_Turret, null);
    fields.get("whatBuilds").set(UnitType.Terran_Goliath_Turret, null);
    fields.get("buildsWhat").set(UnitType.Terran_Goliath_Turret, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Terran_Goliath_Turret, toMap());
    fields.get("requiredTech").set(UnitType.Terran_Goliath_Turret, null);
    fields.get("cloakingTech").set(UnitType.Terran_Goliath_Turret, null);
    fields.get("abilities").set(UnitType.Terran_Goliath_Turret, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Goliath_Turret, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Goliath_Turret, null);
    fields.get("maxHitPoints").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("maxShields").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("armor").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("mineralPrice").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("gasPrice").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("buildTime").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("supplyRequired").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("spaceProvided").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("buildScore").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("destroyScore").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("size").set(UnitType.Terran_Goliath_Turret, null);
    fields.get("tileWidth").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("tileHeight").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("dimensionLeft").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("dimensionUp").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("dimensionRight").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("dimensionDown").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("width").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("height").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("seekRange").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("sightRange").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("groundWeapon").set(UnitType.Terran_Goliath_Turret, null);
    fields.get("maxGroundHits").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("airWeapon").set(UnitType.Terran_Goliath_Turret, null);
    fields.get("maxAirHits").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("topSpeed").set(UnitType.Terran_Goliath_Turret, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("haltDistance").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("turnRadius").set(UnitType.Terran_Goliath_Turret, 0);
    fields.get("canProduce").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("canAttack").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("canMove").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("flyer").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("spellcaster").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("invincible").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("organic").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("mechanical").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("robotic").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("detector").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("resourceContainer").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("resourceDepot").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("refinery").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("worker").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("requiresPsi").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("requiresCreep").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("burrowable").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("cloakable").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("building").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("addon").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("neutral").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("hero").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("powerup").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("beacon").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("flagBeacon").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("specialBuilding").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("spell").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("producesCreep").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("producesLarva").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("mineralField").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("critter").set(UnitType.Terran_Goliath_Turret, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Goliath_Turret, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Terran_Goliath_Turret, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Goliath_Turret, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Siege_Tank_Tank_Mode() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Siege_Tank_Tank_Mode, 5);
    fields.get("race").set(UnitType.Terran_Siege_Tank_Tank_Mode, Race.Terran);
    fields
        .get("whatBuilds")
        .set(
            UnitType.Terran_Siege_Tank_Tank_Mode,
            new UnitType.WhatBuilds(UnitType.Terran_Factory, 1));
    fields
        .get("buildsWhat")
        .set(UnitType.Terran_Siege_Tank_Tank_Mode, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Terran_Siege_Tank_Tank_Mode,
            toMap(UnitType.Terran_Machine_Shop, 1, UnitType.Terran_Factory, 1));
    fields.get("requiredTech").set(UnitType.Terran_Siege_Tank_Tank_Mode, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Siege_Tank_Tank_Mode, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Terran_Siege_Tank_Tank_Mode,
            new ArrayList(Arrays.asList(TechType.Tank_Siege_Mode)));
    fields
        .get("upgrades")
        .set(
            UnitType.Terran_Siege_Tank_Tank_Mode,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Vehicle_Plating, UpgradeType.Terran_Vehicle_Weapons)));
    fields
        .get("armorUpgrade")
        .set(UnitType.Terran_Siege_Tank_Tank_Mode, UpgradeType.Terran_Vehicle_Plating);
    fields.get("maxHitPoints").set(UnitType.Terran_Siege_Tank_Tank_Mode, 150);
    fields.get("maxShields").set(UnitType.Terran_Siege_Tank_Tank_Mode, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Siege_Tank_Tank_Mode, 0);
    fields.get("armor").set(UnitType.Terran_Siege_Tank_Tank_Mode, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Siege_Tank_Tank_Mode, 150);
    fields.get("gasPrice").set(UnitType.Terran_Siege_Tank_Tank_Mode, 100);
    fields.get("buildTime").set(UnitType.Terran_Siege_Tank_Tank_Mode, 750);
    fields.get("supplyRequired").set(UnitType.Terran_Siege_Tank_Tank_Mode, 4);
    fields.get("supplyProvided").set(UnitType.Terran_Siege_Tank_Tank_Mode, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Siege_Tank_Tank_Mode, 4);
    fields.get("spaceProvided").set(UnitType.Terran_Siege_Tank_Tank_Mode, 0);
    fields.get("buildScore").set(UnitType.Terran_Siege_Tank_Tank_Mode, 350);
    fields.get("destroyScore").set(UnitType.Terran_Siege_Tank_Tank_Mode, 700);
    fields.get("size").set(UnitType.Terran_Siege_Tank_Tank_Mode, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Siege_Tank_Tank_Mode, 1);
    fields.get("tileHeight").set(UnitType.Terran_Siege_Tank_Tank_Mode, 1);
    fields.get("dimensionLeft").set(UnitType.Terran_Siege_Tank_Tank_Mode, 16);
    fields.get("dimensionUp").set(UnitType.Terran_Siege_Tank_Tank_Mode, 16);
    fields.get("dimensionRight").set(UnitType.Terran_Siege_Tank_Tank_Mode, 15);
    fields.get("dimensionDown").set(UnitType.Terran_Siege_Tank_Tank_Mode, 15);
    fields.get("width").set(UnitType.Terran_Siege_Tank_Tank_Mode, 32);
    fields.get("height").set(UnitType.Terran_Siege_Tank_Tank_Mode, 32);
    fields.get("seekRange").set(UnitType.Terran_Siege_Tank_Tank_Mode, 256);
    fields.get("sightRange").set(UnitType.Terran_Siege_Tank_Tank_Mode, 320);
    fields.get("groundWeapon").set(UnitType.Terran_Siege_Tank_Tank_Mode, WeaponType.Arclite_Cannon);
    fields.get("maxGroundHits").set(UnitType.Terran_Siege_Tank_Tank_Mode, 1);
    fields.get("airWeapon").set(UnitType.Terran_Siege_Tank_Tank_Mode, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Siege_Tank_Tank_Mode, 0);
    fields.get("topSpeed").set(UnitType.Terran_Siege_Tank_Tank_Mode, 3.125);
    fields.get("acceleration").set(UnitType.Terran_Siege_Tank_Tank_Mode, 1);
    fields.get("haltDistance").set(UnitType.Terran_Siege_Tank_Tank_Mode, 1);
    fields.get("turnRadius").set(UnitType.Terran_Siege_Tank_Tank_Mode, 13);
    fields.get("canProduce").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("canAttack").set(UnitType.Terran_Siege_Tank_Tank_Mode, true);
    fields.get("canMove").set(UnitType.Terran_Siege_Tank_Tank_Mode, true);
    fields.get("flyer").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("spellcaster").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("invincible").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("organic").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("mechanical").set(UnitType.Terran_Siege_Tank_Tank_Mode, true);
    fields.get("robotic").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("detector").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("resourceContainer").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("resourceDepot").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("refinery").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("worker").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("requiresPsi").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("requiresCreep").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("burrowable").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("cloakable").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("building").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("addon").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("neutral").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("hero").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("powerup").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("beacon").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("flagBeacon").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("specialBuilding").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("spell").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("producesCreep").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("producesLarva").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("mineralField").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("critter").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Siege_Tank_Tank_Mode, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Terran_Siege_Tank_Tank_Mode, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Terran_Siege_Tank_Tank_Mode, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Siege_Tank_Tank_Mode_Turret() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 6);
    fields.get("race").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
    fields.get("whatBuilds").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
    fields
        .get("buildsWhat")
        .set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, toMap());
    fields.get("requiredTech").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
    fields.get("cloakingTech").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
    fields
        .get("abilities")
        .set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
    fields.get("maxHitPoints").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("maxShields").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("armor").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("mineralPrice").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("gasPrice").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("buildTime").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("supplyRequired").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("spaceProvided").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("buildScore").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("destroyScore").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("size").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
    fields.get("tileWidth").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("tileHeight").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("dimensionLeft").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("dimensionUp").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("dimensionRight").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("dimensionDown").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("width").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("height").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("seekRange").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("sightRange").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("groundWeapon").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
    fields.get("maxGroundHits").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("airWeapon").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, null);
    fields.get("maxAirHits").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("topSpeed").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("haltDistance").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("turnRadius").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, 0);
    fields.get("canProduce").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("canAttack").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("canMove").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("flyer").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("spellcaster").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("invincible").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("organic").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("mechanical").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("robotic").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("detector").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("resourceContainer").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("resourceDepot").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("refinery").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("worker").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("requiresPsi").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("requiresCreep").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("burrowable").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("cloakable").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("building").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("addon").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("neutral").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("hero").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("powerup").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("beacon").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("flagBeacon").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("specialBuilding").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("spell").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("producesCreep").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("producesLarva").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("mineralField").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("critter").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Terran_Siege_Tank_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_SCV() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_SCV, 7);
    fields.get("race").set(UnitType.Terran_SCV, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_SCV, new UnitType.WhatBuilds(UnitType.Terran_Command_Center, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Terran_SCV,
            new ArrayList(
                Arrays.asList(
                    UnitType.Terran_Academy,
                    UnitType.Terran_Armory,
                    UnitType.Terran_Barracks,
                    UnitType.Terran_Bunker,
                    UnitType.Terran_Engineering_Bay,
                    UnitType.Terran_Command_Center,
                    UnitType.Terran_Factory,
                    UnitType.Terran_Missile_Turret,
                    UnitType.Terran_Refinery,
                    UnitType.Terran_Science_Facility,
                    UnitType.Terran_Starport,
                    UnitType.Terran_Supply_Depot)));
    fields.get("requiredUnits").set(UnitType.Terran_SCV, toMap(UnitType.Terran_Command_Center, 1));
    fields.get("requiredTech").set(UnitType.Terran_SCV, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_SCV, TechType.None);
    fields.get("abilities").set(UnitType.Terran_SCV, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Terran_SCV, new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Armor)));
    fields.get("armorUpgrade").set(UnitType.Terran_SCV, UpgradeType.Terran_Infantry_Armor);
    fields.get("maxHitPoints").set(UnitType.Terran_SCV, 60);
    fields.get("maxShields").set(UnitType.Terran_SCV, 0);
    fields.get("maxEnergy").set(UnitType.Terran_SCV, 0);
    fields.get("armor").set(UnitType.Terran_SCV, 0);
    fields.get("mineralPrice").set(UnitType.Terran_SCV, 50);
    fields.get("gasPrice").set(UnitType.Terran_SCV, 0);
    fields.get("buildTime").set(UnitType.Terran_SCV, 300);
    fields.get("supplyRequired").set(UnitType.Terran_SCV, 2);
    fields.get("supplyProvided").set(UnitType.Terran_SCV, 0);
    fields.get("spaceRequired").set(UnitType.Terran_SCV, 1);
    fields.get("spaceProvided").set(UnitType.Terran_SCV, 0);
    fields.get("buildScore").set(UnitType.Terran_SCV, 50);
    fields.get("destroyScore").set(UnitType.Terran_SCV, 100);
    fields.get("size").set(UnitType.Terran_SCV, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Terran_SCV, 1);
    fields.get("tileHeight").set(UnitType.Terran_SCV, 1);
    fields.get("dimensionLeft").set(UnitType.Terran_SCV, 11);
    fields.get("dimensionUp").set(UnitType.Terran_SCV, 11);
    fields.get("dimensionRight").set(UnitType.Terran_SCV, 11);
    fields.get("dimensionDown").set(UnitType.Terran_SCV, 11);
    fields.get("width").set(UnitType.Terran_SCV, 23);
    fields.get("height").set(UnitType.Terran_SCV, 23);
    fields.get("seekRange").set(UnitType.Terran_SCV, 32);
    fields.get("sightRange").set(UnitType.Terran_SCV, 224);
    fields.get("groundWeapon").set(UnitType.Terran_SCV, WeaponType.Fusion_Cutter);
    fields.get("maxGroundHits").set(UnitType.Terran_SCV, 1);
    fields.get("airWeapon").set(UnitType.Terran_SCV, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_SCV, 0);
    fields.get("topSpeed").set(UnitType.Terran_SCV, 3.84375);
    fields.get("acceleration").set(UnitType.Terran_SCV, 67);
    fields.get("haltDistance").set(UnitType.Terran_SCV, 12227);
    fields.get("turnRadius").set(UnitType.Terran_SCV, 40);
    fields.get("canProduce").set(UnitType.Terran_SCV, false);
    fields.get("canAttack").set(UnitType.Terran_SCV, true);
    fields.get("canMove").set(UnitType.Terran_SCV, true);
    fields.get("flyer").set(UnitType.Terran_SCV, false);
    fields.get("regeneratesHP").set(UnitType.Terran_SCV, false);
    fields.get("spellcaster").set(UnitType.Terran_SCV, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_SCV, false);
    fields.get("invincible").set(UnitType.Terran_SCV, false);
    fields.get("organic").set(UnitType.Terran_SCV, true);
    fields.get("mechanical").set(UnitType.Terran_SCV, true);
    fields.get("robotic").set(UnitType.Terran_SCV, false);
    fields.get("detector").set(UnitType.Terran_SCV, false);
    fields.get("resourceContainer").set(UnitType.Terran_SCV, false);
    fields.get("resourceDepot").set(UnitType.Terran_SCV, false);
    fields.get("refinery").set(UnitType.Terran_SCV, false);
    fields.get("worker").set(UnitType.Terran_SCV, true);
    fields.get("requiresPsi").set(UnitType.Terran_SCV, false);
    fields.get("requiresCreep").set(UnitType.Terran_SCV, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_SCV, false);
    fields.get("burrowable").set(UnitType.Terran_SCV, false);
    fields.get("cloakable").set(UnitType.Terran_SCV, false);
    fields.get("building").set(UnitType.Terran_SCV, false);
    fields.get("addon").set(UnitType.Terran_SCV, false);
    fields.get("flyingBuilding").set(UnitType.Terran_SCV, false);
    fields.get("neutral").set(UnitType.Terran_SCV, false);
    fields.get("hero").set(UnitType.Terran_SCV, false);
    fields.get("powerup").set(UnitType.Terran_SCV, false);
    fields.get("beacon").set(UnitType.Terran_SCV, false);
    fields.get("flagBeacon").set(UnitType.Terran_SCV, false);
    fields.get("specialBuilding").set(UnitType.Terran_SCV, false);
    fields.get("spell").set(UnitType.Terran_SCV, false);
    fields.get("producesCreep").set(UnitType.Terran_SCV, false);
    fields.get("producesLarva").set(UnitType.Terran_SCV, false);
    fields.get("mineralField").set(UnitType.Terran_SCV, false);
    fields.get("critter").set(UnitType.Terran_SCV, false);
    fields.get("canBuildAddon").set(UnitType.Terran_SCV, false);
    fields.get("researchesWhat").set(UnitType.Terran_SCV, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_SCV, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Wraith() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Wraith, 8);
    fields.get("race").set(UnitType.Terran_Wraith, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Wraith, new UnitType.WhatBuilds(UnitType.Terran_Starport, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Wraith, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Terran_Wraith, toMap(UnitType.Terran_Starport, 1));
    fields.get("requiredTech").set(UnitType.Terran_Wraith, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Wraith, TechType.Cloaking_Field);
    fields
        .get("abilities")
        .set(UnitType.Terran_Wraith, new ArrayList(Arrays.asList(TechType.Cloaking_Field)));
    fields
        .get("upgrades")
        .set(
            UnitType.Terran_Wraith,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Ship_Plating,
                    UpgradeType.Terran_Ship_Weapons,
                    UpgradeType.Apollo_Reactor)));
    fields.get("armorUpgrade").set(UnitType.Terran_Wraith, UpgradeType.Terran_Ship_Plating);
    fields.get("maxHitPoints").set(UnitType.Terran_Wraith, 120);
    fields.get("maxShields").set(UnitType.Terran_Wraith, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Wraith, 200);
    fields.get("armor").set(UnitType.Terran_Wraith, 0);
    fields.get("mineralPrice").set(UnitType.Terran_Wraith, 150);
    fields.get("gasPrice").set(UnitType.Terran_Wraith, 100);
    fields.get("buildTime").set(UnitType.Terran_Wraith, 900);
    fields.get("supplyRequired").set(UnitType.Terran_Wraith, 4);
    fields.get("supplyProvided").set(UnitType.Terran_Wraith, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Wraith, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Wraith, 0);
    fields.get("buildScore").set(UnitType.Terran_Wraith, 400);
    fields.get("destroyScore").set(UnitType.Terran_Wraith, 800);
    fields.get("size").set(UnitType.Terran_Wraith, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Wraith, 1);
    fields.get("tileHeight").set(UnitType.Terran_Wraith, 1);
    fields.get("dimensionLeft").set(UnitType.Terran_Wraith, 19);
    fields.get("dimensionUp").set(UnitType.Terran_Wraith, 15);
    fields.get("dimensionRight").set(UnitType.Terran_Wraith, 18);
    fields.get("dimensionDown").set(UnitType.Terran_Wraith, 14);
    fields.get("width").set(UnitType.Terran_Wraith, 38);
    fields.get("height").set(UnitType.Terran_Wraith, 30);
    fields.get("seekRange").set(UnitType.Terran_Wraith, 0);
    fields.get("sightRange").set(UnitType.Terran_Wraith, 224);
    fields.get("groundWeapon").set(UnitType.Terran_Wraith, WeaponType.Burst_Lasers);
    fields.get("maxGroundHits").set(UnitType.Terran_Wraith, 1);
    fields.get("airWeapon").set(UnitType.Terran_Wraith, WeaponType.Gemini_Missiles);
    fields.get("maxAirHits").set(UnitType.Terran_Wraith, 1);
    fields.get("topSpeed").set(UnitType.Terran_Wraith, 5.2109375);
    fields.get("acceleration").set(UnitType.Terran_Wraith, 67);
    fields.get("haltDistance").set(UnitType.Terran_Wraith, 21745);
    fields.get("turnRadius").set(UnitType.Terran_Wraith, 40);
    fields.get("canProduce").set(UnitType.Terran_Wraith, false);
    fields.get("canAttack").set(UnitType.Terran_Wraith, true);
    fields.get("canMove").set(UnitType.Terran_Wraith, true);
    fields.get("flyer").set(UnitType.Terran_Wraith, true);
    fields.get("regeneratesHP").set(UnitType.Terran_Wraith, false);
    fields.get("spellcaster").set(UnitType.Terran_Wraith, true);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Wraith, false);
    fields.get("invincible").set(UnitType.Terran_Wraith, false);
    fields.get("organic").set(UnitType.Terran_Wraith, false);
    fields.get("mechanical").set(UnitType.Terran_Wraith, true);
    fields.get("robotic").set(UnitType.Terran_Wraith, false);
    fields.get("detector").set(UnitType.Terran_Wraith, false);
    fields.get("resourceContainer").set(UnitType.Terran_Wraith, false);
    fields.get("resourceDepot").set(UnitType.Terran_Wraith, false);
    fields.get("refinery").set(UnitType.Terran_Wraith, false);
    fields.get("worker").set(UnitType.Terran_Wraith, false);
    fields.get("requiresPsi").set(UnitType.Terran_Wraith, false);
    fields.get("requiresCreep").set(UnitType.Terran_Wraith, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Wraith, false);
    fields.get("burrowable").set(UnitType.Terran_Wraith, false);
    fields.get("cloakable").set(UnitType.Terran_Wraith, true);
    fields.get("building").set(UnitType.Terran_Wraith, false);
    fields.get("addon").set(UnitType.Terran_Wraith, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Wraith, false);
    fields.get("neutral").set(UnitType.Terran_Wraith, false);
    fields.get("hero").set(UnitType.Terran_Wraith, false);
    fields.get("powerup").set(UnitType.Terran_Wraith, false);
    fields.get("beacon").set(UnitType.Terran_Wraith, false);
    fields.get("flagBeacon").set(UnitType.Terran_Wraith, false);
    fields.get("specialBuilding").set(UnitType.Terran_Wraith, false);
    fields.get("spell").set(UnitType.Terran_Wraith, false);
    fields.get("producesCreep").set(UnitType.Terran_Wraith, false);
    fields.get("producesLarva").set(UnitType.Terran_Wraith, false);
    fields.get("mineralField").set(UnitType.Terran_Wraith, false);
    fields.get("critter").set(UnitType.Terran_Wraith, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Wraith, false);
    fields.get("researchesWhat").set(UnitType.Terran_Wraith, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Wraith, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Science_Vessel() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Science_Vessel, 9);
    fields.get("race").set(UnitType.Terran_Science_Vessel, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Science_Vessel, new UnitType.WhatBuilds(UnitType.Terran_Starport, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Science_Vessel, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Terran_Science_Vessel,
            toMap(
                UnitType.Terran_Control_Tower,
                1,
                UnitType.Terran_Science_Facility,
                1,
                UnitType.Terran_Starport,
                1));
    fields.get("requiredTech").set(UnitType.Terran_Science_Vessel, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Science_Vessel, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Terran_Science_Vessel,
            new ArrayList(
                Arrays.asList(
                    TechType.EMP_Shockwave, TechType.Defensive_Matrix, TechType.Irradiate)));
    fields
        .get("upgrades")
        .set(
            UnitType.Terran_Science_Vessel,
            new ArrayList(
                Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Titan_Reactor)));
    fields.get("armorUpgrade").set(UnitType.Terran_Science_Vessel, UpgradeType.Terran_Ship_Plating);
    fields.get("maxHitPoints").set(UnitType.Terran_Science_Vessel, 200);
    fields.get("maxShields").set(UnitType.Terran_Science_Vessel, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Science_Vessel, 200);
    fields.get("armor").set(UnitType.Terran_Science_Vessel, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Science_Vessel, 100);
    fields.get("gasPrice").set(UnitType.Terran_Science_Vessel, 225);
    fields.get("buildTime").set(UnitType.Terran_Science_Vessel, 1200);
    fields.get("supplyRequired").set(UnitType.Terran_Science_Vessel, 4);
    fields.get("supplyProvided").set(UnitType.Terran_Science_Vessel, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Science_Vessel, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Science_Vessel, 0);
    fields.get("buildScore").set(UnitType.Terran_Science_Vessel, 625);
    fields.get("destroyScore").set(UnitType.Terran_Science_Vessel, 1250);
    fields.get("size").set(UnitType.Terran_Science_Vessel, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Science_Vessel, 2);
    fields.get("tileHeight").set(UnitType.Terran_Science_Vessel, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Science_Vessel, 32);
    fields.get("dimensionUp").set(UnitType.Terran_Science_Vessel, 33);
    fields.get("dimensionRight").set(UnitType.Terran_Science_Vessel, 32);
    fields.get("dimensionDown").set(UnitType.Terran_Science_Vessel, 16);
    fields.get("width").set(UnitType.Terran_Science_Vessel, 65);
    fields.get("height").set(UnitType.Terran_Science_Vessel, 50);
    fields.get("seekRange").set(UnitType.Terran_Science_Vessel, 0);
    fields.get("sightRange").set(UnitType.Terran_Science_Vessel, 320);
    fields.get("groundWeapon").set(UnitType.Terran_Science_Vessel, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Science_Vessel, 0);
    fields.get("airWeapon").set(UnitType.Terran_Science_Vessel, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Science_Vessel, 0);
    fields.get("topSpeed").set(UnitType.Terran_Science_Vessel, 3.90625);
    fields.get("acceleration").set(UnitType.Terran_Science_Vessel, 50);
    fields.get("haltDistance").set(UnitType.Terran_Science_Vessel, 5120);
    fields.get("turnRadius").set(UnitType.Terran_Science_Vessel, 40);
    fields.get("canProduce").set(UnitType.Terran_Science_Vessel, false);
    fields.get("canAttack").set(UnitType.Terran_Science_Vessel, false);
    fields.get("canMove").set(UnitType.Terran_Science_Vessel, true);
    fields.get("flyer").set(UnitType.Terran_Science_Vessel, true);
    fields.get("regeneratesHP").set(UnitType.Terran_Science_Vessel, false);
    fields.get("spellcaster").set(UnitType.Terran_Science_Vessel, true);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Science_Vessel, false);
    fields.get("invincible").set(UnitType.Terran_Science_Vessel, false);
    fields.get("organic").set(UnitType.Terran_Science_Vessel, false);
    fields.get("mechanical").set(UnitType.Terran_Science_Vessel, true);
    fields.get("robotic").set(UnitType.Terran_Science_Vessel, false);
    fields.get("detector").set(UnitType.Terran_Science_Vessel, true);
    fields.get("resourceContainer").set(UnitType.Terran_Science_Vessel, false);
    fields.get("resourceDepot").set(UnitType.Terran_Science_Vessel, false);
    fields.get("refinery").set(UnitType.Terran_Science_Vessel, false);
    fields.get("worker").set(UnitType.Terran_Science_Vessel, false);
    fields.get("requiresPsi").set(UnitType.Terran_Science_Vessel, false);
    fields.get("requiresCreep").set(UnitType.Terran_Science_Vessel, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Science_Vessel, false);
    fields.get("burrowable").set(UnitType.Terran_Science_Vessel, false);
    fields.get("cloakable").set(UnitType.Terran_Science_Vessel, false);
    fields.get("building").set(UnitType.Terran_Science_Vessel, false);
    fields.get("addon").set(UnitType.Terran_Science_Vessel, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Science_Vessel, false);
    fields.get("neutral").set(UnitType.Terran_Science_Vessel, false);
    fields.get("hero").set(UnitType.Terran_Science_Vessel, false);
    fields.get("powerup").set(UnitType.Terran_Science_Vessel, false);
    fields.get("beacon").set(UnitType.Terran_Science_Vessel, false);
    fields.get("flagBeacon").set(UnitType.Terran_Science_Vessel, false);
    fields.get("specialBuilding").set(UnitType.Terran_Science_Vessel, false);
    fields.get("spell").set(UnitType.Terran_Science_Vessel, false);
    fields.get("producesCreep").set(UnitType.Terran_Science_Vessel, false);
    fields.get("producesLarva").set(UnitType.Terran_Science_Vessel, false);
    fields.get("mineralField").set(UnitType.Terran_Science_Vessel, false);
    fields.get("critter").set(UnitType.Terran_Science_Vessel, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Science_Vessel, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Terran_Science_Vessel, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Science_Vessel, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Gui_Montag() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Gui_Montag, 10);
    fields.get("race").set(UnitType.Hero_Gui_Montag, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Gui_Montag, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Gui_Montag, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Gui_Montag, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Gui_Montag, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Gui_Montag, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Hero_Gui_Montag, new ArrayList(Arrays.asList(TechType.Stim_Packs)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Gui_Montag,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Hero_Gui_Montag, UpgradeType.Terran_Infantry_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Gui_Montag, 160);
    fields.get("maxShields").set(UnitType.Hero_Gui_Montag, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Gui_Montag, 0);
    fields.get("armor").set(UnitType.Hero_Gui_Montag, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Gui_Montag, 100);
    fields.get("gasPrice").set(UnitType.Hero_Gui_Montag, 50);
    fields.get("buildTime").set(UnitType.Hero_Gui_Montag, 720);
    fields.get("supplyRequired").set(UnitType.Hero_Gui_Montag, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Gui_Montag, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Gui_Montag, 1);
    fields.get("spaceProvided").set(UnitType.Hero_Gui_Montag, 0);
    fields.get("buildScore").set(UnitType.Hero_Gui_Montag, 0);
    fields.get("destroyScore").set(UnitType.Hero_Gui_Montag, 400);
    fields.get("size").set(UnitType.Hero_Gui_Montag, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Hero_Gui_Montag, 1);
    fields.get("tileHeight").set(UnitType.Hero_Gui_Montag, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Gui_Montag, 11);
    fields.get("dimensionUp").set(UnitType.Hero_Gui_Montag, 7);
    fields.get("dimensionRight").set(UnitType.Hero_Gui_Montag, 11);
    fields.get("dimensionDown").set(UnitType.Hero_Gui_Montag, 14);
    fields.get("width").set(UnitType.Hero_Gui_Montag, 23);
    fields.get("height").set(UnitType.Hero_Gui_Montag, 22);
    fields.get("seekRange").set(UnitType.Hero_Gui_Montag, 96);
    fields.get("sightRange").set(UnitType.Hero_Gui_Montag, 224);
    fields.get("groundWeapon").set(UnitType.Hero_Gui_Montag, WeaponType.Flame_Thrower_Gui_Montag);
    fields.get("maxGroundHits").set(UnitType.Hero_Gui_Montag, 3);
    fields.get("airWeapon").set(UnitType.Hero_Gui_Montag, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Gui_Montag, 0);
    fields.get("topSpeed").set(UnitType.Hero_Gui_Montag, 3.125);
    fields.get("acceleration").set(UnitType.Hero_Gui_Montag, 1);
    fields.get("haltDistance").set(UnitType.Hero_Gui_Montag, 1);
    fields.get("turnRadius").set(UnitType.Hero_Gui_Montag, 40);
    fields.get("canProduce").set(UnitType.Hero_Gui_Montag, false);
    fields.get("canAttack").set(UnitType.Hero_Gui_Montag, true);
    fields.get("canMove").set(UnitType.Hero_Gui_Montag, true);
    fields.get("flyer").set(UnitType.Hero_Gui_Montag, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Gui_Montag, false);
    fields.get("spellcaster").set(UnitType.Hero_Gui_Montag, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Gui_Montag, false);
    fields.get("invincible").set(UnitType.Hero_Gui_Montag, false);
    fields.get("organic").set(UnitType.Hero_Gui_Montag, true);
    fields.get("mechanical").set(UnitType.Hero_Gui_Montag, false);
    fields.get("robotic").set(UnitType.Hero_Gui_Montag, false);
    fields.get("detector").set(UnitType.Hero_Gui_Montag, false);
    fields.get("resourceContainer").set(UnitType.Hero_Gui_Montag, false);
    fields.get("resourceDepot").set(UnitType.Hero_Gui_Montag, false);
    fields.get("refinery").set(UnitType.Hero_Gui_Montag, false);
    fields.get("worker").set(UnitType.Hero_Gui_Montag, false);
    fields.get("requiresPsi").set(UnitType.Hero_Gui_Montag, false);
    fields.get("requiresCreep").set(UnitType.Hero_Gui_Montag, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Gui_Montag, false);
    fields.get("burrowable").set(UnitType.Hero_Gui_Montag, false);
    fields.get("cloakable").set(UnitType.Hero_Gui_Montag, false);
    fields.get("building").set(UnitType.Hero_Gui_Montag, false);
    fields.get("addon").set(UnitType.Hero_Gui_Montag, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Gui_Montag, false);
    fields.get("neutral").set(UnitType.Hero_Gui_Montag, false);
    fields.get("hero").set(UnitType.Hero_Gui_Montag, true);
    fields.get("powerup").set(UnitType.Hero_Gui_Montag, false);
    fields.get("beacon").set(UnitType.Hero_Gui_Montag, false);
    fields.get("flagBeacon").set(UnitType.Hero_Gui_Montag, false);
    fields.get("specialBuilding").set(UnitType.Hero_Gui_Montag, false);
    fields.get("spell").set(UnitType.Hero_Gui_Montag, false);
    fields.get("producesCreep").set(UnitType.Hero_Gui_Montag, false);
    fields.get("producesLarva").set(UnitType.Hero_Gui_Montag, false);
    fields.get("mineralField").set(UnitType.Hero_Gui_Montag, false);
    fields.get("critter").set(UnitType.Hero_Gui_Montag, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Gui_Montag, false);
    fields.get("researchesWhat").set(UnitType.Hero_Gui_Montag, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Gui_Montag, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Dropship() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Dropship, 11);
    fields.get("race").set(UnitType.Terran_Dropship, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Dropship, new UnitType.WhatBuilds(UnitType.Terran_Starport, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Dropship, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Terran_Dropship,
            toMap(UnitType.Terran_Control_Tower, 1, UnitType.Terran_Starport, 1));
    fields.get("requiredTech").set(UnitType.Terran_Dropship, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Dropship, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Dropship, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Terran_Dropship,
            new ArrayList(Arrays.asList(UpgradeType.Terran_Ship_Plating)));
    fields.get("armorUpgrade").set(UnitType.Terran_Dropship, UpgradeType.Terran_Ship_Plating);
    fields.get("maxHitPoints").set(UnitType.Terran_Dropship, 150);
    fields.get("maxShields").set(UnitType.Terran_Dropship, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Dropship, 0);
    fields.get("armor").set(UnitType.Terran_Dropship, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Dropship, 100);
    fields.get("gasPrice").set(UnitType.Terran_Dropship, 100);
    fields.get("buildTime").set(UnitType.Terran_Dropship, 750);
    fields.get("supplyRequired").set(UnitType.Terran_Dropship, 4);
    fields.get("supplyProvided").set(UnitType.Terran_Dropship, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Dropship, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Dropship, 8);
    fields.get("buildScore").set(UnitType.Terran_Dropship, 300);
    fields.get("destroyScore").set(UnitType.Terran_Dropship, 600);
    fields.get("size").set(UnitType.Terran_Dropship, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Dropship, 2);
    fields.get("tileHeight").set(UnitType.Terran_Dropship, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Dropship, 24);
    fields.get("dimensionUp").set(UnitType.Terran_Dropship, 16);
    fields.get("dimensionRight").set(UnitType.Terran_Dropship, 24);
    fields.get("dimensionDown").set(UnitType.Terran_Dropship, 20);
    fields.get("width").set(UnitType.Terran_Dropship, 49);
    fields.get("height").set(UnitType.Terran_Dropship, 37);
    fields.get("seekRange").set(UnitType.Terran_Dropship, 0);
    fields.get("sightRange").set(UnitType.Terran_Dropship, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Dropship, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Dropship, 0);
    fields.get("airWeapon").set(UnitType.Terran_Dropship, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Dropship, 0);
    fields.get("topSpeed").set(UnitType.Terran_Dropship, 4.2734375);
    fields.get("acceleration").set(UnitType.Terran_Dropship, 17);
    fields.get("haltDistance").set(UnitType.Terran_Dropship, 37756);
    fields.get("turnRadius").set(UnitType.Terran_Dropship, 20);
    fields.get("canProduce").set(UnitType.Terran_Dropship, false);
    fields.get("canAttack").set(UnitType.Terran_Dropship, false);
    fields.get("canMove").set(UnitType.Terran_Dropship, true);
    fields.get("flyer").set(UnitType.Terran_Dropship, true);
    fields.get("regeneratesHP").set(UnitType.Terran_Dropship, false);
    fields.get("spellcaster").set(UnitType.Terran_Dropship, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Dropship, false);
    fields.get("invincible").set(UnitType.Terran_Dropship, false);
    fields.get("organic").set(UnitType.Terran_Dropship, false);
    fields.get("mechanical").set(UnitType.Terran_Dropship, true);
    fields.get("robotic").set(UnitType.Terran_Dropship, false);
    fields.get("detector").set(UnitType.Terran_Dropship, false);
    fields.get("resourceContainer").set(UnitType.Terran_Dropship, false);
    fields.get("resourceDepot").set(UnitType.Terran_Dropship, false);
    fields.get("refinery").set(UnitType.Terran_Dropship, false);
    fields.get("worker").set(UnitType.Terran_Dropship, false);
    fields.get("requiresPsi").set(UnitType.Terran_Dropship, false);
    fields.get("requiresCreep").set(UnitType.Terran_Dropship, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Dropship, false);
    fields.get("burrowable").set(UnitType.Terran_Dropship, false);
    fields.get("cloakable").set(UnitType.Terran_Dropship, false);
    fields.get("building").set(UnitType.Terran_Dropship, false);
    fields.get("addon").set(UnitType.Terran_Dropship, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Dropship, false);
    fields.get("neutral").set(UnitType.Terran_Dropship, false);
    fields.get("hero").set(UnitType.Terran_Dropship, false);
    fields.get("powerup").set(UnitType.Terran_Dropship, false);
    fields.get("beacon").set(UnitType.Terran_Dropship, false);
    fields.get("flagBeacon").set(UnitType.Terran_Dropship, false);
    fields.get("specialBuilding").set(UnitType.Terran_Dropship, false);
    fields.get("spell").set(UnitType.Terran_Dropship, false);
    fields.get("producesCreep").set(UnitType.Terran_Dropship, false);
    fields.get("producesLarva").set(UnitType.Terran_Dropship, false);
    fields.get("mineralField").set(UnitType.Terran_Dropship, false);
    fields.get("critter").set(UnitType.Terran_Dropship, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Dropship, false);
    fields.get("researchesWhat").set(UnitType.Terran_Dropship, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Dropship, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Battlecruiser() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Battlecruiser, 12);
    fields.get("race").set(UnitType.Terran_Battlecruiser, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Battlecruiser, new UnitType.WhatBuilds(UnitType.Terran_Starport, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Battlecruiser, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Terran_Battlecruiser,
            toMap(
                UnitType.Terran_Control_Tower,
                1,
                UnitType.Terran_Starport,
                1,
                UnitType.Terran_Physics_Lab,
                1));
    fields.get("requiredTech").set(UnitType.Terran_Battlecruiser, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Battlecruiser, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Terran_Battlecruiser, new ArrayList(Arrays.asList(TechType.Yamato_Gun)));
    fields
        .get("upgrades")
        .set(
            UnitType.Terran_Battlecruiser,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Ship_Plating,
                    UpgradeType.Terran_Ship_Weapons,
                    UpgradeType.Colossus_Reactor)));
    fields.get("armorUpgrade").set(UnitType.Terran_Battlecruiser, UpgradeType.Terran_Ship_Plating);
    fields.get("maxHitPoints").set(UnitType.Terran_Battlecruiser, 500);
    fields.get("maxShields").set(UnitType.Terran_Battlecruiser, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Battlecruiser, 200);
    fields.get("armor").set(UnitType.Terran_Battlecruiser, 3);
    fields.get("mineralPrice").set(UnitType.Terran_Battlecruiser, 400);
    fields.get("gasPrice").set(UnitType.Terran_Battlecruiser, 300);
    fields.get("buildTime").set(UnitType.Terran_Battlecruiser, 2000);
    fields.get("supplyRequired").set(UnitType.Terran_Battlecruiser, 12);
    fields.get("supplyProvided").set(UnitType.Terran_Battlecruiser, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Battlecruiser, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Battlecruiser, 0);
    fields.get("buildScore").set(UnitType.Terran_Battlecruiser, 1200);
    fields.get("destroyScore").set(UnitType.Terran_Battlecruiser, 2400);
    fields.get("size").set(UnitType.Terran_Battlecruiser, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Battlecruiser, 2);
    fields.get("tileHeight").set(UnitType.Terran_Battlecruiser, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Battlecruiser, 37);
    fields.get("dimensionUp").set(UnitType.Terran_Battlecruiser, 29);
    fields.get("dimensionRight").set(UnitType.Terran_Battlecruiser, 37);
    fields.get("dimensionDown").set(UnitType.Terran_Battlecruiser, 29);
    fields.get("width").set(UnitType.Terran_Battlecruiser, 75);
    fields.get("height").set(UnitType.Terran_Battlecruiser, 59);
    fields.get("seekRange").set(UnitType.Terran_Battlecruiser, 0);
    fields.get("sightRange").set(UnitType.Terran_Battlecruiser, 352);
    fields.get("groundWeapon").set(UnitType.Terran_Battlecruiser, WeaponType.ATS_Laser_Battery);
    fields.get("maxGroundHits").set(UnitType.Terran_Battlecruiser, 1);
    fields.get("airWeapon").set(UnitType.Terran_Battlecruiser, WeaponType.ATA_Laser_Battery);
    fields.get("maxAirHits").set(UnitType.Terran_Battlecruiser, 1);
    fields.get("topSpeed").set(UnitType.Terran_Battlecruiser, 1.953125);
    fields.get("acceleration").set(UnitType.Terran_Battlecruiser, 27);
    fields.get("haltDistance").set(UnitType.Terran_Battlecruiser, 7585);
    fields.get("turnRadius").set(UnitType.Terran_Battlecruiser, 20);
    fields.get("canProduce").set(UnitType.Terran_Battlecruiser, false);
    fields.get("canAttack").set(UnitType.Terran_Battlecruiser, true);
    fields.get("canMove").set(UnitType.Terran_Battlecruiser, true);
    fields.get("flyer").set(UnitType.Terran_Battlecruiser, true);
    fields.get("regeneratesHP").set(UnitType.Terran_Battlecruiser, false);
    fields.get("spellcaster").set(UnitType.Terran_Battlecruiser, true);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Battlecruiser, false);
    fields.get("invincible").set(UnitType.Terran_Battlecruiser, false);
    fields.get("organic").set(UnitType.Terran_Battlecruiser, false);
    fields.get("mechanical").set(UnitType.Terran_Battlecruiser, true);
    fields.get("robotic").set(UnitType.Terran_Battlecruiser, false);
    fields.get("detector").set(UnitType.Terran_Battlecruiser, false);
    fields.get("resourceContainer").set(UnitType.Terran_Battlecruiser, false);
    fields.get("resourceDepot").set(UnitType.Terran_Battlecruiser, false);
    fields.get("refinery").set(UnitType.Terran_Battlecruiser, false);
    fields.get("worker").set(UnitType.Terran_Battlecruiser, false);
    fields.get("requiresPsi").set(UnitType.Terran_Battlecruiser, false);
    fields.get("requiresCreep").set(UnitType.Terran_Battlecruiser, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Battlecruiser, false);
    fields.get("burrowable").set(UnitType.Terran_Battlecruiser, false);
    fields.get("cloakable").set(UnitType.Terran_Battlecruiser, false);
    fields.get("building").set(UnitType.Terran_Battlecruiser, false);
    fields.get("addon").set(UnitType.Terran_Battlecruiser, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Battlecruiser, false);
    fields.get("neutral").set(UnitType.Terran_Battlecruiser, false);
    fields.get("hero").set(UnitType.Terran_Battlecruiser, false);
    fields.get("powerup").set(UnitType.Terran_Battlecruiser, false);
    fields.get("beacon").set(UnitType.Terran_Battlecruiser, false);
    fields.get("flagBeacon").set(UnitType.Terran_Battlecruiser, false);
    fields.get("specialBuilding").set(UnitType.Terran_Battlecruiser, false);
    fields.get("spell").set(UnitType.Terran_Battlecruiser, false);
    fields.get("producesCreep").set(UnitType.Terran_Battlecruiser, false);
    fields.get("producesLarva").set(UnitType.Terran_Battlecruiser, false);
    fields.get("mineralField").set(UnitType.Terran_Battlecruiser, false);
    fields.get("critter").set(UnitType.Terran_Battlecruiser, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Battlecruiser, false);
    fields.get("researchesWhat").set(UnitType.Terran_Battlecruiser, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Battlecruiser, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Vulture_Spider_Mine() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Vulture_Spider_Mine, 13);
    fields.get("race").set(UnitType.Terran_Vulture_Spider_Mine, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Vulture_Spider_Mine, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Terran_Vulture_Spider_Mine, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Terran_Vulture_Spider_Mine, toMap());
    fields.get("requiredTech").set(UnitType.Terran_Vulture_Spider_Mine, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Vulture_Spider_Mine, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Terran_Vulture_Spider_Mine, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Vulture_Spider_Mine, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Vulture_Spider_Mine, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Vulture_Spider_Mine, 20);
    fields.get("maxShields").set(UnitType.Terran_Vulture_Spider_Mine, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Vulture_Spider_Mine, 0);
    fields.get("armor").set(UnitType.Terran_Vulture_Spider_Mine, 0);
    fields.get("mineralPrice").set(UnitType.Terran_Vulture_Spider_Mine, 1);
    fields.get("gasPrice").set(UnitType.Terran_Vulture_Spider_Mine, 0);
    fields.get("buildTime").set(UnitType.Terran_Vulture_Spider_Mine, 1);
    fields.get("supplyRequired").set(UnitType.Terran_Vulture_Spider_Mine, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Vulture_Spider_Mine, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Vulture_Spider_Mine, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Vulture_Spider_Mine, 0);
    fields.get("buildScore").set(UnitType.Terran_Vulture_Spider_Mine, 0);
    fields.get("destroyScore").set(UnitType.Terran_Vulture_Spider_Mine, 25);
    fields.get("size").set(UnitType.Terran_Vulture_Spider_Mine, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Terran_Vulture_Spider_Mine, 1);
    fields.get("tileHeight").set(UnitType.Terran_Vulture_Spider_Mine, 1);
    fields.get("dimensionLeft").set(UnitType.Terran_Vulture_Spider_Mine, 7);
    fields.get("dimensionUp").set(UnitType.Terran_Vulture_Spider_Mine, 7);
    fields.get("dimensionRight").set(UnitType.Terran_Vulture_Spider_Mine, 7);
    fields.get("dimensionDown").set(UnitType.Terran_Vulture_Spider_Mine, 7);
    fields.get("width").set(UnitType.Terran_Vulture_Spider_Mine, 15);
    fields.get("height").set(UnitType.Terran_Vulture_Spider_Mine, 15);
    fields.get("seekRange").set(UnitType.Terran_Vulture_Spider_Mine, 96);
    fields.get("sightRange").set(UnitType.Terran_Vulture_Spider_Mine, 96);
    fields.get("groundWeapon").set(UnitType.Terran_Vulture_Spider_Mine, WeaponType.Spider_Mines);
    fields.get("maxGroundHits").set(UnitType.Terran_Vulture_Spider_Mine, 1);
    fields.get("airWeapon").set(UnitType.Terran_Vulture_Spider_Mine, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Vulture_Spider_Mine, 0);
    fields.get("topSpeed").set(UnitType.Terran_Vulture_Spider_Mine, 12.5);
    fields.get("acceleration").set(UnitType.Terran_Vulture_Spider_Mine, 1);
    fields.get("haltDistance").set(UnitType.Terran_Vulture_Spider_Mine, 1);
    fields.get("turnRadius").set(UnitType.Terran_Vulture_Spider_Mine, 127);
    fields.get("canProduce").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("canAttack").set(UnitType.Terran_Vulture_Spider_Mine, true);
    fields.get("canMove").set(UnitType.Terran_Vulture_Spider_Mine, true);
    fields.get("flyer").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("spellcaster").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("invincible").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("organic").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("mechanical").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("robotic").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("detector").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("resourceContainer").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("resourceDepot").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("refinery").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("worker").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("requiresPsi").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("requiresCreep").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("burrowable").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("cloakable").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("building").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("addon").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("neutral").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("hero").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("powerup").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("beacon").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("flagBeacon").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("specialBuilding").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("spell").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("producesCreep").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("producesLarva").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("mineralField").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("critter").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Vulture_Spider_Mine, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Terran_Vulture_Spider_Mine, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Terran_Vulture_Spider_Mine, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Nuclear_Missile() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Nuclear_Missile, 14);
    fields.get("race").set(UnitType.Terran_Nuclear_Missile, Race.Terran);
    fields
        .get("whatBuilds")
        .set(
            UnitType.Terran_Nuclear_Missile,
            new UnitType.WhatBuilds(UnitType.Terran_Nuclear_Silo, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Nuclear_Missile, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Terran_Nuclear_Missile, toMap(UnitType.Terran_Nuclear_Silo, 1));
    fields.get("requiredTech").set(UnitType.Terran_Nuclear_Missile, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Nuclear_Missile, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Nuclear_Missile, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Nuclear_Missile, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Nuclear_Missile, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Nuclear_Missile, 100);
    fields.get("maxShields").set(UnitType.Terran_Nuclear_Missile, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Nuclear_Missile, 0);
    fields.get("armor").set(UnitType.Terran_Nuclear_Missile, 0);
    fields.get("mineralPrice").set(UnitType.Terran_Nuclear_Missile, 200);
    fields.get("gasPrice").set(UnitType.Terran_Nuclear_Missile, 200);
    fields.get("buildTime").set(UnitType.Terran_Nuclear_Missile, 1500);
    fields.get("supplyRequired").set(UnitType.Terran_Nuclear_Missile, 16);
    fields.get("supplyProvided").set(UnitType.Terran_Nuclear_Missile, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Nuclear_Missile, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Nuclear_Missile, 0);
    fields.get("buildScore").set(UnitType.Terran_Nuclear_Missile, 800);
    fields.get("destroyScore").set(UnitType.Terran_Nuclear_Missile, 0);
    fields.get("size").set(UnitType.Terran_Nuclear_Missile, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Terran_Nuclear_Missile, 1);
    fields.get("tileHeight").set(UnitType.Terran_Nuclear_Missile, 1);
    fields.get("dimensionLeft").set(UnitType.Terran_Nuclear_Missile, 7);
    fields.get("dimensionUp").set(UnitType.Terran_Nuclear_Missile, 14);
    fields.get("dimensionRight").set(UnitType.Terran_Nuclear_Missile, 7);
    fields.get("dimensionDown").set(UnitType.Terran_Nuclear_Missile, 14);
    fields.get("width").set(UnitType.Terran_Nuclear_Missile, 15);
    fields.get("height").set(UnitType.Terran_Nuclear_Missile, 29);
    fields.get("seekRange").set(UnitType.Terran_Nuclear_Missile, 0);
    fields.get("sightRange").set(UnitType.Terran_Nuclear_Missile, 96);
    fields.get("groundWeapon").set(UnitType.Terran_Nuclear_Missile, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Nuclear_Missile, 0);
    fields.get("airWeapon").set(UnitType.Terran_Nuclear_Missile, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Nuclear_Missile, 0);
    fields.get("topSpeed").set(UnitType.Terran_Nuclear_Missile, 26.0390625);
    fields.get("acceleration").set(UnitType.Terran_Nuclear_Missile, 33);
    fields.get("haltDistance").set(UnitType.Terran_Nuclear_Missile, 1103213);
    fields.get("turnRadius").set(UnitType.Terran_Nuclear_Missile, 127);
    fields.get("canProduce").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("canAttack").set(UnitType.Terran_Nuclear_Missile, true);
    fields.get("canMove").set(UnitType.Terran_Nuclear_Missile, true);
    fields.get("flyer").set(UnitType.Terran_Nuclear_Missile, true);
    fields.get("regeneratesHP").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("spellcaster").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("invincible").set(UnitType.Terran_Nuclear_Missile, true);
    fields.get("organic").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("mechanical").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("robotic").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("detector").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("resourceContainer").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("resourceDepot").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("refinery").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("worker").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("requiresPsi").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("requiresCreep").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("burrowable").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("cloakable").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("building").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("addon").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("neutral").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("hero").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("powerup").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("beacon").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("flagBeacon").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("specialBuilding").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("spell").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("producesCreep").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("producesLarva").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("mineralField").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("critter").set(UnitType.Terran_Nuclear_Missile, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Nuclear_Missile, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Terran_Nuclear_Missile, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Nuclear_Missile, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Civilian() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Civilian, 15);
    fields.get("race").set(UnitType.Terran_Civilian, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Civilian, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Terran_Civilian, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Terran_Civilian, toMap());
    fields.get("requiredTech").set(UnitType.Terran_Civilian, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Civilian, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Civilian, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Terran_Civilian,
            new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Armor)));
    fields.get("armorUpgrade").set(UnitType.Terran_Civilian, UpgradeType.Terran_Infantry_Armor);
    fields.get("maxHitPoints").set(UnitType.Terran_Civilian, 40);
    fields.get("maxShields").set(UnitType.Terran_Civilian, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Civilian, 0);
    fields.get("armor").set(UnitType.Terran_Civilian, 0);
    fields.get("mineralPrice").set(UnitType.Terran_Civilian, 0);
    fields.get("gasPrice").set(UnitType.Terran_Civilian, 0);
    fields.get("buildTime").set(UnitType.Terran_Civilian, 1);
    fields.get("supplyRequired").set(UnitType.Terran_Civilian, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Civilian, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Civilian, 1);
    fields.get("spaceProvided").set(UnitType.Terran_Civilian, 0);
    fields.get("buildScore").set(UnitType.Terran_Civilian, 0);
    fields.get("destroyScore").set(UnitType.Terran_Civilian, 10);
    fields.get("size").set(UnitType.Terran_Civilian, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Terran_Civilian, 1);
    fields.get("tileHeight").set(UnitType.Terran_Civilian, 1);
    fields.get("dimensionLeft").set(UnitType.Terran_Civilian, 8);
    fields.get("dimensionUp").set(UnitType.Terran_Civilian, 9);
    fields.get("dimensionRight").set(UnitType.Terran_Civilian, 8);
    fields.get("dimensionDown").set(UnitType.Terran_Civilian, 10);
    fields.get("width").set(UnitType.Terran_Civilian, 17);
    fields.get("height").set(UnitType.Terran_Civilian, 20);
    fields.get("seekRange").set(UnitType.Terran_Civilian, 0);
    fields.get("sightRange").set(UnitType.Terran_Civilian, 224);
    fields.get("groundWeapon").set(UnitType.Terran_Civilian, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Civilian, 0);
    fields.get("airWeapon").set(UnitType.Terran_Civilian, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Civilian, 0);
    fields.get("topSpeed").set(UnitType.Terran_Civilian, 3.125);
    fields.get("acceleration").set(UnitType.Terran_Civilian, 1);
    fields.get("haltDistance").set(UnitType.Terran_Civilian, 1);
    fields.get("turnRadius").set(UnitType.Terran_Civilian, 40);
    fields.get("canProduce").set(UnitType.Terran_Civilian, false);
    fields.get("canAttack").set(UnitType.Terran_Civilian, false);
    fields.get("canMove").set(UnitType.Terran_Civilian, true);
    fields.get("flyer").set(UnitType.Terran_Civilian, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Civilian, false);
    fields.get("spellcaster").set(UnitType.Terran_Civilian, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Civilian, false);
    fields.get("invincible").set(UnitType.Terran_Civilian, false);
    fields.get("organic").set(UnitType.Terran_Civilian, true);
    fields.get("mechanical").set(UnitType.Terran_Civilian, false);
    fields.get("robotic").set(UnitType.Terran_Civilian, false);
    fields.get("detector").set(UnitType.Terran_Civilian, false);
    fields.get("resourceContainer").set(UnitType.Terran_Civilian, false);
    fields.get("resourceDepot").set(UnitType.Terran_Civilian, false);
    fields.get("refinery").set(UnitType.Terran_Civilian, false);
    fields.get("worker").set(UnitType.Terran_Civilian, false);
    fields.get("requiresPsi").set(UnitType.Terran_Civilian, false);
    fields.get("requiresCreep").set(UnitType.Terran_Civilian, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Civilian, false);
    fields.get("burrowable").set(UnitType.Terran_Civilian, false);
    fields.get("cloakable").set(UnitType.Terran_Civilian, false);
    fields.get("building").set(UnitType.Terran_Civilian, false);
    fields.get("addon").set(UnitType.Terran_Civilian, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Civilian, false);
    fields.get("neutral").set(UnitType.Terran_Civilian, false);
    fields.get("hero").set(UnitType.Terran_Civilian, true);
    fields.get("powerup").set(UnitType.Terran_Civilian, false);
    fields.get("beacon").set(UnitType.Terran_Civilian, false);
    fields.get("flagBeacon").set(UnitType.Terran_Civilian, false);
    fields.get("specialBuilding").set(UnitType.Terran_Civilian, false);
    fields.get("spell").set(UnitType.Terran_Civilian, false);
    fields.get("producesCreep").set(UnitType.Terran_Civilian, false);
    fields.get("producesLarva").set(UnitType.Terran_Civilian, false);
    fields.get("mineralField").set(UnitType.Terran_Civilian, false);
    fields.get("critter").set(UnitType.Terran_Civilian, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Civilian, false);
    fields.get("researchesWhat").set(UnitType.Terran_Civilian, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Civilian, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Sarah_Kerrigan() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Sarah_Kerrigan, 16);
    fields.get("race").set(UnitType.Hero_Sarah_Kerrigan, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Sarah_Kerrigan, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Sarah_Kerrigan, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Sarah_Kerrigan, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Sarah_Kerrigan, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Sarah_Kerrigan, TechType.Personnel_Cloaking);
    fields
        .get("abilities")
        .set(
            UnitType.Hero_Sarah_Kerrigan,
            new ArrayList(Arrays.asList(TechType.Lockdown, TechType.Personnel_Cloaking)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Sarah_Kerrigan,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Hero_Sarah_Kerrigan, UpgradeType.Terran_Infantry_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Sarah_Kerrigan, 250);
    fields.get("maxShields").set(UnitType.Hero_Sarah_Kerrigan, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Sarah_Kerrigan, 250);
    fields.get("armor").set(UnitType.Hero_Sarah_Kerrigan, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Sarah_Kerrigan, 50);
    fields.get("gasPrice").set(UnitType.Hero_Sarah_Kerrigan, 150);
    fields.get("buildTime").set(UnitType.Hero_Sarah_Kerrigan, 1500);
    fields.get("supplyRequired").set(UnitType.Hero_Sarah_Kerrigan, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Sarah_Kerrigan, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Sarah_Kerrigan, 1);
    fields.get("spaceProvided").set(UnitType.Hero_Sarah_Kerrigan, 0);
    fields.get("buildScore").set(UnitType.Hero_Sarah_Kerrigan, 0);
    fields.get("destroyScore").set(UnitType.Hero_Sarah_Kerrigan, 700);
    fields.get("size").set(UnitType.Hero_Sarah_Kerrigan, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Hero_Sarah_Kerrigan, 1);
    fields.get("tileHeight").set(UnitType.Hero_Sarah_Kerrigan, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Sarah_Kerrigan, 7);
    fields.get("dimensionUp").set(UnitType.Hero_Sarah_Kerrigan, 10);
    fields.get("dimensionRight").set(UnitType.Hero_Sarah_Kerrigan, 7);
    fields.get("dimensionDown").set(UnitType.Hero_Sarah_Kerrigan, 11);
    fields.get("width").set(UnitType.Hero_Sarah_Kerrigan, 15);
    fields.get("height").set(UnitType.Hero_Sarah_Kerrigan, 22);
    fields.get("seekRange").set(UnitType.Hero_Sarah_Kerrigan, 0);
    fields.get("sightRange").set(UnitType.Hero_Sarah_Kerrigan, 352);
    fields
        .get("groundWeapon")
        .set(UnitType.Hero_Sarah_Kerrigan, WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan);
    fields.get("maxGroundHits").set(UnitType.Hero_Sarah_Kerrigan, 1);
    fields
        .get("airWeapon")
        .set(UnitType.Hero_Sarah_Kerrigan, WeaponType.C_10_Canister_Rifle_Sarah_Kerrigan);
    fields.get("maxAirHits").set(UnitType.Hero_Sarah_Kerrigan, 1);
    fields.get("topSpeed").set(UnitType.Hero_Sarah_Kerrigan, 3.125);
    fields.get("acceleration").set(UnitType.Hero_Sarah_Kerrigan, 1);
    fields.get("haltDistance").set(UnitType.Hero_Sarah_Kerrigan, 1);
    fields.get("turnRadius").set(UnitType.Hero_Sarah_Kerrigan, 40);
    fields.get("canProduce").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("canAttack").set(UnitType.Hero_Sarah_Kerrigan, true);
    fields.get("canMove").set(UnitType.Hero_Sarah_Kerrigan, true);
    fields.get("flyer").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("spellcaster").set(UnitType.Hero_Sarah_Kerrigan, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("invincible").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("organic").set(UnitType.Hero_Sarah_Kerrigan, true);
    fields.get("mechanical").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("robotic").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("detector").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("resourceContainer").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("resourceDepot").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("refinery").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("worker").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("requiresPsi").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("requiresCreep").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("burrowable").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("cloakable").set(UnitType.Hero_Sarah_Kerrigan, true);
    fields.get("building").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("addon").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("neutral").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("hero").set(UnitType.Hero_Sarah_Kerrigan, true);
    fields.get("powerup").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("beacon").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("flagBeacon").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("specialBuilding").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("spell").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("producesCreep").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("producesLarva").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("mineralField").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("critter").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Sarah_Kerrigan, false);
    fields.get("researchesWhat").set(UnitType.Hero_Sarah_Kerrigan, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Sarah_Kerrigan, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Alan_Schezar() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Alan_Schezar, 17);
    fields.get("race").set(UnitType.Hero_Alan_Schezar, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Alan_Schezar, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Alan_Schezar, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Alan_Schezar, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Alan_Schezar, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Alan_Schezar, TechType.None);
    fields.get("abilities").set(UnitType.Hero_Alan_Schezar, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Alan_Schezar,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Vehicle_Plating, UpgradeType.Terran_Vehicle_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Hero_Alan_Schezar, UpgradeType.Terran_Vehicle_Plating);
    fields.get("maxHitPoints").set(UnitType.Hero_Alan_Schezar, 300);
    fields.get("maxShields").set(UnitType.Hero_Alan_Schezar, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Alan_Schezar, 0);
    fields.get("armor").set(UnitType.Hero_Alan_Schezar, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Alan_Schezar, 200);
    fields.get("gasPrice").set(UnitType.Hero_Alan_Schezar, 100);
    fields.get("buildTime").set(UnitType.Hero_Alan_Schezar, 1200);
    fields.get("supplyRequired").set(UnitType.Hero_Alan_Schezar, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Alan_Schezar, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Alan_Schezar, 2);
    fields.get("spaceProvided").set(UnitType.Hero_Alan_Schezar, 0);
    fields.get("buildScore").set(UnitType.Hero_Alan_Schezar, 0);
    fields.get("destroyScore").set(UnitType.Hero_Alan_Schezar, 800);
    fields.get("size").set(UnitType.Hero_Alan_Schezar, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Alan_Schezar, 1);
    fields.get("tileHeight").set(UnitType.Hero_Alan_Schezar, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Alan_Schezar, 16);
    fields.get("dimensionUp").set(UnitType.Hero_Alan_Schezar, 16);
    fields.get("dimensionRight").set(UnitType.Hero_Alan_Schezar, 15);
    fields.get("dimensionDown").set(UnitType.Hero_Alan_Schezar, 15);
    fields.get("width").set(UnitType.Hero_Alan_Schezar, 32);
    fields.get("height").set(UnitType.Hero_Alan_Schezar, 32);
    fields.get("seekRange").set(UnitType.Hero_Alan_Schezar, 160);
    fields.get("sightRange").set(UnitType.Hero_Alan_Schezar, 256);
    fields
        .get("groundWeapon")
        .set(UnitType.Hero_Alan_Schezar, WeaponType.Twin_Autocannons_Alan_Schezar);
    fields.get("maxGroundHits").set(UnitType.Hero_Alan_Schezar, 1);
    fields
        .get("airWeapon")
        .set(UnitType.Hero_Alan_Schezar, WeaponType.Hellfire_Missile_Pack_Alan_Schezar);
    fields.get("maxAirHits").set(UnitType.Hero_Alan_Schezar, 1);
    fields.get("topSpeed").set(UnitType.Hero_Alan_Schezar, 3.5703125);
    fields.get("acceleration").set(UnitType.Hero_Alan_Schezar, 1);
    fields.get("haltDistance").set(UnitType.Hero_Alan_Schezar, 1);
    fields.get("turnRadius").set(UnitType.Hero_Alan_Schezar, 17);
    fields.get("canProduce").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("canAttack").set(UnitType.Hero_Alan_Schezar, true);
    fields.get("canMove").set(UnitType.Hero_Alan_Schezar, true);
    fields.get("flyer").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("spellcaster").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("invincible").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("organic").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("mechanical").set(UnitType.Hero_Alan_Schezar, true);
    fields.get("robotic").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("detector").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("resourceContainer").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("resourceDepot").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("refinery").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("worker").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("requiresPsi").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("requiresCreep").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("burrowable").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("cloakable").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("building").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("addon").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("neutral").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("hero").set(UnitType.Hero_Alan_Schezar, true);
    fields.get("powerup").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("beacon").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("flagBeacon").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("specialBuilding").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("spell").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("producesCreep").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("producesLarva").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("mineralField").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("critter").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Alan_Schezar, false);
    fields.get("researchesWhat").set(UnitType.Hero_Alan_Schezar, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Alan_Schezar, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Alan_Schezar_Turret() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Alan_Schezar_Turret, 18);
    fields.get("race").set(UnitType.Hero_Alan_Schezar_Turret, null);
    fields.get("whatBuilds").set(UnitType.Hero_Alan_Schezar_Turret, null);
    fields.get("buildsWhat").set(UnitType.Hero_Alan_Schezar_Turret, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Alan_Schezar_Turret, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Alan_Schezar_Turret, null);
    fields.get("cloakingTech").set(UnitType.Hero_Alan_Schezar_Turret, null);
    fields.get("abilities").set(UnitType.Hero_Alan_Schezar_Turret, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Hero_Alan_Schezar_Turret, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Hero_Alan_Schezar_Turret, null);
    fields.get("maxHitPoints").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("maxShields").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("armor").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("mineralPrice").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("gasPrice").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("buildTime").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("supplyRequired").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("spaceProvided").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("buildScore").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("destroyScore").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("size").set(UnitType.Hero_Alan_Schezar_Turret, null);
    fields.get("tileWidth").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("tileHeight").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("dimensionLeft").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("dimensionUp").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("dimensionRight").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("dimensionDown").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("width").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("height").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("seekRange").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("sightRange").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("groundWeapon").set(UnitType.Hero_Alan_Schezar_Turret, null);
    fields.get("maxGroundHits").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("airWeapon").set(UnitType.Hero_Alan_Schezar_Turret, null);
    fields.get("maxAirHits").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("topSpeed").set(UnitType.Hero_Alan_Schezar_Turret, 0.0);
    fields.get("acceleration").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("haltDistance").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("turnRadius").set(UnitType.Hero_Alan_Schezar_Turret, 0);
    fields.get("canProduce").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("canAttack").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("canMove").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("flyer").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("spellcaster").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("invincible").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("organic").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("mechanical").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("robotic").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("detector").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("resourceContainer").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("resourceDepot").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("refinery").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("worker").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("requiresPsi").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("requiresCreep").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("burrowable").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("cloakable").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("building").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("addon").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("neutral").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("hero").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("powerup").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("beacon").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("flagBeacon").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("specialBuilding").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("spell").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("producesCreep").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("producesLarva").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("mineralField").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("critter").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Alan_Schezar_Turret, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Hero_Alan_Schezar_Turret, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Hero_Alan_Schezar_Turret, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Jim_Raynor_Vulture() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Jim_Raynor_Vulture, 19);
    fields.get("race").set(UnitType.Hero_Jim_Raynor_Vulture, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Jim_Raynor_Vulture, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Jim_Raynor_Vulture, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Jim_Raynor_Vulture, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Jim_Raynor_Vulture, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Jim_Raynor_Vulture, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Hero_Jim_Raynor_Vulture, new ArrayList(Arrays.asList(TechType.Spider_Mines)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Jim_Raynor_Vulture,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Vehicle_Plating, UpgradeType.Terran_Vehicle_Weapons)));
    fields
        .get("armorUpgrade")
        .set(UnitType.Hero_Jim_Raynor_Vulture, UpgradeType.Terran_Vehicle_Plating);
    fields.get("maxHitPoints").set(UnitType.Hero_Jim_Raynor_Vulture, 300);
    fields.get("maxShields").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
    fields.get("armor").set(UnitType.Hero_Jim_Raynor_Vulture, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Jim_Raynor_Vulture, 150);
    fields.get("gasPrice").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
    fields.get("buildTime").set(UnitType.Hero_Jim_Raynor_Vulture, 900);
    fields.get("supplyRequired").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Jim_Raynor_Vulture, 2);
    fields.get("spaceProvided").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
    fields.get("buildScore").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
    fields.get("destroyScore").set(UnitType.Hero_Jim_Raynor_Vulture, 300);
    fields.get("size").set(UnitType.Hero_Jim_Raynor_Vulture, UnitSizeType.Medium);
    fields.get("tileWidth").set(UnitType.Hero_Jim_Raynor_Vulture, 1);
    fields.get("tileHeight").set(UnitType.Hero_Jim_Raynor_Vulture, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Jim_Raynor_Vulture, 16);
    fields.get("dimensionUp").set(UnitType.Hero_Jim_Raynor_Vulture, 16);
    fields.get("dimensionRight").set(UnitType.Hero_Jim_Raynor_Vulture, 15);
    fields.get("dimensionDown").set(UnitType.Hero_Jim_Raynor_Vulture, 15);
    fields.get("width").set(UnitType.Hero_Jim_Raynor_Vulture, 32);
    fields.get("height").set(UnitType.Hero_Jim_Raynor_Vulture, 32);
    fields.get("seekRange").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
    fields.get("sightRange").set(UnitType.Hero_Jim_Raynor_Vulture, 256);
    fields
        .get("groundWeapon")
        .set(UnitType.Hero_Jim_Raynor_Vulture, WeaponType.Fragmentation_Grenade_Jim_Raynor);
    fields.get("maxGroundHits").set(UnitType.Hero_Jim_Raynor_Vulture, 1);
    fields.get("airWeapon").set(UnitType.Hero_Jim_Raynor_Vulture, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Jim_Raynor_Vulture, 0);
    fields.get("topSpeed").set(UnitType.Hero_Jim_Raynor_Vulture, 5.0);
    fields.get("acceleration").set(UnitType.Hero_Jim_Raynor_Vulture, 100);
    fields.get("haltDistance").set(UnitType.Hero_Jim_Raynor_Vulture, 14569);
    fields.get("turnRadius").set(UnitType.Hero_Jim_Raynor_Vulture, 40);
    fields.get("canProduce").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("canAttack").set(UnitType.Hero_Jim_Raynor_Vulture, true);
    fields.get("canMove").set(UnitType.Hero_Jim_Raynor_Vulture, true);
    fields.get("flyer").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("spellcaster").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("invincible").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("organic").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("mechanical").set(UnitType.Hero_Jim_Raynor_Vulture, true);
    fields.get("robotic").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("detector").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("resourceContainer").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("resourceDepot").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("refinery").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("worker").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("requiresPsi").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("requiresCreep").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("burrowable").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("cloakable").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("building").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("addon").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("neutral").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("hero").set(UnitType.Hero_Jim_Raynor_Vulture, true);
    fields.get("powerup").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("beacon").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("flagBeacon").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("specialBuilding").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("spell").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("producesCreep").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("producesLarva").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("mineralField").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("critter").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Jim_Raynor_Vulture, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Hero_Jim_Raynor_Vulture, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Hero_Jim_Raynor_Vulture, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Jim_Raynor_Marine() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Jim_Raynor_Marine, 20);
    fields.get("race").set(UnitType.Hero_Jim_Raynor_Marine, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Jim_Raynor_Marine, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Jim_Raynor_Marine, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Jim_Raynor_Marine, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Jim_Raynor_Marine, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Jim_Raynor_Marine, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Hero_Jim_Raynor_Marine, new ArrayList(Arrays.asList(TechType.Stim_Packs)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Jim_Raynor_Marine,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons)));
    fields
        .get("armorUpgrade")
        .set(UnitType.Hero_Jim_Raynor_Marine, UpgradeType.Terran_Infantry_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Jim_Raynor_Marine, 200);
    fields.get("maxShields").set(UnitType.Hero_Jim_Raynor_Marine, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Jim_Raynor_Marine, 0);
    fields.get("armor").set(UnitType.Hero_Jim_Raynor_Marine, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Jim_Raynor_Marine, 50);
    fields.get("gasPrice").set(UnitType.Hero_Jim_Raynor_Marine, 0);
    fields.get("buildTime").set(UnitType.Hero_Jim_Raynor_Marine, 1);
    fields.get("supplyRequired").set(UnitType.Hero_Jim_Raynor_Marine, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Jim_Raynor_Marine, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Jim_Raynor_Marine, 1);
    fields.get("spaceProvided").set(UnitType.Hero_Jim_Raynor_Marine, 0);
    fields.get("buildScore").set(UnitType.Hero_Jim_Raynor_Marine, 0);
    fields.get("destroyScore").set(UnitType.Hero_Jim_Raynor_Marine, 200);
    fields.get("size").set(UnitType.Hero_Jim_Raynor_Marine, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Hero_Jim_Raynor_Marine, 1);
    fields.get("tileHeight").set(UnitType.Hero_Jim_Raynor_Marine, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Jim_Raynor_Marine, 8);
    fields.get("dimensionUp").set(UnitType.Hero_Jim_Raynor_Marine, 9);
    fields.get("dimensionRight").set(UnitType.Hero_Jim_Raynor_Marine, 8);
    fields.get("dimensionDown").set(UnitType.Hero_Jim_Raynor_Marine, 10);
    fields.get("width").set(UnitType.Hero_Jim_Raynor_Marine, 17);
    fields.get("height").set(UnitType.Hero_Jim_Raynor_Marine, 20);
    fields.get("seekRange").set(UnitType.Hero_Jim_Raynor_Marine, 0);
    fields.get("sightRange").set(UnitType.Hero_Jim_Raynor_Marine, 224);
    fields
        .get("groundWeapon")
        .set(UnitType.Hero_Jim_Raynor_Marine, WeaponType.Gauss_Rifle_Jim_Raynor);
    fields.get("maxGroundHits").set(UnitType.Hero_Jim_Raynor_Marine, 1);
    fields.get("airWeapon").set(UnitType.Hero_Jim_Raynor_Marine, WeaponType.Gauss_Rifle_Jim_Raynor);
    fields.get("maxAirHits").set(UnitType.Hero_Jim_Raynor_Marine, 1);
    fields.get("topSpeed").set(UnitType.Hero_Jim_Raynor_Marine, 3.125);
    fields.get("acceleration").set(UnitType.Hero_Jim_Raynor_Marine, 1);
    fields.get("haltDistance").set(UnitType.Hero_Jim_Raynor_Marine, 1);
    fields.get("turnRadius").set(UnitType.Hero_Jim_Raynor_Marine, 40);
    fields.get("canProduce").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("canAttack").set(UnitType.Hero_Jim_Raynor_Marine, true);
    fields.get("canMove").set(UnitType.Hero_Jim_Raynor_Marine, true);
    fields.get("flyer").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("spellcaster").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("invincible").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("organic").set(UnitType.Hero_Jim_Raynor_Marine, true);
    fields.get("mechanical").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("robotic").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("detector").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("resourceContainer").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("resourceDepot").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("refinery").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("worker").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("requiresPsi").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("requiresCreep").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("burrowable").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("cloakable").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("building").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("addon").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("neutral").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("hero").set(UnitType.Hero_Jim_Raynor_Marine, true);
    fields.get("powerup").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("beacon").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("flagBeacon").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("specialBuilding").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("spell").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("producesCreep").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("producesLarva").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("mineralField").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("critter").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Jim_Raynor_Marine, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Hero_Jim_Raynor_Marine, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Jim_Raynor_Marine, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Tom_Kazansky() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Tom_Kazansky, 21);
    fields.get("race").set(UnitType.Hero_Tom_Kazansky, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Tom_Kazansky, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Tom_Kazansky, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Tom_Kazansky, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Tom_Kazansky, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Tom_Kazansky, TechType.Cloaking_Field);
    fields
        .get("abilities")
        .set(UnitType.Hero_Tom_Kazansky, new ArrayList(Arrays.asList(TechType.Cloaking_Field)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Tom_Kazansky,
            new ArrayList(
                Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Terran_Ship_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Hero_Tom_Kazansky, UpgradeType.Terran_Ship_Plating);
    fields.get("maxHitPoints").set(UnitType.Hero_Tom_Kazansky, 500);
    fields.get("maxShields").set(UnitType.Hero_Tom_Kazansky, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Tom_Kazansky, 250);
    fields.get("armor").set(UnitType.Hero_Tom_Kazansky, 4);
    fields.get("mineralPrice").set(UnitType.Hero_Tom_Kazansky, 400);
    fields.get("gasPrice").set(UnitType.Hero_Tom_Kazansky, 200);
    fields.get("buildTime").set(UnitType.Hero_Tom_Kazansky, 1800);
    fields.get("supplyRequired").set(UnitType.Hero_Tom_Kazansky, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Tom_Kazansky, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Tom_Kazansky, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Tom_Kazansky, 0);
    fields.get("buildScore").set(UnitType.Hero_Tom_Kazansky, 0);
    fields.get("destroyScore").set(UnitType.Hero_Tom_Kazansky, 1600);
    fields.get("size").set(UnitType.Hero_Tom_Kazansky, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Tom_Kazansky, 1);
    fields.get("tileHeight").set(UnitType.Hero_Tom_Kazansky, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Tom_Kazansky, 19);
    fields.get("dimensionUp").set(UnitType.Hero_Tom_Kazansky, 15);
    fields.get("dimensionRight").set(UnitType.Hero_Tom_Kazansky, 18);
    fields.get("dimensionDown").set(UnitType.Hero_Tom_Kazansky, 14);
    fields.get("width").set(UnitType.Hero_Tom_Kazansky, 38);
    fields.get("height").set(UnitType.Hero_Tom_Kazansky, 30);
    fields.get("seekRange").set(UnitType.Hero_Tom_Kazansky, 0);
    fields.get("sightRange").set(UnitType.Hero_Tom_Kazansky, 224);
    fields
        .get("groundWeapon")
        .set(UnitType.Hero_Tom_Kazansky, WeaponType.Burst_Lasers_Tom_Kazansky);
    fields.get("maxGroundHits").set(UnitType.Hero_Tom_Kazansky, 1);
    fields
        .get("airWeapon")
        .set(UnitType.Hero_Tom_Kazansky, WeaponType.Gemini_Missiles_Tom_Kazansky);
    fields.get("maxAirHits").set(UnitType.Hero_Tom_Kazansky, 1);
    fields.get("topSpeed").set(UnitType.Hero_Tom_Kazansky, 5.2109375);
    fields.get("acceleration").set(UnitType.Hero_Tom_Kazansky, 67);
    fields.get("haltDistance").set(UnitType.Hero_Tom_Kazansky, 21745);
    fields.get("turnRadius").set(UnitType.Hero_Tom_Kazansky, 40);
    fields.get("canProduce").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("canAttack").set(UnitType.Hero_Tom_Kazansky, true);
    fields.get("canMove").set(UnitType.Hero_Tom_Kazansky, true);
    fields.get("flyer").set(UnitType.Hero_Tom_Kazansky, true);
    fields.get("regeneratesHP").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("spellcaster").set(UnitType.Hero_Tom_Kazansky, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("invincible").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("organic").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("mechanical").set(UnitType.Hero_Tom_Kazansky, true);
    fields.get("robotic").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("detector").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("resourceContainer").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("resourceDepot").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("refinery").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("worker").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("requiresPsi").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("requiresCreep").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("burrowable").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("cloakable").set(UnitType.Hero_Tom_Kazansky, true);
    fields.get("building").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("addon").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("neutral").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("hero").set(UnitType.Hero_Tom_Kazansky, true);
    fields.get("powerup").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("beacon").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("flagBeacon").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("specialBuilding").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("spell").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("producesCreep").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("producesLarva").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("mineralField").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("critter").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Tom_Kazansky, false);
    fields.get("researchesWhat").set(UnitType.Hero_Tom_Kazansky, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Tom_Kazansky, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Magellan() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Magellan, 22);
    fields.get("race").set(UnitType.Hero_Magellan, Race.Terran);
    fields.get("whatBuilds").set(UnitType.Hero_Magellan, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Magellan, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Magellan, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Magellan, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Magellan, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Hero_Magellan,
            new ArrayList(
                Arrays.asList(
                    TechType.EMP_Shockwave, TechType.Defensive_Matrix, TechType.Irradiate)));
    fields
        .get("upgrades")
        .set(UnitType.Hero_Magellan, new ArrayList(Arrays.asList(UpgradeType.Terran_Ship_Plating)));
    fields.get("armorUpgrade").set(UnitType.Hero_Magellan, UpgradeType.Terran_Ship_Plating);
    fields.get("maxHitPoints").set(UnitType.Hero_Magellan, 800);
    fields.get("maxShields").set(UnitType.Hero_Magellan, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Magellan, 250);
    fields.get("armor").set(UnitType.Hero_Magellan, 4);
    fields.get("mineralPrice").set(UnitType.Hero_Magellan, 50);
    fields.get("gasPrice").set(UnitType.Hero_Magellan, 600);
    fields.get("buildTime").set(UnitType.Hero_Magellan, 2400);
    fields.get("supplyRequired").set(UnitType.Hero_Magellan, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Magellan, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Magellan, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Magellan, 0);
    fields.get("buildScore").set(UnitType.Hero_Magellan, 0);
    fields.get("destroyScore").set(UnitType.Hero_Magellan, 2500);
    fields.get("size").set(UnitType.Hero_Magellan, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Magellan, 2);
    fields.get("tileHeight").set(UnitType.Hero_Magellan, 2);
    fields.get("dimensionLeft").set(UnitType.Hero_Magellan, 32);
    fields.get("dimensionUp").set(UnitType.Hero_Magellan, 33);
    fields.get("dimensionRight").set(UnitType.Hero_Magellan, 32);
    fields.get("dimensionDown").set(UnitType.Hero_Magellan, 16);
    fields.get("width").set(UnitType.Hero_Magellan, 65);
    fields.get("height").set(UnitType.Hero_Magellan, 50);
    fields.get("seekRange").set(UnitType.Hero_Magellan, 0);
    fields.get("sightRange").set(UnitType.Hero_Magellan, 320);
    fields.get("groundWeapon").set(UnitType.Hero_Magellan, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Hero_Magellan, 0);
    fields.get("airWeapon").set(UnitType.Hero_Magellan, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Magellan, 0);
    fields.get("topSpeed").set(UnitType.Hero_Magellan, 3.90625);
    fields.get("acceleration").set(UnitType.Hero_Magellan, 50);
    fields.get("haltDistance").set(UnitType.Hero_Magellan, 5120);
    fields.get("turnRadius").set(UnitType.Hero_Magellan, 40);
    fields.get("canProduce").set(UnitType.Hero_Magellan, false);
    fields.get("canAttack").set(UnitType.Hero_Magellan, false);
    fields.get("canMove").set(UnitType.Hero_Magellan, true);
    fields.get("flyer").set(UnitType.Hero_Magellan, true);
    fields.get("regeneratesHP").set(UnitType.Hero_Magellan, false);
    fields.get("spellcaster").set(UnitType.Hero_Magellan, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Magellan, false);
    fields.get("invincible").set(UnitType.Hero_Magellan, false);
    fields.get("organic").set(UnitType.Hero_Magellan, false);
    fields.get("mechanical").set(UnitType.Hero_Magellan, true);
    fields.get("robotic").set(UnitType.Hero_Magellan, false);
    fields.get("detector").set(UnitType.Hero_Magellan, true);
    fields.get("resourceContainer").set(UnitType.Hero_Magellan, false);
    fields.get("resourceDepot").set(UnitType.Hero_Magellan, false);
    fields.get("refinery").set(UnitType.Hero_Magellan, false);
    fields.get("worker").set(UnitType.Hero_Magellan, false);
    fields.get("requiresPsi").set(UnitType.Hero_Magellan, false);
    fields.get("requiresCreep").set(UnitType.Hero_Magellan, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Magellan, false);
    fields.get("burrowable").set(UnitType.Hero_Magellan, false);
    fields.get("cloakable").set(UnitType.Hero_Magellan, false);
    fields.get("building").set(UnitType.Hero_Magellan, false);
    fields.get("addon").set(UnitType.Hero_Magellan, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Magellan, false);
    fields.get("neutral").set(UnitType.Hero_Magellan, false);
    fields.get("hero").set(UnitType.Hero_Magellan, true);
    fields.get("powerup").set(UnitType.Hero_Magellan, false);
    fields.get("beacon").set(UnitType.Hero_Magellan, false);
    fields.get("flagBeacon").set(UnitType.Hero_Magellan, false);
    fields.get("specialBuilding").set(UnitType.Hero_Magellan, false);
    fields.get("spell").set(UnitType.Hero_Magellan, false);
    fields.get("producesCreep").set(UnitType.Hero_Magellan, false);
    fields.get("producesLarva").set(UnitType.Hero_Magellan, false);
    fields.get("mineralField").set(UnitType.Hero_Magellan, false);
    fields.get("critter").set(UnitType.Hero_Magellan, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Magellan, false);
    fields.get("researchesWhat").set(UnitType.Hero_Magellan, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Magellan, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Edmund_Duke_Tank_Mode() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 23);
    fields.get("race").set(UnitType.Hero_Edmund_Duke_Tank_Mode, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Edmund_Duke_Tank_Mode, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Hero_Edmund_Duke_Tank_Mode, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Edmund_Duke_Tank_Mode, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Edmund_Duke_Tank_Mode, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Edmund_Duke_Tank_Mode, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Hero_Edmund_Duke_Tank_Mode,
            new ArrayList(Arrays.asList(TechType.Tank_Siege_Mode)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Edmund_Duke_Tank_Mode,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Vehicle_Plating, UpgradeType.Terran_Vehicle_Weapons)));
    fields
        .get("armorUpgrade")
        .set(UnitType.Hero_Edmund_Duke_Tank_Mode, UpgradeType.Terran_Vehicle_Plating);
    fields.get("maxHitPoints").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 400);
    fields.get("maxShields").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 0);
    fields.get("armor").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 300);
    fields.get("gasPrice").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 200);
    fields.get("buildTime").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 1500);
    fields.get("supplyRequired").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 4);
    fields.get("spaceProvided").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 0);
    fields.get("buildScore").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 0);
    fields.get("destroyScore").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 1400);
    fields.get("size").set(UnitType.Hero_Edmund_Duke_Tank_Mode, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 1);
    fields.get("tileHeight").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 16);
    fields.get("dimensionUp").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 16);
    fields.get("dimensionRight").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 15);
    fields.get("dimensionDown").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 15);
    fields.get("width").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 32);
    fields.get("height").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 32);
    fields.get("seekRange").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 256);
    fields.get("sightRange").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 320);
    fields
        .get("groundWeapon")
        .set(UnitType.Hero_Edmund_Duke_Tank_Mode, WeaponType.Arclite_Cannon_Edmund_Duke);
    fields.get("maxGroundHits").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 1);
    fields.get("airWeapon").set(UnitType.Hero_Edmund_Duke_Tank_Mode, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 0);
    fields.get("topSpeed").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 3.125);
    fields.get("acceleration").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 1);
    fields.get("haltDistance").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 1);
    fields.get("turnRadius").set(UnitType.Hero_Edmund_Duke_Tank_Mode, 13);
    fields.get("canProduce").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("canAttack").set(UnitType.Hero_Edmund_Duke_Tank_Mode, true);
    fields.get("canMove").set(UnitType.Hero_Edmund_Duke_Tank_Mode, true);
    fields.get("flyer").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("spellcaster").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("invincible").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("organic").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("mechanical").set(UnitType.Hero_Edmund_Duke_Tank_Mode, true);
    fields.get("robotic").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("detector").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("resourceContainer").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("resourceDepot").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("refinery").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("worker").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("requiresPsi").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("requiresCreep").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("burrowable").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("cloakable").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("building").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("addon").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("neutral").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("hero").set(UnitType.Hero_Edmund_Duke_Tank_Mode, true);
    fields.get("powerup").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("beacon").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("flagBeacon").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("specialBuilding").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("spell").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("producesCreep").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("producesLarva").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("mineralField").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("critter").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Edmund_Duke_Tank_Mode, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Hero_Edmund_Duke_Tank_Mode, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Hero_Edmund_Duke_Tank_Mode, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Edmund_Duke_Tank_Mode_Turret() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 24);
    fields.get("race").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
    fields.get("whatBuilds").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
    fields
        .get("buildsWhat")
        .set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
    fields.get("cloakingTech").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
    fields
        .get("abilities")
        .set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
    fields.get("maxHitPoints").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("maxShields").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("armor").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("mineralPrice").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("gasPrice").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("buildTime").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("supplyRequired").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("spaceProvided").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("buildScore").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("destroyScore").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("size").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
    fields.get("tileWidth").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("tileHeight").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("dimensionLeft").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("dimensionUp").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("dimensionRight").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("dimensionDown").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("width").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("height").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("seekRange").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("sightRange").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("groundWeapon").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
    fields.get("maxGroundHits").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("airWeapon").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, null);
    fields.get("maxAirHits").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("topSpeed").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0.0);
    fields.get("acceleration").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("haltDistance").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("turnRadius").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, 0);
    fields.get("canProduce").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("canAttack").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("canMove").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("flyer").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("spellcaster").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("invincible").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("organic").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("mechanical").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("robotic").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("detector").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("resourceContainer").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("resourceDepot").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("refinery").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("worker").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("requiresPsi").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("requiresCreep").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("burrowable").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("cloakable").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("building").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("addon").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("neutral").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("hero").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("powerup").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("beacon").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("flagBeacon").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("specialBuilding").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("spell").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("producesCreep").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("producesLarva").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("mineralField").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("critter").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Hero_Edmund_Duke_Tank_Mode_Turret, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Edmund_Duke_Siege_Mode() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 25);
    fields.get("race").set(UnitType.Hero_Edmund_Duke_Siege_Mode, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Edmund_Duke_Siege_Mode, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Hero_Edmund_Duke_Siege_Mode, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Edmund_Duke_Siege_Mode, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Edmund_Duke_Siege_Mode, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Edmund_Duke_Siege_Mode, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Hero_Edmund_Duke_Siege_Mode,
            new ArrayList(Arrays.asList(TechType.Tank_Siege_Mode)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Edmund_Duke_Siege_Mode,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Vehicle_Plating, UpgradeType.Terran_Vehicle_Weapons)));
    fields
        .get("armorUpgrade")
        .set(UnitType.Hero_Edmund_Duke_Siege_Mode, UpgradeType.Terran_Vehicle_Plating);
    fields.get("maxHitPoints").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 400);
    fields.get("maxShields").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
    fields.get("armor").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 300);
    fields.get("gasPrice").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 200);
    fields.get("buildTime").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 1500);
    fields.get("supplyRequired").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
    fields.get("buildScore").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
    fields.get("destroyScore").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 1400);
    fields.get("size").set(UnitType.Hero_Edmund_Duke_Siege_Mode, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 1);
    fields.get("tileHeight").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 16);
    fields.get("dimensionUp").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 16);
    fields.get("dimensionRight").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 15);
    fields.get("dimensionDown").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 15);
    fields.get("width").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 32);
    fields.get("height").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 32);
    fields.get("seekRange").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
    fields.get("sightRange").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 320);
    fields
        .get("groundWeapon")
        .set(UnitType.Hero_Edmund_Duke_Siege_Mode, WeaponType.Arclite_Shock_Cannon_Edmund_Duke);
    fields.get("maxGroundHits").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 1);
    fields.get("airWeapon").set(UnitType.Hero_Edmund_Duke_Siege_Mode, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0);
    fields.get("topSpeed").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 0.0);
    fields.get("acceleration").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 1);
    fields.get("haltDistance").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 1);
    fields.get("turnRadius").set(UnitType.Hero_Edmund_Duke_Siege_Mode, 40);
    fields.get("canProduce").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("canAttack").set(UnitType.Hero_Edmund_Duke_Siege_Mode, true);
    fields.get("canMove").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("flyer").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("spellcaster").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("invincible").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("organic").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("mechanical").set(UnitType.Hero_Edmund_Duke_Siege_Mode, true);
    fields.get("robotic").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("detector").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("resourceContainer").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("resourceDepot").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("refinery").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("worker").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("requiresPsi").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("requiresCreep").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("burrowable").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("cloakable").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("building").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("addon").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("neutral").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("hero").set(UnitType.Hero_Edmund_Duke_Siege_Mode, true);
    fields.get("powerup").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("beacon").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("flagBeacon").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("specialBuilding").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("spell").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("producesCreep").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("producesLarva").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("mineralField").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("critter").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Edmund_Duke_Siege_Mode, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Hero_Edmund_Duke_Siege_Mode, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Hero_Edmund_Duke_Siege_Mode, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Edmund_Duke_Siege_Mode_Turret() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 26);
    fields.get("race").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
    fields.get("whatBuilds").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
    fields
        .get("buildsWhat")
        .set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
    fields.get("cloakingTech").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
    fields
        .get("abilities")
        .set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
    fields.get("maxHitPoints").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("maxShields").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("armor").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("mineralPrice").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("gasPrice").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("buildTime").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("supplyRequired").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("spaceProvided").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("buildScore").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("destroyScore").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("size").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
    fields.get("tileWidth").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("tileHeight").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("dimensionLeft").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("dimensionUp").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("dimensionRight").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("dimensionDown").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("width").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("height").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("seekRange").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("sightRange").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("groundWeapon").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
    fields.get("maxGroundHits").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("airWeapon").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, null);
    fields.get("maxAirHits").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("topSpeed").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0.0);
    fields.get("acceleration").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("haltDistance").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("turnRadius").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, 0);
    fields.get("canProduce").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("canAttack").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("canMove").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("flyer").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("spellcaster").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("invincible").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("organic").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("mechanical").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("robotic").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("detector").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("resourceContainer").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("resourceDepot").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("refinery").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("worker").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("requiresPsi").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("requiresCreep").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("burrowable").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("cloakable").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("building").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("addon").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("neutral").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("hero").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("powerup").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("beacon").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("flagBeacon").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("specialBuilding").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("spell").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("producesCreep").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("producesLarva").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("mineralField").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("critter").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Hero_Edmund_Duke_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Arcturus_Mengsk() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Arcturus_Mengsk, 27);
    fields.get("race").set(UnitType.Hero_Arcturus_Mengsk, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Arcturus_Mengsk, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Arcturus_Mengsk, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Arcturus_Mengsk, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Arcturus_Mengsk, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Arcturus_Mengsk, TechType.None);
    fields.get("abilities").set(UnitType.Hero_Arcturus_Mengsk, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Arcturus_Mengsk,
            new ArrayList(
                Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Terran_Ship_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Hero_Arcturus_Mengsk, UpgradeType.Terran_Ship_Plating);
    fields.get("maxHitPoints").set(UnitType.Hero_Arcturus_Mengsk, 1000);
    fields.get("maxShields").set(UnitType.Hero_Arcturus_Mengsk, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Arcturus_Mengsk, 250);
    fields.get("armor").set(UnitType.Hero_Arcturus_Mengsk, 4);
    fields.get("mineralPrice").set(UnitType.Hero_Arcturus_Mengsk, 800);
    fields.get("gasPrice").set(UnitType.Hero_Arcturus_Mengsk, 600);
    fields.get("buildTime").set(UnitType.Hero_Arcturus_Mengsk, 4800);
    fields.get("supplyRequired").set(UnitType.Hero_Arcturus_Mengsk, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Arcturus_Mengsk, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Arcturus_Mengsk, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Arcturus_Mengsk, 0);
    fields.get("buildScore").set(UnitType.Hero_Arcturus_Mengsk, 0);
    fields.get("destroyScore").set(UnitType.Hero_Arcturus_Mengsk, 4800);
    fields.get("size").set(UnitType.Hero_Arcturus_Mengsk, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Arcturus_Mengsk, 2);
    fields.get("tileHeight").set(UnitType.Hero_Arcturus_Mengsk, 2);
    fields.get("dimensionLeft").set(UnitType.Hero_Arcturus_Mengsk, 37);
    fields.get("dimensionUp").set(UnitType.Hero_Arcturus_Mengsk, 29);
    fields.get("dimensionRight").set(UnitType.Hero_Arcturus_Mengsk, 37);
    fields.get("dimensionDown").set(UnitType.Hero_Arcturus_Mengsk, 29);
    fields.get("width").set(UnitType.Hero_Arcturus_Mengsk, 75);
    fields.get("height").set(UnitType.Hero_Arcturus_Mengsk, 59);
    fields.get("seekRange").set(UnitType.Hero_Arcturus_Mengsk, 0);
    fields.get("sightRange").set(UnitType.Hero_Arcturus_Mengsk, 256);
    fields
        .get("groundWeapon")
        .set(UnitType.Hero_Arcturus_Mengsk, WeaponType.ATS_Laser_Battery_Hero);
    fields.get("maxGroundHits").set(UnitType.Hero_Arcturus_Mengsk, 1);
    fields.get("airWeapon").set(UnitType.Hero_Arcturus_Mengsk, WeaponType.ATA_Laser_Battery_Hero);
    fields.get("maxAirHits").set(UnitType.Hero_Arcturus_Mengsk, 1);
    fields.get("topSpeed").set(UnitType.Hero_Arcturus_Mengsk, 1.953125);
    fields.get("acceleration").set(UnitType.Hero_Arcturus_Mengsk, 27);
    fields.get("haltDistance").set(UnitType.Hero_Arcturus_Mengsk, 7585);
    fields.get("turnRadius").set(UnitType.Hero_Arcturus_Mengsk, 20);
    fields.get("canProduce").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("canAttack").set(UnitType.Hero_Arcturus_Mengsk, true);
    fields.get("canMove").set(UnitType.Hero_Arcturus_Mengsk, true);
    fields.get("flyer").set(UnitType.Hero_Arcturus_Mengsk, true);
    fields.get("regeneratesHP").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("spellcaster").set(UnitType.Hero_Arcturus_Mengsk, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("invincible").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("organic").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("mechanical").set(UnitType.Hero_Arcturus_Mengsk, true);
    fields.get("robotic").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("detector").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("resourceContainer").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("resourceDepot").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("refinery").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("worker").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("requiresPsi").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("requiresCreep").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("burrowable").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("cloakable").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("building").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("addon").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("neutral").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("hero").set(UnitType.Hero_Arcturus_Mengsk, true);
    fields.get("powerup").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("beacon").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("flagBeacon").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("specialBuilding").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("spell").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("producesCreep").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("producesLarva").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("mineralField").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("critter").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Arcturus_Mengsk, false);
    fields.get("researchesWhat").set(UnitType.Hero_Arcturus_Mengsk, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Arcturus_Mengsk, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Hyperion() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Hyperion, 28);
    fields.get("race").set(UnitType.Hero_Hyperion, Race.Terran);
    fields.get("whatBuilds").set(UnitType.Hero_Hyperion, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Hyperion, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Hyperion, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Hyperion, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Hyperion, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Hero_Hyperion, new ArrayList(Arrays.asList(TechType.Yamato_Gun)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Hyperion,
            new ArrayList(
                Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Terran_Ship_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Hero_Hyperion, UpgradeType.Terran_Ship_Plating);
    fields.get("maxHitPoints").set(UnitType.Hero_Hyperion, 850);
    fields.get("maxShields").set(UnitType.Hero_Hyperion, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Hyperion, 250);
    fields.get("armor").set(UnitType.Hero_Hyperion, 4);
    fields.get("mineralPrice").set(UnitType.Hero_Hyperion, 800);
    fields.get("gasPrice").set(UnitType.Hero_Hyperion, 600);
    fields.get("buildTime").set(UnitType.Hero_Hyperion, 2400);
    fields.get("supplyRequired").set(UnitType.Hero_Hyperion, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Hyperion, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Hyperion, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Hyperion, 0);
    fields.get("buildScore").set(UnitType.Hero_Hyperion, 0);
    fields.get("destroyScore").set(UnitType.Hero_Hyperion, 4800);
    fields.get("size").set(UnitType.Hero_Hyperion, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Hyperion, 2);
    fields.get("tileHeight").set(UnitType.Hero_Hyperion, 2);
    fields.get("dimensionLeft").set(UnitType.Hero_Hyperion, 37);
    fields.get("dimensionUp").set(UnitType.Hero_Hyperion, 29);
    fields.get("dimensionRight").set(UnitType.Hero_Hyperion, 37);
    fields.get("dimensionDown").set(UnitType.Hero_Hyperion, 29);
    fields.get("width").set(UnitType.Hero_Hyperion, 75);
    fields.get("height").set(UnitType.Hero_Hyperion, 59);
    fields.get("seekRange").set(UnitType.Hero_Hyperion, 0);
    fields.get("sightRange").set(UnitType.Hero_Hyperion, 352);
    fields.get("groundWeapon").set(UnitType.Hero_Hyperion, WeaponType.ATS_Laser_Battery_Hyperion);
    fields.get("maxGroundHits").set(UnitType.Hero_Hyperion, 1);
    fields.get("airWeapon").set(UnitType.Hero_Hyperion, WeaponType.ATA_Laser_Battery_Hyperion);
    fields.get("maxAirHits").set(UnitType.Hero_Hyperion, 1);
    fields.get("topSpeed").set(UnitType.Hero_Hyperion, 1.953125);
    fields.get("acceleration").set(UnitType.Hero_Hyperion, 27);
    fields.get("haltDistance").set(UnitType.Hero_Hyperion, 7585);
    fields.get("turnRadius").set(UnitType.Hero_Hyperion, 20);
    fields.get("canProduce").set(UnitType.Hero_Hyperion, false);
    fields.get("canAttack").set(UnitType.Hero_Hyperion, true);
    fields.get("canMove").set(UnitType.Hero_Hyperion, true);
    fields.get("flyer").set(UnitType.Hero_Hyperion, true);
    fields.get("regeneratesHP").set(UnitType.Hero_Hyperion, false);
    fields.get("spellcaster").set(UnitType.Hero_Hyperion, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Hyperion, false);
    fields.get("invincible").set(UnitType.Hero_Hyperion, false);
    fields.get("organic").set(UnitType.Hero_Hyperion, false);
    fields.get("mechanical").set(UnitType.Hero_Hyperion, true);
    fields.get("robotic").set(UnitType.Hero_Hyperion, false);
    fields.get("detector").set(UnitType.Hero_Hyperion, false);
    fields.get("resourceContainer").set(UnitType.Hero_Hyperion, false);
    fields.get("resourceDepot").set(UnitType.Hero_Hyperion, false);
    fields.get("refinery").set(UnitType.Hero_Hyperion, false);
    fields.get("worker").set(UnitType.Hero_Hyperion, false);
    fields.get("requiresPsi").set(UnitType.Hero_Hyperion, false);
    fields.get("requiresCreep").set(UnitType.Hero_Hyperion, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Hyperion, false);
    fields.get("burrowable").set(UnitType.Hero_Hyperion, false);
    fields.get("cloakable").set(UnitType.Hero_Hyperion, false);
    fields.get("building").set(UnitType.Hero_Hyperion, false);
    fields.get("addon").set(UnitType.Hero_Hyperion, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Hyperion, false);
    fields.get("neutral").set(UnitType.Hero_Hyperion, false);
    fields.get("hero").set(UnitType.Hero_Hyperion, true);
    fields.get("powerup").set(UnitType.Hero_Hyperion, false);
    fields.get("beacon").set(UnitType.Hero_Hyperion, false);
    fields.get("flagBeacon").set(UnitType.Hero_Hyperion, false);
    fields.get("specialBuilding").set(UnitType.Hero_Hyperion, false);
    fields.get("spell").set(UnitType.Hero_Hyperion, false);
    fields.get("producesCreep").set(UnitType.Hero_Hyperion, false);
    fields.get("producesLarva").set(UnitType.Hero_Hyperion, false);
    fields.get("mineralField").set(UnitType.Hero_Hyperion, false);
    fields.get("critter").set(UnitType.Hero_Hyperion, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Hyperion, false);
    fields.get("researchesWhat").set(UnitType.Hero_Hyperion, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Hyperion, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Norad_II() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Norad_II, 29);
    fields.get("race").set(UnitType.Hero_Norad_II, Race.Terran);
    fields.get("whatBuilds").set(UnitType.Hero_Norad_II, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Norad_II, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Norad_II, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Norad_II, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Norad_II, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Hero_Norad_II, new ArrayList(Arrays.asList(TechType.Yamato_Gun)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Norad_II,
            new ArrayList(
                Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Terran_Ship_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Hero_Norad_II, UpgradeType.Terran_Ship_Plating);
    fields.get("maxHitPoints").set(UnitType.Hero_Norad_II, 700);
    fields.get("maxShields").set(UnitType.Hero_Norad_II, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Norad_II, 250);
    fields.get("armor").set(UnitType.Hero_Norad_II, 4);
    fields.get("mineralPrice").set(UnitType.Hero_Norad_II, 800);
    fields.get("gasPrice").set(UnitType.Hero_Norad_II, 600);
    fields.get("buildTime").set(UnitType.Hero_Norad_II, 4800);
    fields.get("supplyRequired").set(UnitType.Hero_Norad_II, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Norad_II, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Norad_II, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Norad_II, 0);
    fields.get("buildScore").set(UnitType.Hero_Norad_II, 0);
    fields.get("destroyScore").set(UnitType.Hero_Norad_II, 4800);
    fields.get("size").set(UnitType.Hero_Norad_II, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Norad_II, 2);
    fields.get("tileHeight").set(UnitType.Hero_Norad_II, 2);
    fields.get("dimensionLeft").set(UnitType.Hero_Norad_II, 37);
    fields.get("dimensionUp").set(UnitType.Hero_Norad_II, 29);
    fields.get("dimensionRight").set(UnitType.Hero_Norad_II, 37);
    fields.get("dimensionDown").set(UnitType.Hero_Norad_II, 29);
    fields.get("width").set(UnitType.Hero_Norad_II, 75);
    fields.get("height").set(UnitType.Hero_Norad_II, 59);
    fields.get("seekRange").set(UnitType.Hero_Norad_II, 0);
    fields.get("sightRange").set(UnitType.Hero_Norad_II, 352);
    fields.get("groundWeapon").set(UnitType.Hero_Norad_II, WeaponType.ATS_Laser_Battery_Hero);
    fields.get("maxGroundHits").set(UnitType.Hero_Norad_II, 1);
    fields.get("airWeapon").set(UnitType.Hero_Norad_II, WeaponType.ATA_Laser_Battery_Hero);
    fields.get("maxAirHits").set(UnitType.Hero_Norad_II, 1);
    fields.get("topSpeed").set(UnitType.Hero_Norad_II, 1.953125);
    fields.get("acceleration").set(UnitType.Hero_Norad_II, 27);
    fields.get("haltDistance").set(UnitType.Hero_Norad_II, 7585);
    fields.get("turnRadius").set(UnitType.Hero_Norad_II, 20);
    fields.get("canProduce").set(UnitType.Hero_Norad_II, false);
    fields.get("canAttack").set(UnitType.Hero_Norad_II, true);
    fields.get("canMove").set(UnitType.Hero_Norad_II, true);
    fields.get("flyer").set(UnitType.Hero_Norad_II, true);
    fields.get("regeneratesHP").set(UnitType.Hero_Norad_II, false);
    fields.get("spellcaster").set(UnitType.Hero_Norad_II, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Norad_II, false);
    fields.get("invincible").set(UnitType.Hero_Norad_II, false);
    fields.get("organic").set(UnitType.Hero_Norad_II, false);
    fields.get("mechanical").set(UnitType.Hero_Norad_II, true);
    fields.get("robotic").set(UnitType.Hero_Norad_II, false);
    fields.get("detector").set(UnitType.Hero_Norad_II, false);
    fields.get("resourceContainer").set(UnitType.Hero_Norad_II, false);
    fields.get("resourceDepot").set(UnitType.Hero_Norad_II, false);
    fields.get("refinery").set(UnitType.Hero_Norad_II, false);
    fields.get("worker").set(UnitType.Hero_Norad_II, false);
    fields.get("requiresPsi").set(UnitType.Hero_Norad_II, false);
    fields.get("requiresCreep").set(UnitType.Hero_Norad_II, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Norad_II, false);
    fields.get("burrowable").set(UnitType.Hero_Norad_II, false);
    fields.get("cloakable").set(UnitType.Hero_Norad_II, false);
    fields.get("building").set(UnitType.Hero_Norad_II, false);
    fields.get("addon").set(UnitType.Hero_Norad_II, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Norad_II, false);
    fields.get("neutral").set(UnitType.Hero_Norad_II, false);
    fields.get("hero").set(UnitType.Hero_Norad_II, true);
    fields.get("powerup").set(UnitType.Hero_Norad_II, false);
    fields.get("beacon").set(UnitType.Hero_Norad_II, false);
    fields.get("flagBeacon").set(UnitType.Hero_Norad_II, false);
    fields.get("specialBuilding").set(UnitType.Hero_Norad_II, false);
    fields.get("spell").set(UnitType.Hero_Norad_II, false);
    fields.get("producesCreep").set(UnitType.Hero_Norad_II, false);
    fields.get("producesLarva").set(UnitType.Hero_Norad_II, false);
    fields.get("mineralField").set(UnitType.Hero_Norad_II, false);
    fields.get("critter").set(UnitType.Hero_Norad_II, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Norad_II, false);
    fields.get("researchesWhat").set(UnitType.Hero_Norad_II, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Norad_II, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Siege_Tank_Siege_Mode() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Siege_Tank_Siege_Mode, 30);
    fields.get("race").set(UnitType.Terran_Siege_Tank_Siege_Mode, Race.Terran);
    fields
        .get("whatBuilds")
        .set(
            UnitType.Terran_Siege_Tank_Siege_Mode,
            new UnitType.WhatBuilds(UnitType.Terran_Factory, 1));
    fields
        .get("buildsWhat")
        .set(UnitType.Terran_Siege_Tank_Siege_Mode, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Terran_Siege_Tank_Siege_Mode,
            toMap(UnitType.Terran_Machine_Shop, 1, UnitType.Terran_Factory, 1));
    fields.get("requiredTech").set(UnitType.Terran_Siege_Tank_Siege_Mode, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Siege_Tank_Siege_Mode, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Terran_Siege_Tank_Siege_Mode,
            new ArrayList(Arrays.asList(TechType.Tank_Siege_Mode)));
    fields
        .get("upgrades")
        .set(
            UnitType.Terran_Siege_Tank_Siege_Mode,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Vehicle_Plating, UpgradeType.Terran_Vehicle_Weapons)));
    fields
        .get("armorUpgrade")
        .set(UnitType.Terran_Siege_Tank_Siege_Mode, UpgradeType.Terran_Vehicle_Plating);
    fields.get("maxHitPoints").set(UnitType.Terran_Siege_Tank_Siege_Mode, 150);
    fields.get("maxShields").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0);
    fields.get("armor").set(UnitType.Terran_Siege_Tank_Siege_Mode, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Siege_Tank_Siege_Mode, 150);
    fields.get("gasPrice").set(UnitType.Terran_Siege_Tank_Siege_Mode, 100);
    fields.get("buildTime").set(UnitType.Terran_Siege_Tank_Siege_Mode, 750);
    fields.get("supplyRequired").set(UnitType.Terran_Siege_Tank_Siege_Mode, 4);
    fields.get("supplyProvided").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Siege_Tank_Siege_Mode, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0);
    fields.get("buildScore").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0);
    fields.get("destroyScore").set(UnitType.Terran_Siege_Tank_Siege_Mode, 700);
    fields.get("size").set(UnitType.Terran_Siege_Tank_Siege_Mode, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Siege_Tank_Siege_Mode, 1);
    fields.get("tileHeight").set(UnitType.Terran_Siege_Tank_Siege_Mode, 1);
    fields.get("dimensionLeft").set(UnitType.Terran_Siege_Tank_Siege_Mode, 16);
    fields.get("dimensionUp").set(UnitType.Terran_Siege_Tank_Siege_Mode, 16);
    fields.get("dimensionRight").set(UnitType.Terran_Siege_Tank_Siege_Mode, 15);
    fields.get("dimensionDown").set(UnitType.Terran_Siege_Tank_Siege_Mode, 15);
    fields.get("width").set(UnitType.Terran_Siege_Tank_Siege_Mode, 32);
    fields.get("height").set(UnitType.Terran_Siege_Tank_Siege_Mode, 32);
    fields.get("seekRange").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0);
    fields.get("sightRange").set(UnitType.Terran_Siege_Tank_Siege_Mode, 320);
    fields
        .get("groundWeapon")
        .set(UnitType.Terran_Siege_Tank_Siege_Mode, WeaponType.Arclite_Shock_Cannon);
    fields.get("maxGroundHits").set(UnitType.Terran_Siege_Tank_Siege_Mode, 1);
    fields.get("airWeapon").set(UnitType.Terran_Siege_Tank_Siege_Mode, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0);
    fields.get("topSpeed").set(UnitType.Terran_Siege_Tank_Siege_Mode, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Siege_Tank_Siege_Mode, 1);
    fields.get("haltDistance").set(UnitType.Terran_Siege_Tank_Siege_Mode, 1);
    fields.get("turnRadius").set(UnitType.Terran_Siege_Tank_Siege_Mode, 40);
    fields.get("canProduce").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("canAttack").set(UnitType.Terran_Siege_Tank_Siege_Mode, true);
    fields.get("canMove").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("flyer").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("spellcaster").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("invincible").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("organic").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("mechanical").set(UnitType.Terran_Siege_Tank_Siege_Mode, true);
    fields.get("robotic").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("detector").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("resourceContainer").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("resourceDepot").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("refinery").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("worker").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("requiresPsi").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("requiresCreep").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("burrowable").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("cloakable").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("building").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("addon").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("neutral").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("hero").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("powerup").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("beacon").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("flagBeacon").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("specialBuilding").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("spell").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("producesCreep").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("producesLarva").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("mineralField").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("critter").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Siege_Tank_Siege_Mode, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Terran_Siege_Tank_Siege_Mode, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Terran_Siege_Tank_Siege_Mode, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Siege_Tank_Siege_Mode_Turret() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 31);
    fields.get("race").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
    fields.get("whatBuilds").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
    fields
        .get("buildsWhat")
        .set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, toMap());
    fields.get("requiredTech").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
    fields.get("cloakingTech").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
    fields
        .get("abilities")
        .set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
    fields.get("maxHitPoints").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("maxShields").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("armor").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("mineralPrice").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("gasPrice").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("buildTime").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("supplyRequired").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("spaceProvided").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("buildScore").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("destroyScore").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("size").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
    fields.get("tileWidth").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("tileHeight").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("dimensionLeft").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("dimensionUp").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("dimensionRight").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("dimensionDown").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("width").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("height").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("seekRange").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("sightRange").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("groundWeapon").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
    fields.get("maxGroundHits").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("airWeapon").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, null);
    fields.get("maxAirHits").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("topSpeed").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("haltDistance").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("turnRadius").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, 0);
    fields.get("canProduce").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("canAttack").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("canMove").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("flyer").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("spellcaster").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("invincible").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("organic").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("mechanical").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("robotic").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("detector").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("resourceContainer").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("resourceDepot").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("refinery").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("worker").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("requiresPsi").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("requiresCreep").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("burrowable").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("cloakable").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("building").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("addon").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("neutral").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("hero").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("powerup").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("beacon").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("flagBeacon").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("specialBuilding").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("spell").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("producesCreep").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("producesLarva").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("mineralField").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("critter").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Terran_Siege_Tank_Siege_Mode_Turret, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Firebat() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Firebat, 32);
    fields.get("race").set(UnitType.Terran_Firebat, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Firebat, new UnitType.WhatBuilds(UnitType.Terran_Barracks, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Firebat, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Terran_Firebat,
            toMap(UnitType.Terran_Academy, 1, UnitType.Terran_Barracks, 1));
    fields.get("requiredTech").set(UnitType.Terran_Firebat, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Firebat, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Terran_Firebat, new ArrayList(Arrays.asList(TechType.Stim_Packs)));
    fields
        .get("upgrades")
        .set(
            UnitType.Terran_Firebat,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Terran_Firebat, UpgradeType.Terran_Infantry_Armor);
    fields.get("maxHitPoints").set(UnitType.Terran_Firebat, 50);
    fields.get("maxShields").set(UnitType.Terran_Firebat, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Firebat, 0);
    fields.get("armor").set(UnitType.Terran_Firebat, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Firebat, 50);
    fields.get("gasPrice").set(UnitType.Terran_Firebat, 25);
    fields.get("buildTime").set(UnitType.Terran_Firebat, 360);
    fields.get("supplyRequired").set(UnitType.Terran_Firebat, 2);
    fields.get("supplyProvided").set(UnitType.Terran_Firebat, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Firebat, 1);
    fields.get("spaceProvided").set(UnitType.Terran_Firebat, 0);
    fields.get("buildScore").set(UnitType.Terran_Firebat, 100);
    fields.get("destroyScore").set(UnitType.Terran_Firebat, 200);
    fields.get("size").set(UnitType.Terran_Firebat, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Terran_Firebat, 1);
    fields.get("tileHeight").set(UnitType.Terran_Firebat, 1);
    fields.get("dimensionLeft").set(UnitType.Terran_Firebat, 11);
    fields.get("dimensionUp").set(UnitType.Terran_Firebat, 7);
    fields.get("dimensionRight").set(UnitType.Terran_Firebat, 11);
    fields.get("dimensionDown").set(UnitType.Terran_Firebat, 14);
    fields.get("width").set(UnitType.Terran_Firebat, 23);
    fields.get("height").set(UnitType.Terran_Firebat, 22);
    fields.get("seekRange").set(UnitType.Terran_Firebat, 96);
    fields.get("sightRange").set(UnitType.Terran_Firebat, 224);
    fields.get("groundWeapon").set(UnitType.Terran_Firebat, WeaponType.Flame_Thrower);
    fields.get("maxGroundHits").set(UnitType.Terran_Firebat, 3);
    fields.get("airWeapon").set(UnitType.Terran_Firebat, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Firebat, 0);
    fields.get("topSpeed").set(UnitType.Terran_Firebat, 3.125);
    fields.get("acceleration").set(UnitType.Terran_Firebat, 1);
    fields.get("haltDistance").set(UnitType.Terran_Firebat, 1);
    fields.get("turnRadius").set(UnitType.Terran_Firebat, 40);
    fields.get("canProduce").set(UnitType.Terran_Firebat, false);
    fields.get("canAttack").set(UnitType.Terran_Firebat, true);
    fields.get("canMove").set(UnitType.Terran_Firebat, true);
    fields.get("flyer").set(UnitType.Terran_Firebat, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Firebat, false);
    fields.get("spellcaster").set(UnitType.Terran_Firebat, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Firebat, false);
    fields.get("invincible").set(UnitType.Terran_Firebat, false);
    fields.get("organic").set(UnitType.Terran_Firebat, true);
    fields.get("mechanical").set(UnitType.Terran_Firebat, false);
    fields.get("robotic").set(UnitType.Terran_Firebat, false);
    fields.get("detector").set(UnitType.Terran_Firebat, false);
    fields.get("resourceContainer").set(UnitType.Terran_Firebat, false);
    fields.get("resourceDepot").set(UnitType.Terran_Firebat, false);
    fields.get("refinery").set(UnitType.Terran_Firebat, false);
    fields.get("worker").set(UnitType.Terran_Firebat, false);
    fields.get("requiresPsi").set(UnitType.Terran_Firebat, false);
    fields.get("requiresCreep").set(UnitType.Terran_Firebat, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Firebat, false);
    fields.get("burrowable").set(UnitType.Terran_Firebat, false);
    fields.get("cloakable").set(UnitType.Terran_Firebat, false);
    fields.get("building").set(UnitType.Terran_Firebat, false);
    fields.get("addon").set(UnitType.Terran_Firebat, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Firebat, false);
    fields.get("neutral").set(UnitType.Terran_Firebat, false);
    fields.get("hero").set(UnitType.Terran_Firebat, false);
    fields.get("powerup").set(UnitType.Terran_Firebat, false);
    fields.get("beacon").set(UnitType.Terran_Firebat, false);
    fields.get("flagBeacon").set(UnitType.Terran_Firebat, false);
    fields.get("specialBuilding").set(UnitType.Terran_Firebat, false);
    fields.get("spell").set(UnitType.Terran_Firebat, false);
    fields.get("producesCreep").set(UnitType.Terran_Firebat, false);
    fields.get("producesLarva").set(UnitType.Terran_Firebat, false);
    fields.get("mineralField").set(UnitType.Terran_Firebat, false);
    fields.get("critter").set(UnitType.Terran_Firebat, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Firebat, false);
    fields.get("researchesWhat").set(UnitType.Terran_Firebat, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Firebat, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Spell_Scanner_Sweep() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Spell_Scanner_Sweep, 33);
    fields.get("race").set(UnitType.Spell_Scanner_Sweep, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Spell_Scanner_Sweep, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Spell_Scanner_Sweep, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Spell_Scanner_Sweep, toMap());
    fields.get("requiredTech").set(UnitType.Spell_Scanner_Sweep, TechType.None);
    fields.get("cloakingTech").set(UnitType.Spell_Scanner_Sweep, TechType.None);
    fields.get("abilities").set(UnitType.Spell_Scanner_Sweep, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Spell_Scanner_Sweep, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Spell_Scanner_Sweep, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("maxShields").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("maxEnergy").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("armor").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("mineralPrice").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("gasPrice").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("buildTime").set(UnitType.Spell_Scanner_Sweep, 1);
    fields.get("supplyRequired").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("supplyProvided").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("spaceRequired").set(UnitType.Spell_Scanner_Sweep, 255);
    fields.get("spaceProvided").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("buildScore").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("destroyScore").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("size").set(UnitType.Spell_Scanner_Sweep, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Spell_Scanner_Sweep, 1);
    fields.get("tileHeight").set(UnitType.Spell_Scanner_Sweep, 1);
    fields.get("dimensionLeft").set(UnitType.Spell_Scanner_Sweep, 13);
    fields.get("dimensionUp").set(UnitType.Spell_Scanner_Sweep, 13);
    fields.get("dimensionRight").set(UnitType.Spell_Scanner_Sweep, 13);
    fields.get("dimensionDown").set(UnitType.Spell_Scanner_Sweep, 17);
    fields.get("width").set(UnitType.Spell_Scanner_Sweep, 27);
    fields.get("height").set(UnitType.Spell_Scanner_Sweep, 31);
    fields.get("seekRange").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("sightRange").set(UnitType.Spell_Scanner_Sweep, 320);
    fields.get("groundWeapon").set(UnitType.Spell_Scanner_Sweep, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("airWeapon").set(UnitType.Spell_Scanner_Sweep, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("topSpeed").set(UnitType.Spell_Scanner_Sweep, 0.0);
    fields.get("acceleration").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("haltDistance").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("turnRadius").set(UnitType.Spell_Scanner_Sweep, 0);
    fields.get("canProduce").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("canAttack").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("canMove").set(UnitType.Spell_Scanner_Sweep, true);
    fields.get("flyer").set(UnitType.Spell_Scanner_Sweep, true);
    fields.get("regeneratesHP").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("spellcaster").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("hasPermanentCloak").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("invincible").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("organic").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("mechanical").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("robotic").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("detector").set(UnitType.Spell_Scanner_Sweep, true);
    fields.get("resourceContainer").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("resourceDepot").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("refinery").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("worker").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("requiresPsi").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("requiresCreep").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("burrowable").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("cloakable").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("building").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("addon").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("flyingBuilding").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("neutral").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("hero").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("powerup").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("beacon").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("flagBeacon").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("specialBuilding").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("spell").set(UnitType.Spell_Scanner_Sweep, true);
    fields.get("producesCreep").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("producesLarva").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("mineralField").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("critter").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("canBuildAddon").set(UnitType.Spell_Scanner_Sweep, false);
    fields.get("researchesWhat").set(UnitType.Spell_Scanner_Sweep, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Spell_Scanner_Sweep, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Medic() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Medic, 34);
    fields.get("race").set(UnitType.Terran_Medic, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Medic, new UnitType.WhatBuilds(UnitType.Terran_Barracks, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Medic, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Terran_Medic, toMap(UnitType.Terran_Academy, 1, UnitType.Terran_Barracks, 1));
    fields.get("requiredTech").set(UnitType.Terran_Medic, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Medic, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Terran_Medic,
            new ArrayList(
                Arrays.asList(TechType.Restoration, TechType.Optical_Flare, TechType.Healing)));
    fields
        .get("upgrades")
        .set(
            UnitType.Terran_Medic,
            new ArrayList(
                Arrays.asList(UpgradeType.Terran_Infantry_Armor, UpgradeType.Caduceus_Reactor)));
    fields.get("armorUpgrade").set(UnitType.Terran_Medic, UpgradeType.Terran_Infantry_Armor);
    fields.get("maxHitPoints").set(UnitType.Terran_Medic, 60);
    fields.get("maxShields").set(UnitType.Terran_Medic, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Medic, 200);
    fields.get("armor").set(UnitType.Terran_Medic, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Medic, 50);
    fields.get("gasPrice").set(UnitType.Terran_Medic, 25);
    fields.get("buildTime").set(UnitType.Terran_Medic, 450);
    fields.get("supplyRequired").set(UnitType.Terran_Medic, 2);
    fields.get("supplyProvided").set(UnitType.Terran_Medic, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Medic, 1);
    fields.get("spaceProvided").set(UnitType.Terran_Medic, 0);
    fields.get("buildScore").set(UnitType.Terran_Medic, 125);
    fields.get("destroyScore").set(UnitType.Terran_Medic, 250);
    fields.get("size").set(UnitType.Terran_Medic, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Terran_Medic, 1);
    fields.get("tileHeight").set(UnitType.Terran_Medic, 1);
    fields.get("dimensionLeft").set(UnitType.Terran_Medic, 8);
    fields.get("dimensionUp").set(UnitType.Terran_Medic, 9);
    fields.get("dimensionRight").set(UnitType.Terran_Medic, 8);
    fields.get("dimensionDown").set(UnitType.Terran_Medic, 10);
    fields.get("width").set(UnitType.Terran_Medic, 17);
    fields.get("height").set(UnitType.Terran_Medic, 20);
    fields.get("seekRange").set(UnitType.Terran_Medic, 288);
    fields.get("sightRange").set(UnitType.Terran_Medic, 288);
    fields.get("groundWeapon").set(UnitType.Terran_Medic, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Medic, 0);
    fields.get("airWeapon").set(UnitType.Terran_Medic, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Medic, 0);
    fields.get("topSpeed").set(UnitType.Terran_Medic, 3.125);
    fields.get("acceleration").set(UnitType.Terran_Medic, 1);
    fields.get("haltDistance").set(UnitType.Terran_Medic, 1);
    fields.get("turnRadius").set(UnitType.Terran_Medic, 40);
    fields.get("canProduce").set(UnitType.Terran_Medic, false);
    fields.get("canAttack").set(UnitType.Terran_Medic, false);
    fields.get("canMove").set(UnitType.Terran_Medic, true);
    fields.get("flyer").set(UnitType.Terran_Medic, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Medic, false);
    fields.get("spellcaster").set(UnitType.Terran_Medic, true);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Medic, false);
    fields.get("invincible").set(UnitType.Terran_Medic, false);
    fields.get("organic").set(UnitType.Terran_Medic, true);
    fields.get("mechanical").set(UnitType.Terran_Medic, false);
    fields.get("robotic").set(UnitType.Terran_Medic, false);
    fields.get("detector").set(UnitType.Terran_Medic, false);
    fields.get("resourceContainer").set(UnitType.Terran_Medic, false);
    fields.get("resourceDepot").set(UnitType.Terran_Medic, false);
    fields.get("refinery").set(UnitType.Terran_Medic, false);
    fields.get("worker").set(UnitType.Terran_Medic, false);
    fields.get("requiresPsi").set(UnitType.Terran_Medic, false);
    fields.get("requiresCreep").set(UnitType.Terran_Medic, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Medic, false);
    fields.get("burrowable").set(UnitType.Terran_Medic, false);
    fields.get("cloakable").set(UnitType.Terran_Medic, false);
    fields.get("building").set(UnitType.Terran_Medic, false);
    fields.get("addon").set(UnitType.Terran_Medic, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Medic, false);
    fields.get("neutral").set(UnitType.Terran_Medic, false);
    fields.get("hero").set(UnitType.Terran_Medic, false);
    fields.get("powerup").set(UnitType.Terran_Medic, false);
    fields.get("beacon").set(UnitType.Terran_Medic, false);
    fields.get("flagBeacon").set(UnitType.Terran_Medic, false);
    fields.get("specialBuilding").set(UnitType.Terran_Medic, false);
    fields.get("spell").set(UnitType.Terran_Medic, false);
    fields.get("producesCreep").set(UnitType.Terran_Medic, false);
    fields.get("producesLarva").set(UnitType.Terran_Medic, false);
    fields.get("mineralField").set(UnitType.Terran_Medic, false);
    fields.get("critter").set(UnitType.Terran_Medic, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Medic, false);
    fields.get("researchesWhat").set(UnitType.Terran_Medic, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Medic, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Larva() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Larva, 35);
    fields.get("race").set(UnitType.Zerg_Larva, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Larva, new UnitType.WhatBuilds(UnitType.Zerg_Hatchery, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Zerg_Larva,
            new ArrayList(
                Arrays.asList(
                    UnitType.Zerg_Hydralisk,
                    UnitType.Zerg_Defiler,
                    UnitType.Zerg_Drone,
                    UnitType.Zerg_Mutalisk,
                    UnitType.Zerg_Overlord,
                    UnitType.Zerg_Zergling,
                    UnitType.Zerg_Queen,
                    UnitType.Zerg_Ultralisk,
                    UnitType.Zerg_Scourge)));
    fields.get("requiredUnits").set(UnitType.Zerg_Larva, toMap(UnitType.Zerg_Hatchery, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Larva, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Larva, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Larva, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Zerg_Larva, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Larva, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Larva, 25);
    fields.get("maxShields").set(UnitType.Zerg_Larva, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Larva, 0);
    fields.get("armor").set(UnitType.Zerg_Larva, 10);
    fields.get("mineralPrice").set(UnitType.Zerg_Larva, 1);
    fields.get("gasPrice").set(UnitType.Zerg_Larva, 1);
    fields.get("buildTime").set(UnitType.Zerg_Larva, 1);
    fields.get("supplyRequired").set(UnitType.Zerg_Larva, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Larva, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Larva, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Larva, 0);
    fields.get("buildScore").set(UnitType.Zerg_Larva, 0);
    fields.get("destroyScore").set(UnitType.Zerg_Larva, 10);
    fields.get("size").set(UnitType.Zerg_Larva, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Zerg_Larva, 1);
    fields.get("tileHeight").set(UnitType.Zerg_Larva, 1);
    fields.get("dimensionLeft").set(UnitType.Zerg_Larva, 8);
    fields.get("dimensionUp").set(UnitType.Zerg_Larva, 8);
    fields.get("dimensionRight").set(UnitType.Zerg_Larva, 7);
    fields.get("dimensionDown").set(UnitType.Zerg_Larva, 7);
    fields.get("width").set(UnitType.Zerg_Larva, 16);
    fields.get("height").set(UnitType.Zerg_Larva, 16);
    fields.get("seekRange").set(UnitType.Zerg_Larva, 0);
    fields.get("sightRange").set(UnitType.Zerg_Larva, 128);
    fields.get("groundWeapon").set(UnitType.Zerg_Larva, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Larva, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Larva, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Larva, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Larva, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Larva, 1);
    fields.get("haltDistance").set(UnitType.Zerg_Larva, 1);
    fields.get("turnRadius").set(UnitType.Zerg_Larva, 20);
    fields.get("canProduce").set(UnitType.Zerg_Larva, false);
    fields.get("canAttack").set(UnitType.Zerg_Larva, false);
    fields.get("canMove").set(UnitType.Zerg_Larva, true);
    fields.get("flyer").set(UnitType.Zerg_Larva, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Larva, true);
    fields.get("spellcaster").set(UnitType.Zerg_Larva, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Larva, false);
    fields.get("invincible").set(UnitType.Zerg_Larva, false);
    fields.get("organic").set(UnitType.Zerg_Larva, true);
    fields.get("mechanical").set(UnitType.Zerg_Larva, false);
    fields.get("robotic").set(UnitType.Zerg_Larva, false);
    fields.get("detector").set(UnitType.Zerg_Larva, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Larva, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Larva, false);
    fields.get("refinery").set(UnitType.Zerg_Larva, false);
    fields.get("worker").set(UnitType.Zerg_Larva, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Larva, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Larva, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Larva, false);
    fields.get("burrowable").set(UnitType.Zerg_Larva, false);
    fields.get("cloakable").set(UnitType.Zerg_Larva, false);
    fields.get("building").set(UnitType.Zerg_Larva, false);
    fields.get("addon").set(UnitType.Zerg_Larva, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Larva, false);
    fields.get("neutral").set(UnitType.Zerg_Larva, false);
    fields.get("hero").set(UnitType.Zerg_Larva, false);
    fields.get("powerup").set(UnitType.Zerg_Larva, false);
    fields.get("beacon").set(UnitType.Zerg_Larva, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Larva, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Larva, false);
    fields.get("spell").set(UnitType.Zerg_Larva, false);
    fields.get("producesCreep").set(UnitType.Zerg_Larva, false);
    fields.get("producesLarva").set(UnitType.Zerg_Larva, false);
    fields.get("mineralField").set(UnitType.Zerg_Larva, false);
    fields.get("critter").set(UnitType.Zerg_Larva, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Larva, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Larva, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Larva, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Egg() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Egg, 36);
    fields.get("race").set(UnitType.Zerg_Egg, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Egg, new UnitType.WhatBuilds(UnitType.Zerg_Larva, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Egg, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Zerg_Egg, toMap(UnitType.Zerg_Larva, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Egg, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Egg, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Egg, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Zerg_Egg, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Egg, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Egg, 200);
    fields.get("maxShields").set(UnitType.Zerg_Egg, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Egg, 0);
    fields.get("armor").set(UnitType.Zerg_Egg, 10);
    fields.get("mineralPrice").set(UnitType.Zerg_Egg, 1);
    fields.get("gasPrice").set(UnitType.Zerg_Egg, 1);
    fields.get("buildTime").set(UnitType.Zerg_Egg, 1);
    fields.get("supplyRequired").set(UnitType.Zerg_Egg, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Egg, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Egg, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Egg, 0);
    fields.get("buildScore").set(UnitType.Zerg_Egg, 0);
    fields.get("destroyScore").set(UnitType.Zerg_Egg, 25);
    fields.get("size").set(UnitType.Zerg_Egg, UnitSizeType.Medium);
    fields.get("tileWidth").set(UnitType.Zerg_Egg, 1);
    fields.get("tileHeight").set(UnitType.Zerg_Egg, 1);
    fields.get("dimensionLeft").set(UnitType.Zerg_Egg, 16);
    fields.get("dimensionUp").set(UnitType.Zerg_Egg, 16);
    fields.get("dimensionRight").set(UnitType.Zerg_Egg, 15);
    fields.get("dimensionDown").set(UnitType.Zerg_Egg, 15);
    fields.get("width").set(UnitType.Zerg_Egg, 32);
    fields.get("height").set(UnitType.Zerg_Egg, 32);
    fields.get("seekRange").set(UnitType.Zerg_Egg, 0);
    fields.get("sightRange").set(UnitType.Zerg_Egg, 128);
    fields.get("groundWeapon").set(UnitType.Zerg_Egg, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Egg, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Egg, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Egg, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Egg, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Egg, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Egg, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Egg, 0);
    fields.get("canProduce").set(UnitType.Zerg_Egg, false);
    fields.get("canAttack").set(UnitType.Zerg_Egg, false);
    fields.get("canMove").set(UnitType.Zerg_Egg, false);
    fields.get("flyer").set(UnitType.Zerg_Egg, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Egg, false);
    fields.get("spellcaster").set(UnitType.Zerg_Egg, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Egg, false);
    fields.get("invincible").set(UnitType.Zerg_Egg, false);
    fields.get("organic").set(UnitType.Zerg_Egg, true);
    fields.get("mechanical").set(UnitType.Zerg_Egg, false);
    fields.get("robotic").set(UnitType.Zerg_Egg, false);
    fields.get("detector").set(UnitType.Zerg_Egg, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Egg, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Egg, false);
    fields.get("refinery").set(UnitType.Zerg_Egg, false);
    fields.get("worker").set(UnitType.Zerg_Egg, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Egg, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Egg, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Egg, false);
    fields.get("burrowable").set(UnitType.Zerg_Egg, false);
    fields.get("cloakable").set(UnitType.Zerg_Egg, false);
    fields.get("building").set(UnitType.Zerg_Egg, false);
    fields.get("addon").set(UnitType.Zerg_Egg, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Egg, false);
    fields.get("neutral").set(UnitType.Zerg_Egg, false);
    fields.get("hero").set(UnitType.Zerg_Egg, false);
    fields.get("powerup").set(UnitType.Zerg_Egg, false);
    fields.get("beacon").set(UnitType.Zerg_Egg, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Egg, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Egg, false);
    fields.get("spell").set(UnitType.Zerg_Egg, false);
    fields.get("producesCreep").set(UnitType.Zerg_Egg, false);
    fields.get("producesLarva").set(UnitType.Zerg_Egg, false);
    fields.get("mineralField").set(UnitType.Zerg_Egg, false);
    fields.get("critter").set(UnitType.Zerg_Egg, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Egg, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Egg, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Egg, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Zergling() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Zergling, 37);
    fields.get("race").set(UnitType.Zerg_Zergling, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Zergling, new UnitType.WhatBuilds(UnitType.Zerg_Larva, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Zergling, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Zerg_Zergling, toMap(UnitType.Zerg_Larva, 1, UnitType.Zerg_Spawning_Pool, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Zergling, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Zergling, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Zerg_Zergling, new ArrayList(Arrays.asList(TechType.Burrowing)));
    fields
        .get("upgrades")
        .set(
            UnitType.Zerg_Zergling,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Metabolic_Boost,
                    UpgradeType.Zerg_Carapace,
                    UpgradeType.Zerg_Melee_Attacks,
                    UpgradeType.Adrenal_Glands)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Zergling, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Zergling, 35);
    fields.get("maxShields").set(UnitType.Zerg_Zergling, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Zergling, 0);
    fields.get("armor").set(UnitType.Zerg_Zergling, 0);
    fields.get("mineralPrice").set(UnitType.Zerg_Zergling, 50);
    fields.get("gasPrice").set(UnitType.Zerg_Zergling, 0);
    fields.get("buildTime").set(UnitType.Zerg_Zergling, 420);
    fields.get("supplyRequired").set(UnitType.Zerg_Zergling, 1);
    fields.get("supplyProvided").set(UnitType.Zerg_Zergling, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Zergling, 1);
    fields.get("spaceProvided").set(UnitType.Zerg_Zergling, 0);
    fields.get("buildScore").set(UnitType.Zerg_Zergling, 25);
    fields.get("destroyScore").set(UnitType.Zerg_Zergling, 50);
    fields.get("size").set(UnitType.Zerg_Zergling, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Zerg_Zergling, 1);
    fields.get("tileHeight").set(UnitType.Zerg_Zergling, 1);
    fields.get("dimensionLeft").set(UnitType.Zerg_Zergling, 8);
    fields.get("dimensionUp").set(UnitType.Zerg_Zergling, 4);
    fields.get("dimensionRight").set(UnitType.Zerg_Zergling, 7);
    fields.get("dimensionDown").set(UnitType.Zerg_Zergling, 11);
    fields.get("width").set(UnitType.Zerg_Zergling, 16);
    fields.get("height").set(UnitType.Zerg_Zergling, 16);
    fields.get("seekRange").set(UnitType.Zerg_Zergling, 96);
    fields.get("sightRange").set(UnitType.Zerg_Zergling, 160);
    fields.get("groundWeapon").set(UnitType.Zerg_Zergling, WeaponType.Claws);
    fields.get("maxGroundHits").set(UnitType.Zerg_Zergling, 1);
    fields.get("airWeapon").set(UnitType.Zerg_Zergling, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Zergling, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Zergling, 4.2890625);
    fields.get("acceleration").set(UnitType.Zerg_Zergling, 1);
    fields.get("haltDistance").set(UnitType.Zerg_Zergling, 1);
    fields.get("turnRadius").set(UnitType.Zerg_Zergling, 27);
    fields.get("canProduce").set(UnitType.Zerg_Zergling, false);
    fields.get("canAttack").set(UnitType.Zerg_Zergling, true);
    fields.get("canMove").set(UnitType.Zerg_Zergling, true);
    fields.get("flyer").set(UnitType.Zerg_Zergling, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Zergling, true);
    fields.get("spellcaster").set(UnitType.Zerg_Zergling, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Zergling, false);
    fields.get("invincible").set(UnitType.Zerg_Zergling, false);
    fields.get("organic").set(UnitType.Zerg_Zergling, true);
    fields.get("mechanical").set(UnitType.Zerg_Zergling, false);
    fields.get("robotic").set(UnitType.Zerg_Zergling, false);
    fields.get("detector").set(UnitType.Zerg_Zergling, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Zergling, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Zergling, false);
    fields.get("refinery").set(UnitType.Zerg_Zergling, false);
    fields.get("worker").set(UnitType.Zerg_Zergling, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Zergling, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Zergling, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Zergling, true);
    fields.get("burrowable").set(UnitType.Zerg_Zergling, true);
    fields.get("cloakable").set(UnitType.Zerg_Zergling, false);
    fields.get("building").set(UnitType.Zerg_Zergling, false);
    fields.get("addon").set(UnitType.Zerg_Zergling, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Zergling, false);
    fields.get("neutral").set(UnitType.Zerg_Zergling, false);
    fields.get("hero").set(UnitType.Zerg_Zergling, false);
    fields.get("powerup").set(UnitType.Zerg_Zergling, false);
    fields.get("beacon").set(UnitType.Zerg_Zergling, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Zergling, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Zergling, false);
    fields.get("spell").set(UnitType.Zerg_Zergling, false);
    fields.get("producesCreep").set(UnitType.Zerg_Zergling, false);
    fields.get("producesLarva").set(UnitType.Zerg_Zergling, false);
    fields.get("mineralField").set(UnitType.Zerg_Zergling, false);
    fields.get("critter").set(UnitType.Zerg_Zergling, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Zergling, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Zergling, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Zergling, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Hydralisk() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Hydralisk, 38);
    fields.get("race").set(UnitType.Zerg_Hydralisk, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Hydralisk, new UnitType.WhatBuilds(UnitType.Zerg_Larva, 1));
    fields
        .get("buildsWhat")
        .set(UnitType.Zerg_Hydralisk, new ArrayList(Arrays.asList(UnitType.Zerg_Lurker)));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Zerg_Hydralisk, toMap(UnitType.Zerg_Larva, 1, UnitType.Zerg_Hydralisk_Den, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Hydralisk, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Hydralisk, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Zerg_Hydralisk, new ArrayList(Arrays.asList(TechType.Burrowing)));
    fields
        .get("upgrades")
        .set(
            UnitType.Zerg_Hydralisk,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Zerg_Missile_Attacks,
                    UpgradeType.Zerg_Carapace,
                    UpgradeType.Muscular_Augments,
                    UpgradeType.Grooved_Spines)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Hydralisk, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Hydralisk, 80);
    fields.get("maxShields").set(UnitType.Zerg_Hydralisk, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Hydralisk, 0);
    fields.get("armor").set(UnitType.Zerg_Hydralisk, 0);
    fields.get("mineralPrice").set(UnitType.Zerg_Hydralisk, 75);
    fields.get("gasPrice").set(UnitType.Zerg_Hydralisk, 25);
    fields.get("buildTime").set(UnitType.Zerg_Hydralisk, 420);
    fields.get("supplyRequired").set(UnitType.Zerg_Hydralisk, 2);
    fields.get("supplyProvided").set(UnitType.Zerg_Hydralisk, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Hydralisk, 2);
    fields.get("spaceProvided").set(UnitType.Zerg_Hydralisk, 0);
    fields.get("buildScore").set(UnitType.Zerg_Hydralisk, 125);
    fields.get("destroyScore").set(UnitType.Zerg_Hydralisk, 350);
    fields.get("size").set(UnitType.Zerg_Hydralisk, UnitSizeType.Medium);
    fields.get("tileWidth").set(UnitType.Zerg_Hydralisk, 1);
    fields.get("tileHeight").set(UnitType.Zerg_Hydralisk, 1);
    fields.get("dimensionLeft").set(UnitType.Zerg_Hydralisk, 10);
    fields.get("dimensionUp").set(UnitType.Zerg_Hydralisk, 10);
    fields.get("dimensionRight").set(UnitType.Zerg_Hydralisk, 10);
    fields.get("dimensionDown").set(UnitType.Zerg_Hydralisk, 12);
    fields.get("width").set(UnitType.Zerg_Hydralisk, 21);
    fields.get("height").set(UnitType.Zerg_Hydralisk, 23);
    fields.get("seekRange").set(UnitType.Zerg_Hydralisk, 0);
    fields.get("sightRange").set(UnitType.Zerg_Hydralisk, 192);
    fields.get("groundWeapon").set(UnitType.Zerg_Hydralisk, WeaponType.Needle_Spines);
    fields.get("maxGroundHits").set(UnitType.Zerg_Hydralisk, 1);
    fields.get("airWeapon").set(UnitType.Zerg_Hydralisk, WeaponType.Needle_Spines);
    fields.get("maxAirHits").set(UnitType.Zerg_Hydralisk, 1);
    fields.get("topSpeed").set(UnitType.Zerg_Hydralisk, 2.859375);
    fields.get("acceleration").set(UnitType.Zerg_Hydralisk, 1);
    fields.get("haltDistance").set(UnitType.Zerg_Hydralisk, 1);
    fields.get("turnRadius").set(UnitType.Zerg_Hydralisk, 27);
    fields.get("canProduce").set(UnitType.Zerg_Hydralisk, false);
    fields.get("canAttack").set(UnitType.Zerg_Hydralisk, true);
    fields.get("canMove").set(UnitType.Zerg_Hydralisk, true);
    fields.get("flyer").set(UnitType.Zerg_Hydralisk, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Hydralisk, true);
    fields.get("spellcaster").set(UnitType.Zerg_Hydralisk, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Hydralisk, false);
    fields.get("invincible").set(UnitType.Zerg_Hydralisk, false);
    fields.get("organic").set(UnitType.Zerg_Hydralisk, true);
    fields.get("mechanical").set(UnitType.Zerg_Hydralisk, false);
    fields.get("robotic").set(UnitType.Zerg_Hydralisk, false);
    fields.get("detector").set(UnitType.Zerg_Hydralisk, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Hydralisk, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Hydralisk, false);
    fields.get("refinery").set(UnitType.Zerg_Hydralisk, false);
    fields.get("worker").set(UnitType.Zerg_Hydralisk, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Hydralisk, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Hydralisk, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Hydralisk, false);
    fields.get("burrowable").set(UnitType.Zerg_Hydralisk, true);
    fields.get("cloakable").set(UnitType.Zerg_Hydralisk, false);
    fields.get("building").set(UnitType.Zerg_Hydralisk, false);
    fields.get("addon").set(UnitType.Zerg_Hydralisk, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Hydralisk, false);
    fields.get("neutral").set(UnitType.Zerg_Hydralisk, false);
    fields.get("hero").set(UnitType.Zerg_Hydralisk, false);
    fields.get("powerup").set(UnitType.Zerg_Hydralisk, false);
    fields.get("beacon").set(UnitType.Zerg_Hydralisk, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Hydralisk, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Hydralisk, false);
    fields.get("spell").set(UnitType.Zerg_Hydralisk, false);
    fields.get("producesCreep").set(UnitType.Zerg_Hydralisk, false);
    fields.get("producesLarva").set(UnitType.Zerg_Hydralisk, false);
    fields.get("mineralField").set(UnitType.Zerg_Hydralisk, false);
    fields.get("critter").set(UnitType.Zerg_Hydralisk, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Hydralisk, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Hydralisk, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Hydralisk, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Ultralisk() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Ultralisk, 39);
    fields.get("race").set(UnitType.Zerg_Ultralisk, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Ultralisk, new UnitType.WhatBuilds(UnitType.Zerg_Larva, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Ultralisk, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Zerg_Ultralisk,
            toMap(UnitType.Zerg_Ultralisk_Cavern, 1, UnitType.Zerg_Larva, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Ultralisk, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Ultralisk, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Ultralisk, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Zerg_Ultralisk,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Zerg_Carapace,
                    UpgradeType.Zerg_Melee_Attacks,
                    UpgradeType.Chitinous_Plating,
                    UpgradeType.Anabolic_Synthesis)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Ultralisk, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Ultralisk, 400);
    fields.get("maxShields").set(UnitType.Zerg_Ultralisk, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Ultralisk, 0);
    fields.get("armor").set(UnitType.Zerg_Ultralisk, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Ultralisk, 200);
    fields.get("gasPrice").set(UnitType.Zerg_Ultralisk, 200);
    fields.get("buildTime").set(UnitType.Zerg_Ultralisk, 900);
    fields.get("supplyRequired").set(UnitType.Zerg_Ultralisk, 8);
    fields.get("supplyProvided").set(UnitType.Zerg_Ultralisk, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Ultralisk, 4);
    fields.get("spaceProvided").set(UnitType.Zerg_Ultralisk, 0);
    fields.get("buildScore").set(UnitType.Zerg_Ultralisk, 650);
    fields.get("destroyScore").set(UnitType.Zerg_Ultralisk, 1300);
    fields.get("size").set(UnitType.Zerg_Ultralisk, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Ultralisk, 2);
    fields.get("tileHeight").set(UnitType.Zerg_Ultralisk, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Ultralisk, 19);
    fields.get("dimensionUp").set(UnitType.Zerg_Ultralisk, 16);
    fields.get("dimensionRight").set(UnitType.Zerg_Ultralisk, 18);
    fields.get("dimensionDown").set(UnitType.Zerg_Ultralisk, 15);
    fields.get("width").set(UnitType.Zerg_Ultralisk, 38);
    fields.get("height").set(UnitType.Zerg_Ultralisk, 32);
    fields.get("seekRange").set(UnitType.Zerg_Ultralisk, 96);
    fields.get("sightRange").set(UnitType.Zerg_Ultralisk, 224);
    fields.get("groundWeapon").set(UnitType.Zerg_Ultralisk, WeaponType.Kaiser_Blades);
    fields.get("maxGroundHits").set(UnitType.Zerg_Ultralisk, 1);
    fields.get("airWeapon").set(UnitType.Zerg_Ultralisk, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Ultralisk, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Ultralisk, 4.0);
    fields.get("acceleration").set(UnitType.Zerg_Ultralisk, 1);
    fields.get("haltDistance").set(UnitType.Zerg_Ultralisk, 1);
    fields.get("turnRadius").set(UnitType.Zerg_Ultralisk, 40);
    fields.get("canProduce").set(UnitType.Zerg_Ultralisk, false);
    fields.get("canAttack").set(UnitType.Zerg_Ultralisk, true);
    fields.get("canMove").set(UnitType.Zerg_Ultralisk, true);
    fields.get("flyer").set(UnitType.Zerg_Ultralisk, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Ultralisk, true);
    fields.get("spellcaster").set(UnitType.Zerg_Ultralisk, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Ultralisk, false);
    fields.get("invincible").set(UnitType.Zerg_Ultralisk, false);
    fields.get("organic").set(UnitType.Zerg_Ultralisk, true);
    fields.get("mechanical").set(UnitType.Zerg_Ultralisk, false);
    fields.get("robotic").set(UnitType.Zerg_Ultralisk, false);
    fields.get("detector").set(UnitType.Zerg_Ultralisk, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Ultralisk, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Ultralisk, false);
    fields.get("refinery").set(UnitType.Zerg_Ultralisk, false);
    fields.get("worker").set(UnitType.Zerg_Ultralisk, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Ultralisk, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Ultralisk, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Ultralisk, false);
    fields.get("burrowable").set(UnitType.Zerg_Ultralisk, false);
    fields.get("cloakable").set(UnitType.Zerg_Ultralisk, false);
    fields.get("building").set(UnitType.Zerg_Ultralisk, false);
    fields.get("addon").set(UnitType.Zerg_Ultralisk, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Ultralisk, false);
    fields.get("neutral").set(UnitType.Zerg_Ultralisk, false);
    fields.get("hero").set(UnitType.Zerg_Ultralisk, false);
    fields.get("powerup").set(UnitType.Zerg_Ultralisk, false);
    fields.get("beacon").set(UnitType.Zerg_Ultralisk, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Ultralisk, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Ultralisk, false);
    fields.get("spell").set(UnitType.Zerg_Ultralisk, false);
    fields.get("producesCreep").set(UnitType.Zerg_Ultralisk, false);
    fields.get("producesLarva").set(UnitType.Zerg_Ultralisk, false);
    fields.get("mineralField").set(UnitType.Zerg_Ultralisk, false);
    fields.get("critter").set(UnitType.Zerg_Ultralisk, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Ultralisk, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Ultralisk, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Ultralisk, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Broodling() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Broodling, 40);
    fields.get("race").set(UnitType.Zerg_Broodling, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Broodling, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Zerg_Broodling, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Zerg_Broodling, toMap());
    fields.get("requiredTech").set(UnitType.Zerg_Broodling, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Broodling, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Broodling, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Zerg_Broodling,
            new ArrayList(
                Arrays.asList(UpgradeType.Zerg_Carapace, UpgradeType.Zerg_Melee_Attacks)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Broodling, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Broodling, 30);
    fields.get("maxShields").set(UnitType.Zerg_Broodling, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Broodling, 0);
    fields.get("armor").set(UnitType.Zerg_Broodling, 0);
    fields.get("mineralPrice").set(UnitType.Zerg_Broodling, 1);
    fields.get("gasPrice").set(UnitType.Zerg_Broodling, 1);
    fields.get("buildTime").set(UnitType.Zerg_Broodling, 1);
    fields.get("supplyRequired").set(UnitType.Zerg_Broodling, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Broodling, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Broodling, 1);
    fields.get("spaceProvided").set(UnitType.Zerg_Broodling, 0);
    fields.get("buildScore").set(UnitType.Zerg_Broodling, 0);
    fields.get("destroyScore").set(UnitType.Zerg_Broodling, 25);
    fields.get("size").set(UnitType.Zerg_Broodling, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Zerg_Broodling, 1);
    fields.get("tileHeight").set(UnitType.Zerg_Broodling, 1);
    fields.get("dimensionLeft").set(UnitType.Zerg_Broodling, 9);
    fields.get("dimensionUp").set(UnitType.Zerg_Broodling, 9);
    fields.get("dimensionRight").set(UnitType.Zerg_Broodling, 9);
    fields.get("dimensionDown").set(UnitType.Zerg_Broodling, 9);
    fields.get("width").set(UnitType.Zerg_Broodling, 19);
    fields.get("height").set(UnitType.Zerg_Broodling, 19);
    fields.get("seekRange").set(UnitType.Zerg_Broodling, 96);
    fields.get("sightRange").set(UnitType.Zerg_Broodling, 160);
    fields.get("groundWeapon").set(UnitType.Zerg_Broodling, WeaponType.Toxic_Spores);
    fields.get("maxGroundHits").set(UnitType.Zerg_Broodling, 1);
    fields.get("airWeapon").set(UnitType.Zerg_Broodling, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Broodling, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Broodling, 4.6875);
    fields.get("acceleration").set(UnitType.Zerg_Broodling, 1);
    fields.get("haltDistance").set(UnitType.Zerg_Broodling, 1);
    fields.get("turnRadius").set(UnitType.Zerg_Broodling, 27);
    fields.get("canProduce").set(UnitType.Zerg_Broodling, false);
    fields.get("canAttack").set(UnitType.Zerg_Broodling, true);
    fields.get("canMove").set(UnitType.Zerg_Broodling, true);
    fields.get("flyer").set(UnitType.Zerg_Broodling, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Broodling, true);
    fields.get("spellcaster").set(UnitType.Zerg_Broodling, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Broodling, false);
    fields.get("invincible").set(UnitType.Zerg_Broodling, false);
    fields.get("organic").set(UnitType.Zerg_Broodling, true);
    fields.get("mechanical").set(UnitType.Zerg_Broodling, false);
    fields.get("robotic").set(UnitType.Zerg_Broodling, false);
    fields.get("detector").set(UnitType.Zerg_Broodling, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Broodling, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Broodling, false);
    fields.get("refinery").set(UnitType.Zerg_Broodling, false);
    fields.get("worker").set(UnitType.Zerg_Broodling, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Broodling, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Broodling, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Broodling, false);
    fields.get("burrowable").set(UnitType.Zerg_Broodling, false);
    fields.get("cloakable").set(UnitType.Zerg_Broodling, false);
    fields.get("building").set(UnitType.Zerg_Broodling, false);
    fields.get("addon").set(UnitType.Zerg_Broodling, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Broodling, false);
    fields.get("neutral").set(UnitType.Zerg_Broodling, false);
    fields.get("hero").set(UnitType.Zerg_Broodling, false);
    fields.get("powerup").set(UnitType.Zerg_Broodling, false);
    fields.get("beacon").set(UnitType.Zerg_Broodling, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Broodling, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Broodling, false);
    fields.get("spell").set(UnitType.Zerg_Broodling, false);
    fields.get("producesCreep").set(UnitType.Zerg_Broodling, false);
    fields.get("producesLarva").set(UnitType.Zerg_Broodling, false);
    fields.get("mineralField").set(UnitType.Zerg_Broodling, false);
    fields.get("critter").set(UnitType.Zerg_Broodling, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Broodling, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Broodling, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Broodling, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Drone() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Drone, 41);
    fields.get("race").set(UnitType.Zerg_Drone, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Drone, new UnitType.WhatBuilds(UnitType.Zerg_Larva, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Zerg_Drone,
            new ArrayList(
                Arrays.asList(
                    UnitType.Zerg_Hydralisk_Den,
                    UnitType.Zerg_Creep_Colony,
                    UnitType.Zerg_Defiler_Mound,
                    UnitType.Zerg_Hatchery,
                    UnitType.Zerg_Evolution_Chamber,
                    UnitType.Zerg_Extractor,
                    UnitType.Zerg_Spawning_Pool,
                    UnitType.Zerg_Nydus_Canal,
                    UnitType.Zerg_Queens_Nest,
                    UnitType.Zerg_Spire,
                    UnitType.Zerg_Ultralisk_Cavern)));
    fields.get("requiredUnits").set(UnitType.Zerg_Drone, toMap(UnitType.Zerg_Larva, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Drone, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Drone, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Zerg_Drone, new ArrayList(Arrays.asList(TechType.Burrowing)));
    fields
        .get("upgrades")
        .set(UnitType.Zerg_Drone, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Drone, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Drone, 40);
    fields.get("maxShields").set(UnitType.Zerg_Drone, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Drone, 0);
    fields.get("armor").set(UnitType.Zerg_Drone, 0);
    fields.get("mineralPrice").set(UnitType.Zerg_Drone, 50);
    fields.get("gasPrice").set(UnitType.Zerg_Drone, 0);
    fields.get("buildTime").set(UnitType.Zerg_Drone, 300);
    fields.get("supplyRequired").set(UnitType.Zerg_Drone, 2);
    fields.get("supplyProvided").set(UnitType.Zerg_Drone, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Drone, 1);
    fields.get("spaceProvided").set(UnitType.Zerg_Drone, 0);
    fields.get("buildScore").set(UnitType.Zerg_Drone, 50);
    fields.get("destroyScore").set(UnitType.Zerg_Drone, 100);
    fields.get("size").set(UnitType.Zerg_Drone, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Zerg_Drone, 1);
    fields.get("tileHeight").set(UnitType.Zerg_Drone, 1);
    fields.get("dimensionLeft").set(UnitType.Zerg_Drone, 11);
    fields.get("dimensionUp").set(UnitType.Zerg_Drone, 11);
    fields.get("dimensionRight").set(UnitType.Zerg_Drone, 11);
    fields.get("dimensionDown").set(UnitType.Zerg_Drone, 11);
    fields.get("width").set(UnitType.Zerg_Drone, 23);
    fields.get("height").set(UnitType.Zerg_Drone, 23);
    fields.get("seekRange").set(UnitType.Zerg_Drone, 0);
    fields.get("sightRange").set(UnitType.Zerg_Drone, 224);
    fields.get("groundWeapon").set(UnitType.Zerg_Drone, WeaponType.Spines);
    fields.get("maxGroundHits").set(UnitType.Zerg_Drone, 1);
    fields.get("airWeapon").set(UnitType.Zerg_Drone, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Drone, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Drone, 3.84375);
    fields.get("acceleration").set(UnitType.Zerg_Drone, 67);
    fields.get("haltDistance").set(UnitType.Zerg_Drone, 12227);
    fields.get("turnRadius").set(UnitType.Zerg_Drone, 40);
    fields.get("canProduce").set(UnitType.Zerg_Drone, false);
    fields.get("canAttack").set(UnitType.Zerg_Drone, true);
    fields.get("canMove").set(UnitType.Zerg_Drone, true);
    fields.get("flyer").set(UnitType.Zerg_Drone, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Drone, true);
    fields.get("spellcaster").set(UnitType.Zerg_Drone, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Drone, false);
    fields.get("invincible").set(UnitType.Zerg_Drone, false);
    fields.get("organic").set(UnitType.Zerg_Drone, true);
    fields.get("mechanical").set(UnitType.Zerg_Drone, false);
    fields.get("robotic").set(UnitType.Zerg_Drone, false);
    fields.get("detector").set(UnitType.Zerg_Drone, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Drone, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Drone, false);
    fields.get("refinery").set(UnitType.Zerg_Drone, false);
    fields.get("worker").set(UnitType.Zerg_Drone, true);
    fields.get("requiresPsi").set(UnitType.Zerg_Drone, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Drone, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Drone, false);
    fields.get("burrowable").set(UnitType.Zerg_Drone, true);
    fields.get("cloakable").set(UnitType.Zerg_Drone, false);
    fields.get("building").set(UnitType.Zerg_Drone, false);
    fields.get("addon").set(UnitType.Zerg_Drone, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Drone, false);
    fields.get("neutral").set(UnitType.Zerg_Drone, false);
    fields.get("hero").set(UnitType.Zerg_Drone, false);
    fields.get("powerup").set(UnitType.Zerg_Drone, false);
    fields.get("beacon").set(UnitType.Zerg_Drone, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Drone, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Drone, false);
    fields.get("spell").set(UnitType.Zerg_Drone, false);
    fields.get("producesCreep").set(UnitType.Zerg_Drone, false);
    fields.get("producesLarva").set(UnitType.Zerg_Drone, false);
    fields.get("mineralField").set(UnitType.Zerg_Drone, false);
    fields.get("critter").set(UnitType.Zerg_Drone, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Drone, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Drone, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Drone, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Overlord() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Overlord, 42);
    fields.get("race").set(UnitType.Zerg_Overlord, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Overlord, new UnitType.WhatBuilds(UnitType.Zerg_Larva, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Overlord, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Zerg_Overlord, toMap(UnitType.Zerg_Larva, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Overlord, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Overlord, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Overlord, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Zerg_Overlord,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Zerg_Flyer_Carapace,
                    UpgradeType.Ventral_Sacs,
                    UpgradeType.Antennae,
                    UpgradeType.Pneumatized_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Overlord, UpgradeType.Zerg_Flyer_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Overlord, 200);
    fields.get("maxShields").set(UnitType.Zerg_Overlord, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Overlord, 0);
    fields.get("armor").set(UnitType.Zerg_Overlord, 0);
    fields.get("mineralPrice").set(UnitType.Zerg_Overlord, 100);
    fields.get("gasPrice").set(UnitType.Zerg_Overlord, 0);
    fields.get("buildTime").set(UnitType.Zerg_Overlord, 600);
    fields.get("supplyRequired").set(UnitType.Zerg_Overlord, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Overlord, 16);
    fields.get("spaceRequired").set(UnitType.Zerg_Overlord, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Overlord, 8);
    fields.get("buildScore").set(UnitType.Zerg_Overlord, 100);
    fields.get("destroyScore").set(UnitType.Zerg_Overlord, 200);
    fields.get("size").set(UnitType.Zerg_Overlord, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Overlord, 2);
    fields.get("tileHeight").set(UnitType.Zerg_Overlord, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Overlord, 25);
    fields.get("dimensionUp").set(UnitType.Zerg_Overlord, 25);
    fields.get("dimensionRight").set(UnitType.Zerg_Overlord, 24);
    fields.get("dimensionDown").set(UnitType.Zerg_Overlord, 24);
    fields.get("width").set(UnitType.Zerg_Overlord, 50);
    fields.get("height").set(UnitType.Zerg_Overlord, 50);
    fields.get("seekRange").set(UnitType.Zerg_Overlord, 0);
    fields.get("sightRange").set(UnitType.Zerg_Overlord, 288);
    fields.get("groundWeapon").set(UnitType.Zerg_Overlord, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Overlord, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Overlord, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Overlord, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Overlord, 0.6484375);
    fields.get("acceleration").set(UnitType.Zerg_Overlord, 27);
    fields.get("haltDistance").set(UnitType.Zerg_Overlord, 840);
    fields.get("turnRadius").set(UnitType.Zerg_Overlord, 20);
    fields.get("canProduce").set(UnitType.Zerg_Overlord, false);
    fields.get("canAttack").set(UnitType.Zerg_Overlord, false);
    fields.get("canMove").set(UnitType.Zerg_Overlord, true);
    fields.get("flyer").set(UnitType.Zerg_Overlord, true);
    fields.get("regeneratesHP").set(UnitType.Zerg_Overlord, true);
    fields.get("spellcaster").set(UnitType.Zerg_Overlord, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Overlord, false);
    fields.get("invincible").set(UnitType.Zerg_Overlord, false);
    fields.get("organic").set(UnitType.Zerg_Overlord, true);
    fields.get("mechanical").set(UnitType.Zerg_Overlord, false);
    fields.get("robotic").set(UnitType.Zerg_Overlord, false);
    fields.get("detector").set(UnitType.Zerg_Overlord, true);
    fields.get("resourceContainer").set(UnitType.Zerg_Overlord, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Overlord, false);
    fields.get("refinery").set(UnitType.Zerg_Overlord, false);
    fields.get("worker").set(UnitType.Zerg_Overlord, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Overlord, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Overlord, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Overlord, false);
    fields.get("burrowable").set(UnitType.Zerg_Overlord, false);
    fields.get("cloakable").set(UnitType.Zerg_Overlord, false);
    fields.get("building").set(UnitType.Zerg_Overlord, false);
    fields.get("addon").set(UnitType.Zerg_Overlord, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Overlord, false);
    fields.get("neutral").set(UnitType.Zerg_Overlord, false);
    fields.get("hero").set(UnitType.Zerg_Overlord, false);
    fields.get("powerup").set(UnitType.Zerg_Overlord, false);
    fields.get("beacon").set(UnitType.Zerg_Overlord, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Overlord, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Overlord, false);
    fields.get("spell").set(UnitType.Zerg_Overlord, false);
    fields.get("producesCreep").set(UnitType.Zerg_Overlord, false);
    fields.get("producesLarva").set(UnitType.Zerg_Overlord, false);
    fields.get("mineralField").set(UnitType.Zerg_Overlord, false);
    fields.get("critter").set(UnitType.Zerg_Overlord, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Overlord, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Overlord, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Overlord, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Mutalisk() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Mutalisk, 43);
    fields.get("race").set(UnitType.Zerg_Mutalisk, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Mutalisk, new UnitType.WhatBuilds(UnitType.Zerg_Larva, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Zerg_Mutalisk,
            new ArrayList(Arrays.asList(UnitType.Zerg_Guardian, UnitType.Zerg_Devourer)));
    fields
        .get("requiredUnits")
        .set(UnitType.Zerg_Mutalisk, toMap(UnitType.Zerg_Larva, 1, UnitType.Zerg_Spire, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Mutalisk, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Mutalisk, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Mutalisk, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Zerg_Mutalisk,
            new ArrayList(
                Arrays.asList(UpgradeType.Zerg_Flyer_Attacks, UpgradeType.Zerg_Flyer_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Mutalisk, UpgradeType.Zerg_Flyer_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Mutalisk, 120);
    fields.get("maxShields").set(UnitType.Zerg_Mutalisk, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Mutalisk, 0);
    fields.get("armor").set(UnitType.Zerg_Mutalisk, 0);
    fields.get("mineralPrice").set(UnitType.Zerg_Mutalisk, 100);
    fields.get("gasPrice").set(UnitType.Zerg_Mutalisk, 100);
    fields.get("buildTime").set(UnitType.Zerg_Mutalisk, 600);
    fields.get("supplyRequired").set(UnitType.Zerg_Mutalisk, 4);
    fields.get("supplyProvided").set(UnitType.Zerg_Mutalisk, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Mutalisk, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Mutalisk, 0);
    fields.get("buildScore").set(UnitType.Zerg_Mutalisk, 300);
    fields.get("destroyScore").set(UnitType.Zerg_Mutalisk, 600);
    fields.get("size").set(UnitType.Zerg_Mutalisk, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Zerg_Mutalisk, 2);
    fields.get("tileHeight").set(UnitType.Zerg_Mutalisk, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Mutalisk, 22);
    fields.get("dimensionUp").set(UnitType.Zerg_Mutalisk, 22);
    fields.get("dimensionRight").set(UnitType.Zerg_Mutalisk, 21);
    fields.get("dimensionDown").set(UnitType.Zerg_Mutalisk, 21);
    fields.get("width").set(UnitType.Zerg_Mutalisk, 44);
    fields.get("height").set(UnitType.Zerg_Mutalisk, 44);
    fields.get("seekRange").set(UnitType.Zerg_Mutalisk, 96);
    fields.get("sightRange").set(UnitType.Zerg_Mutalisk, 224);
    fields.get("groundWeapon").set(UnitType.Zerg_Mutalisk, WeaponType.Glave_Wurm);
    fields.get("maxGroundHits").set(UnitType.Zerg_Mutalisk, 1);
    fields.get("airWeapon").set(UnitType.Zerg_Mutalisk, WeaponType.Glave_Wurm);
    fields.get("maxAirHits").set(UnitType.Zerg_Mutalisk, 1);
    fields.get("topSpeed").set(UnitType.Zerg_Mutalisk, 5.2109375);
    fields.get("acceleration").set(UnitType.Zerg_Mutalisk, 67);
    fields.get("haltDistance").set(UnitType.Zerg_Mutalisk, 21745);
    fields.get("turnRadius").set(UnitType.Zerg_Mutalisk, 40);
    fields.get("canProduce").set(UnitType.Zerg_Mutalisk, false);
    fields.get("canAttack").set(UnitType.Zerg_Mutalisk, true);
    fields.get("canMove").set(UnitType.Zerg_Mutalisk, true);
    fields.get("flyer").set(UnitType.Zerg_Mutalisk, true);
    fields.get("regeneratesHP").set(UnitType.Zerg_Mutalisk, true);
    fields.get("spellcaster").set(UnitType.Zerg_Mutalisk, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Mutalisk, false);
    fields.get("invincible").set(UnitType.Zerg_Mutalisk, false);
    fields.get("organic").set(UnitType.Zerg_Mutalisk, true);
    fields.get("mechanical").set(UnitType.Zerg_Mutalisk, false);
    fields.get("robotic").set(UnitType.Zerg_Mutalisk, false);
    fields.get("detector").set(UnitType.Zerg_Mutalisk, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Mutalisk, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Mutalisk, false);
    fields.get("refinery").set(UnitType.Zerg_Mutalisk, false);
    fields.get("worker").set(UnitType.Zerg_Mutalisk, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Mutalisk, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Mutalisk, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Mutalisk, false);
    fields.get("burrowable").set(UnitType.Zerg_Mutalisk, false);
    fields.get("cloakable").set(UnitType.Zerg_Mutalisk, false);
    fields.get("building").set(UnitType.Zerg_Mutalisk, false);
    fields.get("addon").set(UnitType.Zerg_Mutalisk, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Mutalisk, false);
    fields.get("neutral").set(UnitType.Zerg_Mutalisk, false);
    fields.get("hero").set(UnitType.Zerg_Mutalisk, false);
    fields.get("powerup").set(UnitType.Zerg_Mutalisk, false);
    fields.get("beacon").set(UnitType.Zerg_Mutalisk, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Mutalisk, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Mutalisk, false);
    fields.get("spell").set(UnitType.Zerg_Mutalisk, false);
    fields.get("producesCreep").set(UnitType.Zerg_Mutalisk, false);
    fields.get("producesLarva").set(UnitType.Zerg_Mutalisk, false);
    fields.get("mineralField").set(UnitType.Zerg_Mutalisk, false);
    fields.get("critter").set(UnitType.Zerg_Mutalisk, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Mutalisk, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Mutalisk, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Mutalisk, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Guardian() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Guardian, 44);
    fields.get("race").set(UnitType.Zerg_Guardian, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Guardian, new UnitType.WhatBuilds(UnitType.Zerg_Mutalisk, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Guardian, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Zerg_Guardian,
            toMap(UnitType.Zerg_Mutalisk, 1, UnitType.Zerg_Greater_Spire, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Guardian, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Guardian, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Guardian, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Zerg_Guardian,
            new ArrayList(
                Arrays.asList(UpgradeType.Zerg_Flyer_Attacks, UpgradeType.Zerg_Flyer_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Guardian, UpgradeType.Zerg_Flyer_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Guardian, 150);
    fields.get("maxShields").set(UnitType.Zerg_Guardian, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Guardian, 0);
    fields.get("armor").set(UnitType.Zerg_Guardian, 2);
    fields.get("mineralPrice").set(UnitType.Zerg_Guardian, 50);
    fields.get("gasPrice").set(UnitType.Zerg_Guardian, 100);
    fields.get("buildTime").set(UnitType.Zerg_Guardian, 600);
    fields.get("supplyRequired").set(UnitType.Zerg_Guardian, 4);
    fields.get("supplyProvided").set(UnitType.Zerg_Guardian, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Guardian, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Guardian, 0);
    fields.get("buildScore").set(UnitType.Zerg_Guardian, 550);
    fields.get("destroyScore").set(UnitType.Zerg_Guardian, 1100);
    fields.get("size").set(UnitType.Zerg_Guardian, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Guardian, 2);
    fields.get("tileHeight").set(UnitType.Zerg_Guardian, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Guardian, 22);
    fields.get("dimensionUp").set(UnitType.Zerg_Guardian, 22);
    fields.get("dimensionRight").set(UnitType.Zerg_Guardian, 21);
    fields.get("dimensionDown").set(UnitType.Zerg_Guardian, 21);
    fields.get("width").set(UnitType.Zerg_Guardian, 44);
    fields.get("height").set(UnitType.Zerg_Guardian, 44);
    fields.get("seekRange").set(UnitType.Zerg_Guardian, 0);
    fields.get("sightRange").set(UnitType.Zerg_Guardian, 352);
    fields.get("groundWeapon").set(UnitType.Zerg_Guardian, WeaponType.Acid_Spore);
    fields.get("maxGroundHits").set(UnitType.Zerg_Guardian, 1);
    fields.get("airWeapon").set(UnitType.Zerg_Guardian, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Guardian, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Guardian, 1.953125);
    fields.get("acceleration").set(UnitType.Zerg_Guardian, 27);
    fields.get("haltDistance").set(UnitType.Zerg_Guardian, 7585);
    fields.get("turnRadius").set(UnitType.Zerg_Guardian, 20);
    fields.get("canProduce").set(UnitType.Zerg_Guardian, false);
    fields.get("canAttack").set(UnitType.Zerg_Guardian, true);
    fields.get("canMove").set(UnitType.Zerg_Guardian, true);
    fields.get("flyer").set(UnitType.Zerg_Guardian, true);
    fields.get("regeneratesHP").set(UnitType.Zerg_Guardian, true);
    fields.get("spellcaster").set(UnitType.Zerg_Guardian, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Guardian, false);
    fields.get("invincible").set(UnitType.Zerg_Guardian, false);
    fields.get("organic").set(UnitType.Zerg_Guardian, true);
    fields.get("mechanical").set(UnitType.Zerg_Guardian, false);
    fields.get("robotic").set(UnitType.Zerg_Guardian, false);
    fields.get("detector").set(UnitType.Zerg_Guardian, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Guardian, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Guardian, false);
    fields.get("refinery").set(UnitType.Zerg_Guardian, false);
    fields.get("worker").set(UnitType.Zerg_Guardian, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Guardian, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Guardian, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Guardian, false);
    fields.get("burrowable").set(UnitType.Zerg_Guardian, false);
    fields.get("cloakable").set(UnitType.Zerg_Guardian, false);
    fields.get("building").set(UnitType.Zerg_Guardian, false);
    fields.get("addon").set(UnitType.Zerg_Guardian, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Guardian, false);
    fields.get("neutral").set(UnitType.Zerg_Guardian, false);
    fields.get("hero").set(UnitType.Zerg_Guardian, false);
    fields.get("powerup").set(UnitType.Zerg_Guardian, false);
    fields.get("beacon").set(UnitType.Zerg_Guardian, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Guardian, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Guardian, false);
    fields.get("spell").set(UnitType.Zerg_Guardian, false);
    fields.get("producesCreep").set(UnitType.Zerg_Guardian, false);
    fields.get("producesLarva").set(UnitType.Zerg_Guardian, false);
    fields.get("mineralField").set(UnitType.Zerg_Guardian, false);
    fields.get("critter").set(UnitType.Zerg_Guardian, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Guardian, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Guardian, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Guardian, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Queen() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Queen, 45);
    fields.get("race").set(UnitType.Zerg_Queen, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Queen, new UnitType.WhatBuilds(UnitType.Zerg_Larva, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Queen, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Zerg_Queen, toMap(UnitType.Zerg_Larva, 1, UnitType.Zerg_Queens_Nest, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Queen, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Queen, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Zerg_Queen,
            new ArrayList(
                Arrays.asList(
                    TechType.Infestation,
                    TechType.Spawn_Broodlings,
                    TechType.Ensnare,
                    TechType.Parasite)));
    fields
        .get("upgrades")
        .set(
            UnitType.Zerg_Queen,
            new ArrayList(
                Arrays.asList(UpgradeType.Zerg_Flyer_Carapace, UpgradeType.Gamete_Meiosis)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Queen, UpgradeType.Zerg_Flyer_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Queen, 120);
    fields.get("maxShields").set(UnitType.Zerg_Queen, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Queen, 200);
    fields.get("armor").set(UnitType.Zerg_Queen, 0);
    fields.get("mineralPrice").set(UnitType.Zerg_Queen, 100);
    fields.get("gasPrice").set(UnitType.Zerg_Queen, 100);
    fields.get("buildTime").set(UnitType.Zerg_Queen, 750);
    fields.get("supplyRequired").set(UnitType.Zerg_Queen, 4);
    fields.get("supplyProvided").set(UnitType.Zerg_Queen, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Queen, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Queen, 0);
    fields.get("buildScore").set(UnitType.Zerg_Queen, 400);
    fields.get("destroyScore").set(UnitType.Zerg_Queen, 800);
    fields.get("size").set(UnitType.Zerg_Queen, UnitSizeType.Medium);
    fields.get("tileWidth").set(UnitType.Zerg_Queen, 2);
    fields.get("tileHeight").set(UnitType.Zerg_Queen, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Queen, 24);
    fields.get("dimensionUp").set(UnitType.Zerg_Queen, 24);
    fields.get("dimensionRight").set(UnitType.Zerg_Queen, 23);
    fields.get("dimensionDown").set(UnitType.Zerg_Queen, 23);
    fields.get("width").set(UnitType.Zerg_Queen, 48);
    fields.get("height").set(UnitType.Zerg_Queen, 48);
    fields.get("seekRange").set(UnitType.Zerg_Queen, 256);
    fields.get("sightRange").set(UnitType.Zerg_Queen, 320);
    fields.get("groundWeapon").set(UnitType.Zerg_Queen, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Queen, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Queen, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Queen, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Queen, 5.2109375);
    fields.get("acceleration").set(UnitType.Zerg_Queen, 67);
    fields.get("haltDistance").set(UnitType.Zerg_Queen, 21745);
    fields.get("turnRadius").set(UnitType.Zerg_Queen, 40);
    fields.get("canProduce").set(UnitType.Zerg_Queen, false);
    fields.get("canAttack").set(UnitType.Zerg_Queen, false);
    fields.get("canMove").set(UnitType.Zerg_Queen, true);
    fields.get("flyer").set(UnitType.Zerg_Queen, true);
    fields.get("regeneratesHP").set(UnitType.Zerg_Queen, true);
    fields.get("spellcaster").set(UnitType.Zerg_Queen, true);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Queen, false);
    fields.get("invincible").set(UnitType.Zerg_Queen, false);
    fields.get("organic").set(UnitType.Zerg_Queen, true);
    fields.get("mechanical").set(UnitType.Zerg_Queen, false);
    fields.get("robotic").set(UnitType.Zerg_Queen, false);
    fields.get("detector").set(UnitType.Zerg_Queen, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Queen, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Queen, false);
    fields.get("refinery").set(UnitType.Zerg_Queen, false);
    fields.get("worker").set(UnitType.Zerg_Queen, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Queen, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Queen, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Queen, false);
    fields.get("burrowable").set(UnitType.Zerg_Queen, false);
    fields.get("cloakable").set(UnitType.Zerg_Queen, false);
    fields.get("building").set(UnitType.Zerg_Queen, false);
    fields.get("addon").set(UnitType.Zerg_Queen, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Queen, false);
    fields.get("neutral").set(UnitType.Zerg_Queen, false);
    fields.get("hero").set(UnitType.Zerg_Queen, false);
    fields.get("powerup").set(UnitType.Zerg_Queen, false);
    fields.get("beacon").set(UnitType.Zerg_Queen, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Queen, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Queen, false);
    fields.get("spell").set(UnitType.Zerg_Queen, false);
    fields.get("producesCreep").set(UnitType.Zerg_Queen, false);
    fields.get("producesLarva").set(UnitType.Zerg_Queen, false);
    fields.get("mineralField").set(UnitType.Zerg_Queen, false);
    fields.get("critter").set(UnitType.Zerg_Queen, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Queen, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Queen, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Queen, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Defiler() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Defiler, 46);
    fields.get("race").set(UnitType.Zerg_Defiler, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Defiler, new UnitType.WhatBuilds(UnitType.Zerg_Larva, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Defiler, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Zerg_Defiler, toMap(UnitType.Zerg_Defiler_Mound, 1, UnitType.Zerg_Larva, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Defiler, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Defiler, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Zerg_Defiler,
            new ArrayList(
                Arrays.asList(
                    TechType.Burrowing, TechType.Dark_Swarm, TechType.Plague, TechType.Consume)));
    fields
        .get("upgrades")
        .set(
            UnitType.Zerg_Defiler,
            new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace, UpgradeType.Metasynaptic_Node)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Defiler, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Defiler, 80);
    fields.get("maxShields").set(UnitType.Zerg_Defiler, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Defiler, 200);
    fields.get("armor").set(UnitType.Zerg_Defiler, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Defiler, 50);
    fields.get("gasPrice").set(UnitType.Zerg_Defiler, 150);
    fields.get("buildTime").set(UnitType.Zerg_Defiler, 750);
    fields.get("supplyRequired").set(UnitType.Zerg_Defiler, 4);
    fields.get("supplyProvided").set(UnitType.Zerg_Defiler, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Defiler, 2);
    fields.get("spaceProvided").set(UnitType.Zerg_Defiler, 0);
    fields.get("buildScore").set(UnitType.Zerg_Defiler, 225);
    fields.get("destroyScore").set(UnitType.Zerg_Defiler, 450);
    fields.get("size").set(UnitType.Zerg_Defiler, UnitSizeType.Medium);
    fields.get("tileWidth").set(UnitType.Zerg_Defiler, 1);
    fields.get("tileHeight").set(UnitType.Zerg_Defiler, 1);
    fields.get("dimensionLeft").set(UnitType.Zerg_Defiler, 13);
    fields.get("dimensionUp").set(UnitType.Zerg_Defiler, 12);
    fields.get("dimensionRight").set(UnitType.Zerg_Defiler, 13);
    fields.get("dimensionDown").set(UnitType.Zerg_Defiler, 12);
    fields.get("width").set(UnitType.Zerg_Defiler, 27);
    fields.get("height").set(UnitType.Zerg_Defiler, 25);
    fields.get("seekRange").set(UnitType.Zerg_Defiler, 0);
    fields.get("sightRange").set(UnitType.Zerg_Defiler, 320);
    fields.get("groundWeapon").set(UnitType.Zerg_Defiler, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Defiler, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Defiler, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Defiler, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Defiler, 3.125);
    fields.get("acceleration").set(UnitType.Zerg_Defiler, 1);
    fields.get("haltDistance").set(UnitType.Zerg_Defiler, 1);
    fields.get("turnRadius").set(UnitType.Zerg_Defiler, 27);
    fields.get("canProduce").set(UnitType.Zerg_Defiler, false);
    fields.get("canAttack").set(UnitType.Zerg_Defiler, false);
    fields.get("canMove").set(UnitType.Zerg_Defiler, true);
    fields.get("flyer").set(UnitType.Zerg_Defiler, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Defiler, true);
    fields.get("spellcaster").set(UnitType.Zerg_Defiler, true);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Defiler, false);
    fields.get("invincible").set(UnitType.Zerg_Defiler, false);
    fields.get("organic").set(UnitType.Zerg_Defiler, true);
    fields.get("mechanical").set(UnitType.Zerg_Defiler, false);
    fields.get("robotic").set(UnitType.Zerg_Defiler, false);
    fields.get("detector").set(UnitType.Zerg_Defiler, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Defiler, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Defiler, false);
    fields.get("refinery").set(UnitType.Zerg_Defiler, false);
    fields.get("worker").set(UnitType.Zerg_Defiler, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Defiler, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Defiler, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Defiler, false);
    fields.get("burrowable").set(UnitType.Zerg_Defiler, true);
    fields.get("cloakable").set(UnitType.Zerg_Defiler, false);
    fields.get("building").set(UnitType.Zerg_Defiler, false);
    fields.get("addon").set(UnitType.Zerg_Defiler, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Defiler, false);
    fields.get("neutral").set(UnitType.Zerg_Defiler, false);
    fields.get("hero").set(UnitType.Zerg_Defiler, false);
    fields.get("powerup").set(UnitType.Zerg_Defiler, false);
    fields.get("beacon").set(UnitType.Zerg_Defiler, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Defiler, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Defiler, false);
    fields.get("spell").set(UnitType.Zerg_Defiler, false);
    fields.get("producesCreep").set(UnitType.Zerg_Defiler, false);
    fields.get("producesLarva").set(UnitType.Zerg_Defiler, false);
    fields.get("mineralField").set(UnitType.Zerg_Defiler, false);
    fields.get("critter").set(UnitType.Zerg_Defiler, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Defiler, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Defiler, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Defiler, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Scourge() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Scourge, 47);
    fields.get("race").set(UnitType.Zerg_Scourge, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Scourge, new UnitType.WhatBuilds(UnitType.Zerg_Larva, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Scourge, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Zerg_Scourge, toMap(UnitType.Zerg_Larva, 1, UnitType.Zerg_Spire, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Scourge, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Scourge, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Scourge, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Zerg_Scourge, new ArrayList(Arrays.asList(UpgradeType.Zerg_Flyer_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Scourge, UpgradeType.Zerg_Flyer_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Scourge, 25);
    fields.get("maxShields").set(UnitType.Zerg_Scourge, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Scourge, 0);
    fields.get("armor").set(UnitType.Zerg_Scourge, 0);
    fields.get("mineralPrice").set(UnitType.Zerg_Scourge, 25);
    fields.get("gasPrice").set(UnitType.Zerg_Scourge, 75);
    fields.get("buildTime").set(UnitType.Zerg_Scourge, 450);
    fields.get("supplyRequired").set(UnitType.Zerg_Scourge, 1);
    fields.get("supplyProvided").set(UnitType.Zerg_Scourge, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Scourge, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Scourge, 0);
    fields.get("buildScore").set(UnitType.Zerg_Scourge, 100);
    fields.get("destroyScore").set(UnitType.Zerg_Scourge, 200);
    fields.get("size").set(UnitType.Zerg_Scourge, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Zerg_Scourge, 1);
    fields.get("tileHeight").set(UnitType.Zerg_Scourge, 1);
    fields.get("dimensionLeft").set(UnitType.Zerg_Scourge, 12);
    fields.get("dimensionUp").set(UnitType.Zerg_Scourge, 12);
    fields.get("dimensionRight").set(UnitType.Zerg_Scourge, 11);
    fields.get("dimensionDown").set(UnitType.Zerg_Scourge, 11);
    fields.get("width").set(UnitType.Zerg_Scourge, 24);
    fields.get("height").set(UnitType.Zerg_Scourge, 24);
    fields.get("seekRange").set(UnitType.Zerg_Scourge, 96);
    fields.get("sightRange").set(UnitType.Zerg_Scourge, 160);
    fields.get("groundWeapon").set(UnitType.Zerg_Scourge, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Scourge, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Scourge, WeaponType.Suicide_Scourge);
    fields.get("maxAirHits").set(UnitType.Zerg_Scourge, 1);
    fields.get("topSpeed").set(UnitType.Zerg_Scourge, 5.2109375);
    fields.get("acceleration").set(UnitType.Zerg_Scourge, 107);
    fields.get("haltDistance").set(UnitType.Zerg_Scourge, 13616);
    fields.get("turnRadius").set(UnitType.Zerg_Scourge, 40);
    fields.get("canProduce").set(UnitType.Zerg_Scourge, false);
    fields.get("canAttack").set(UnitType.Zerg_Scourge, true);
    fields.get("canMove").set(UnitType.Zerg_Scourge, true);
    fields.get("flyer").set(UnitType.Zerg_Scourge, true);
    fields.get("regeneratesHP").set(UnitType.Zerg_Scourge, true);
    fields.get("spellcaster").set(UnitType.Zerg_Scourge, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Scourge, false);
    fields.get("invincible").set(UnitType.Zerg_Scourge, false);
    fields.get("organic").set(UnitType.Zerg_Scourge, true);
    fields.get("mechanical").set(UnitType.Zerg_Scourge, false);
    fields.get("robotic").set(UnitType.Zerg_Scourge, false);
    fields.get("detector").set(UnitType.Zerg_Scourge, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Scourge, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Scourge, false);
    fields.get("refinery").set(UnitType.Zerg_Scourge, false);
    fields.get("worker").set(UnitType.Zerg_Scourge, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Scourge, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Scourge, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Scourge, true);
    fields.get("burrowable").set(UnitType.Zerg_Scourge, false);
    fields.get("cloakable").set(UnitType.Zerg_Scourge, false);
    fields.get("building").set(UnitType.Zerg_Scourge, false);
    fields.get("addon").set(UnitType.Zerg_Scourge, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Scourge, false);
    fields.get("neutral").set(UnitType.Zerg_Scourge, false);
    fields.get("hero").set(UnitType.Zerg_Scourge, false);
    fields.get("powerup").set(UnitType.Zerg_Scourge, false);
    fields.get("beacon").set(UnitType.Zerg_Scourge, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Scourge, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Scourge, false);
    fields.get("spell").set(UnitType.Zerg_Scourge, false);
    fields.get("producesCreep").set(UnitType.Zerg_Scourge, false);
    fields.get("producesLarva").set(UnitType.Zerg_Scourge, false);
    fields.get("mineralField").set(UnitType.Zerg_Scourge, false);
    fields.get("critter").set(UnitType.Zerg_Scourge, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Scourge, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Scourge, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Scourge, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Torrasque() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Torrasque, 48);
    fields.get("race").set(UnitType.Hero_Torrasque, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Torrasque, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Torrasque, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Torrasque, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Torrasque, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Torrasque, TechType.None);
    fields.get("abilities").set(UnitType.Hero_Torrasque, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Torrasque,
            new ArrayList(
                Arrays.asList(UpgradeType.Zerg_Carapace, UpgradeType.Zerg_Melee_Attacks)));
    fields.get("armorUpgrade").set(UnitType.Hero_Torrasque, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Hero_Torrasque, 800);
    fields.get("maxShields").set(UnitType.Hero_Torrasque, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Torrasque, 0);
    fields.get("armor").set(UnitType.Hero_Torrasque, 4);
    fields.get("mineralPrice").set(UnitType.Hero_Torrasque, 400);
    fields.get("gasPrice").set(UnitType.Hero_Torrasque, 400);
    fields.get("buildTime").set(UnitType.Hero_Torrasque, 1800);
    fields.get("supplyRequired").set(UnitType.Hero_Torrasque, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Torrasque, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Torrasque, 4);
    fields.get("spaceProvided").set(UnitType.Hero_Torrasque, 0);
    fields.get("buildScore").set(UnitType.Hero_Torrasque, 0);
    fields.get("destroyScore").set(UnitType.Hero_Torrasque, 2600);
    fields.get("size").set(UnitType.Hero_Torrasque, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Torrasque, 2);
    fields.get("tileHeight").set(UnitType.Hero_Torrasque, 2);
    fields.get("dimensionLeft").set(UnitType.Hero_Torrasque, 19);
    fields.get("dimensionUp").set(UnitType.Hero_Torrasque, 16);
    fields.get("dimensionRight").set(UnitType.Hero_Torrasque, 18);
    fields.get("dimensionDown").set(UnitType.Hero_Torrasque, 15);
    fields.get("width").set(UnitType.Hero_Torrasque, 38);
    fields.get("height").set(UnitType.Hero_Torrasque, 32);
    fields.get("seekRange").set(UnitType.Hero_Torrasque, 96);
    fields.get("sightRange").set(UnitType.Hero_Torrasque, 224);
    fields.get("groundWeapon").set(UnitType.Hero_Torrasque, WeaponType.Kaiser_Blades_Torrasque);
    fields.get("maxGroundHits").set(UnitType.Hero_Torrasque, 1);
    fields.get("airWeapon").set(UnitType.Hero_Torrasque, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Torrasque, 0);
    fields.get("topSpeed").set(UnitType.Hero_Torrasque, 4.0);
    fields.get("acceleration").set(UnitType.Hero_Torrasque, 1);
    fields.get("haltDistance").set(UnitType.Hero_Torrasque, 1);
    fields.get("turnRadius").set(UnitType.Hero_Torrasque, 40);
    fields.get("canProduce").set(UnitType.Hero_Torrasque, false);
    fields.get("canAttack").set(UnitType.Hero_Torrasque, true);
    fields.get("canMove").set(UnitType.Hero_Torrasque, true);
    fields.get("flyer").set(UnitType.Hero_Torrasque, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Torrasque, true);
    fields.get("spellcaster").set(UnitType.Hero_Torrasque, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Torrasque, false);
    fields.get("invincible").set(UnitType.Hero_Torrasque, false);
    fields.get("organic").set(UnitType.Hero_Torrasque, true);
    fields.get("mechanical").set(UnitType.Hero_Torrasque, false);
    fields.get("robotic").set(UnitType.Hero_Torrasque, false);
    fields.get("detector").set(UnitType.Hero_Torrasque, false);
    fields.get("resourceContainer").set(UnitType.Hero_Torrasque, false);
    fields.get("resourceDepot").set(UnitType.Hero_Torrasque, false);
    fields.get("refinery").set(UnitType.Hero_Torrasque, false);
    fields.get("worker").set(UnitType.Hero_Torrasque, false);
    fields.get("requiresPsi").set(UnitType.Hero_Torrasque, false);
    fields.get("requiresCreep").set(UnitType.Hero_Torrasque, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Torrasque, false);
    fields.get("burrowable").set(UnitType.Hero_Torrasque, false);
    fields.get("cloakable").set(UnitType.Hero_Torrasque, false);
    fields.get("building").set(UnitType.Hero_Torrasque, false);
    fields.get("addon").set(UnitType.Hero_Torrasque, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Torrasque, false);
    fields.get("neutral").set(UnitType.Hero_Torrasque, false);
    fields.get("hero").set(UnitType.Hero_Torrasque, true);
    fields.get("powerup").set(UnitType.Hero_Torrasque, false);
    fields.get("beacon").set(UnitType.Hero_Torrasque, false);
    fields.get("flagBeacon").set(UnitType.Hero_Torrasque, false);
    fields.get("specialBuilding").set(UnitType.Hero_Torrasque, false);
    fields.get("spell").set(UnitType.Hero_Torrasque, false);
    fields.get("producesCreep").set(UnitType.Hero_Torrasque, false);
    fields.get("producesLarva").set(UnitType.Hero_Torrasque, false);
    fields.get("mineralField").set(UnitType.Hero_Torrasque, false);
    fields.get("critter").set(UnitType.Hero_Torrasque, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Torrasque, false);
    fields.get("researchesWhat").set(UnitType.Hero_Torrasque, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Torrasque, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Matriarch() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Matriarch, 49);
    fields.get("race").set(UnitType.Hero_Matriarch, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Matriarch, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Matriarch, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Matriarch, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Matriarch, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Matriarch, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Hero_Matriarch,
            new ArrayList(
                Arrays.asList(
                    TechType.Infestation,
                    TechType.Spawn_Broodlings,
                    TechType.Ensnare,
                    TechType.Parasite)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Matriarch, new ArrayList(Arrays.asList(UpgradeType.Zerg_Flyer_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Hero_Matriarch, UpgradeType.Zerg_Flyer_Carapace);
    fields.get("maxHitPoints").set(UnitType.Hero_Matriarch, 300);
    fields.get("maxShields").set(UnitType.Hero_Matriarch, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Matriarch, 250);
    fields.get("armor").set(UnitType.Hero_Matriarch, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Matriarch, 200);
    fields.get("gasPrice").set(UnitType.Hero_Matriarch, 300);
    fields.get("buildTime").set(UnitType.Hero_Matriarch, 1500);
    fields.get("supplyRequired").set(UnitType.Hero_Matriarch, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Matriarch, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Matriarch, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Matriarch, 0);
    fields.get("buildScore").set(UnitType.Hero_Matriarch, 0);
    fields.get("destroyScore").set(UnitType.Hero_Matriarch, 1600);
    fields.get("size").set(UnitType.Hero_Matriarch, UnitSizeType.Medium);
    fields.get("tileWidth").set(UnitType.Hero_Matriarch, 2);
    fields.get("tileHeight").set(UnitType.Hero_Matriarch, 2);
    fields.get("dimensionLeft").set(UnitType.Hero_Matriarch, 24);
    fields.get("dimensionUp").set(UnitType.Hero_Matriarch, 24);
    fields.get("dimensionRight").set(UnitType.Hero_Matriarch, 23);
    fields.get("dimensionDown").set(UnitType.Hero_Matriarch, 23);
    fields.get("width").set(UnitType.Hero_Matriarch, 48);
    fields.get("height").set(UnitType.Hero_Matriarch, 48);
    fields.get("seekRange").set(UnitType.Hero_Matriarch, 256);
    fields.get("sightRange").set(UnitType.Hero_Matriarch, 320);
    fields.get("groundWeapon").set(UnitType.Hero_Matriarch, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Hero_Matriarch, 0);
    fields.get("airWeapon").set(UnitType.Hero_Matriarch, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Matriarch, 0);
    fields.get("topSpeed").set(UnitType.Hero_Matriarch, 5.2109375);
    fields.get("acceleration").set(UnitType.Hero_Matriarch, 67);
    fields.get("haltDistance").set(UnitType.Hero_Matriarch, 21745);
    fields.get("turnRadius").set(UnitType.Hero_Matriarch, 40);
    fields.get("canProduce").set(UnitType.Hero_Matriarch, false);
    fields.get("canAttack").set(UnitType.Hero_Matriarch, false);
    fields.get("canMove").set(UnitType.Hero_Matriarch, true);
    fields.get("flyer").set(UnitType.Hero_Matriarch, true);
    fields.get("regeneratesHP").set(UnitType.Hero_Matriarch, true);
    fields.get("spellcaster").set(UnitType.Hero_Matriarch, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Matriarch, false);
    fields.get("invincible").set(UnitType.Hero_Matriarch, false);
    fields.get("organic").set(UnitType.Hero_Matriarch, true);
    fields.get("mechanical").set(UnitType.Hero_Matriarch, false);
    fields.get("robotic").set(UnitType.Hero_Matriarch, false);
    fields.get("detector").set(UnitType.Hero_Matriarch, false);
    fields.get("resourceContainer").set(UnitType.Hero_Matriarch, false);
    fields.get("resourceDepot").set(UnitType.Hero_Matriarch, false);
    fields.get("refinery").set(UnitType.Hero_Matriarch, false);
    fields.get("worker").set(UnitType.Hero_Matriarch, false);
    fields.get("requiresPsi").set(UnitType.Hero_Matriarch, false);
    fields.get("requiresCreep").set(UnitType.Hero_Matriarch, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Matriarch, false);
    fields.get("burrowable").set(UnitType.Hero_Matriarch, false);
    fields.get("cloakable").set(UnitType.Hero_Matriarch, false);
    fields.get("building").set(UnitType.Hero_Matriarch, false);
    fields.get("addon").set(UnitType.Hero_Matriarch, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Matriarch, false);
    fields.get("neutral").set(UnitType.Hero_Matriarch, false);
    fields.get("hero").set(UnitType.Hero_Matriarch, true);
    fields.get("powerup").set(UnitType.Hero_Matriarch, false);
    fields.get("beacon").set(UnitType.Hero_Matriarch, false);
    fields.get("flagBeacon").set(UnitType.Hero_Matriarch, false);
    fields.get("specialBuilding").set(UnitType.Hero_Matriarch, false);
    fields.get("spell").set(UnitType.Hero_Matriarch, false);
    fields.get("producesCreep").set(UnitType.Hero_Matriarch, false);
    fields.get("producesLarva").set(UnitType.Hero_Matriarch, false);
    fields.get("mineralField").set(UnitType.Hero_Matriarch, false);
    fields.get("critter").set(UnitType.Hero_Matriarch, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Matriarch, false);
    fields.get("researchesWhat").set(UnitType.Hero_Matriarch, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Matriarch, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Infested_Terran() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Infested_Terran, 50);
    fields.get("race").set(UnitType.Zerg_Infested_Terran, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(
            UnitType.Zerg_Infested_Terran,
            new UnitType.WhatBuilds(UnitType.Zerg_Infested_Command_Center, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Infested_Terran, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Zerg_Infested_Terran, toMap(UnitType.Zerg_Infested_Command_Center, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Infested_Terran, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Infested_Terran, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Zerg_Infested_Terran, new ArrayList(Arrays.asList(TechType.Burrowing)));
    fields
        .get("upgrades")
        .set(
            UnitType.Zerg_Infested_Terran, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Infested_Terran, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Infested_Terran, 60);
    fields.get("maxShields").set(UnitType.Zerg_Infested_Terran, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Infested_Terran, 0);
    fields.get("armor").set(UnitType.Zerg_Infested_Terran, 0);
    fields.get("mineralPrice").set(UnitType.Zerg_Infested_Terran, 100);
    fields.get("gasPrice").set(UnitType.Zerg_Infested_Terran, 50);
    fields.get("buildTime").set(UnitType.Zerg_Infested_Terran, 600);
    fields.get("supplyRequired").set(UnitType.Zerg_Infested_Terran, 2);
    fields.get("supplyProvided").set(UnitType.Zerg_Infested_Terran, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Infested_Terran, 1);
    fields.get("spaceProvided").set(UnitType.Zerg_Infested_Terran, 0);
    fields.get("buildScore").set(UnitType.Zerg_Infested_Terran, 200);
    fields.get("destroyScore").set(UnitType.Zerg_Infested_Terran, 400);
    fields.get("size").set(UnitType.Zerg_Infested_Terran, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Zerg_Infested_Terran, 1);
    fields.get("tileHeight").set(UnitType.Zerg_Infested_Terran, 1);
    fields.get("dimensionLeft").set(UnitType.Zerg_Infested_Terran, 8);
    fields.get("dimensionUp").set(UnitType.Zerg_Infested_Terran, 9);
    fields.get("dimensionRight").set(UnitType.Zerg_Infested_Terran, 8);
    fields.get("dimensionDown").set(UnitType.Zerg_Infested_Terran, 10);
    fields.get("width").set(UnitType.Zerg_Infested_Terran, 17);
    fields.get("height").set(UnitType.Zerg_Infested_Terran, 20);
    fields.get("seekRange").set(UnitType.Zerg_Infested_Terran, 96);
    fields.get("sightRange").set(UnitType.Zerg_Infested_Terran, 160);
    fields
        .get("groundWeapon")
        .set(UnitType.Zerg_Infested_Terran, WeaponType.Suicide_Infested_Terran);
    fields.get("maxGroundHits").set(UnitType.Zerg_Infested_Terran, 1);
    fields.get("airWeapon").set(UnitType.Zerg_Infested_Terran, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Infested_Terran, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Infested_Terran, 4.546875);
    fields.get("acceleration").set(UnitType.Zerg_Infested_Terran, 1);
    fields.get("haltDistance").set(UnitType.Zerg_Infested_Terran, 1);
    fields.get("turnRadius").set(UnitType.Zerg_Infested_Terran, 40);
    fields.get("canProduce").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("canAttack").set(UnitType.Zerg_Infested_Terran, true);
    fields.get("canMove").set(UnitType.Zerg_Infested_Terran, true);
    fields.get("flyer").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Infested_Terran, true);
    fields.get("spellcaster").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("invincible").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("organic").set(UnitType.Zerg_Infested_Terran, true);
    fields.get("mechanical").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("robotic").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("detector").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("refinery").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("worker").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("burrowable").set(UnitType.Zerg_Infested_Terran, true);
    fields.get("cloakable").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("building").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("addon").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("neutral").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("hero").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("powerup").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("beacon").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("spell").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("producesCreep").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("producesLarva").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("mineralField").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("critter").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Infested_Terran, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Infested_Terran, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Infested_Terran, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Infested_Kerrigan() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Infested_Kerrigan, 51);
    fields.get("race").set(UnitType.Hero_Infested_Kerrigan, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Infested_Kerrigan, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Infested_Kerrigan, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Infested_Kerrigan, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Infested_Kerrigan, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Infested_Kerrigan, TechType.Personnel_Cloaking);
    fields
        .get("abilities")
        .set(
            UnitType.Hero_Infested_Kerrigan,
            new ArrayList(
                Arrays.asList(
                    TechType.Personnel_Cloaking,
                    TechType.Ensnare,
                    TechType.Psionic_Storm,
                    TechType.Consume)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Infested_Kerrigan,
            new ArrayList(
                Arrays.asList(UpgradeType.Zerg_Carapace, UpgradeType.Zerg_Melee_Attacks)));
    fields.get("armorUpgrade").set(UnitType.Hero_Infested_Kerrigan, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Hero_Infested_Kerrigan, 400);
    fields.get("maxShields").set(UnitType.Hero_Infested_Kerrigan, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Infested_Kerrigan, 250);
    fields.get("armor").set(UnitType.Hero_Infested_Kerrigan, 2);
    fields.get("mineralPrice").set(UnitType.Hero_Infested_Kerrigan, 200);
    fields.get("gasPrice").set(UnitType.Hero_Infested_Kerrigan, 300);
    fields.get("buildTime").set(UnitType.Hero_Infested_Kerrigan, 1500);
    fields.get("supplyRequired").set(UnitType.Hero_Infested_Kerrigan, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Infested_Kerrigan, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Infested_Kerrigan, 1);
    fields.get("spaceProvided").set(UnitType.Hero_Infested_Kerrigan, 0);
    fields.get("buildScore").set(UnitType.Hero_Infested_Kerrigan, 0);
    fields.get("destroyScore").set(UnitType.Hero_Infested_Kerrigan, 4000);
    fields.get("size").set(UnitType.Hero_Infested_Kerrigan, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Hero_Infested_Kerrigan, 1);
    fields.get("tileHeight").set(UnitType.Hero_Infested_Kerrigan, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Infested_Kerrigan, 7);
    fields.get("dimensionUp").set(UnitType.Hero_Infested_Kerrigan, 10);
    fields.get("dimensionRight").set(UnitType.Hero_Infested_Kerrigan, 7);
    fields.get("dimensionDown").set(UnitType.Hero_Infested_Kerrigan, 11);
    fields.get("width").set(UnitType.Hero_Infested_Kerrigan, 15);
    fields.get("height").set(UnitType.Hero_Infested_Kerrigan, 22);
    fields.get("seekRange").set(UnitType.Hero_Infested_Kerrigan, 96);
    fields.get("sightRange").set(UnitType.Hero_Infested_Kerrigan, 288);
    fields
        .get("groundWeapon")
        .set(UnitType.Hero_Infested_Kerrigan, WeaponType.Claws_Infested_Kerrigan);
    fields.get("maxGroundHits").set(UnitType.Hero_Infested_Kerrigan, 1);
    fields.get("airWeapon").set(UnitType.Hero_Infested_Kerrigan, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Infested_Kerrigan, 0);
    fields.get("topSpeed").set(UnitType.Hero_Infested_Kerrigan, 3.125);
    fields.get("acceleration").set(UnitType.Hero_Infested_Kerrigan, 1);
    fields.get("haltDistance").set(UnitType.Hero_Infested_Kerrigan, 1);
    fields.get("turnRadius").set(UnitType.Hero_Infested_Kerrigan, 40);
    fields.get("canProduce").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("canAttack").set(UnitType.Hero_Infested_Kerrigan, true);
    fields.get("canMove").set(UnitType.Hero_Infested_Kerrigan, true);
    fields.get("flyer").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Infested_Kerrigan, true);
    fields.get("spellcaster").set(UnitType.Hero_Infested_Kerrigan, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("invincible").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("organic").set(UnitType.Hero_Infested_Kerrigan, true);
    fields.get("mechanical").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("robotic").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("detector").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("resourceContainer").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("resourceDepot").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("refinery").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("worker").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("requiresPsi").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("requiresCreep").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("burrowable").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("cloakable").set(UnitType.Hero_Infested_Kerrigan, true);
    fields.get("building").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("addon").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("neutral").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("hero").set(UnitType.Hero_Infested_Kerrigan, true);
    fields.get("powerup").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("beacon").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("flagBeacon").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("specialBuilding").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("spell").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("producesCreep").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("producesLarva").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("mineralField").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("critter").set(UnitType.Hero_Infested_Kerrigan, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Infested_Kerrigan, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Hero_Infested_Kerrigan, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Infested_Kerrigan, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Unclean_One() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Unclean_One, 52);
    fields.get("race").set(UnitType.Hero_Unclean_One, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Unclean_One, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Unclean_One, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Unclean_One, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Unclean_One, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Unclean_One, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Hero_Unclean_One,
            new ArrayList(
                Arrays.asList(
                    TechType.Burrowing, TechType.Dark_Swarm, TechType.Plague, TechType.Consume)));
    fields
        .get("upgrades")
        .set(UnitType.Hero_Unclean_One, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Hero_Unclean_One, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Hero_Unclean_One, 250);
    fields.get("maxShields").set(UnitType.Hero_Unclean_One, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Unclean_One, 250);
    fields.get("armor").set(UnitType.Hero_Unclean_One, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Unclean_One, 50);
    fields.get("gasPrice").set(UnitType.Hero_Unclean_One, 200);
    fields.get("buildTime").set(UnitType.Hero_Unclean_One, 1500);
    fields.get("supplyRequired").set(UnitType.Hero_Unclean_One, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Unclean_One, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Unclean_One, 2);
    fields.get("spaceProvided").set(UnitType.Hero_Unclean_One, 0);
    fields.get("buildScore").set(UnitType.Hero_Unclean_One, 0);
    fields.get("destroyScore").set(UnitType.Hero_Unclean_One, 900);
    fields.get("size").set(UnitType.Hero_Unclean_One, UnitSizeType.Medium);
    fields.get("tileWidth").set(UnitType.Hero_Unclean_One, 1);
    fields.get("tileHeight").set(UnitType.Hero_Unclean_One, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Unclean_One, 13);
    fields.get("dimensionUp").set(UnitType.Hero_Unclean_One, 12);
    fields.get("dimensionRight").set(UnitType.Hero_Unclean_One, 13);
    fields.get("dimensionDown").set(UnitType.Hero_Unclean_One, 12);
    fields.get("width").set(UnitType.Hero_Unclean_One, 27);
    fields.get("height").set(UnitType.Hero_Unclean_One, 25);
    fields.get("seekRange").set(UnitType.Hero_Unclean_One, 0);
    fields.get("sightRange").set(UnitType.Hero_Unclean_One, 320);
    fields.get("groundWeapon").set(UnitType.Hero_Unclean_One, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Hero_Unclean_One, 0);
    fields.get("airWeapon").set(UnitType.Hero_Unclean_One, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Unclean_One, 0);
    fields.get("topSpeed").set(UnitType.Hero_Unclean_One, 3.125);
    fields.get("acceleration").set(UnitType.Hero_Unclean_One, 1);
    fields.get("haltDistance").set(UnitType.Hero_Unclean_One, 1);
    fields.get("turnRadius").set(UnitType.Hero_Unclean_One, 27);
    fields.get("canProduce").set(UnitType.Hero_Unclean_One, false);
    fields.get("canAttack").set(UnitType.Hero_Unclean_One, false);
    fields.get("canMove").set(UnitType.Hero_Unclean_One, true);
    fields.get("flyer").set(UnitType.Hero_Unclean_One, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Unclean_One, true);
    fields.get("spellcaster").set(UnitType.Hero_Unclean_One, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Unclean_One, false);
    fields.get("invincible").set(UnitType.Hero_Unclean_One, false);
    fields.get("organic").set(UnitType.Hero_Unclean_One, true);
    fields.get("mechanical").set(UnitType.Hero_Unclean_One, false);
    fields.get("robotic").set(UnitType.Hero_Unclean_One, false);
    fields.get("detector").set(UnitType.Hero_Unclean_One, false);
    fields.get("resourceContainer").set(UnitType.Hero_Unclean_One, false);
    fields.get("resourceDepot").set(UnitType.Hero_Unclean_One, false);
    fields.get("refinery").set(UnitType.Hero_Unclean_One, false);
    fields.get("worker").set(UnitType.Hero_Unclean_One, false);
    fields.get("requiresPsi").set(UnitType.Hero_Unclean_One, false);
    fields.get("requiresCreep").set(UnitType.Hero_Unclean_One, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Unclean_One, false);
    fields.get("burrowable").set(UnitType.Hero_Unclean_One, true);
    fields.get("cloakable").set(UnitType.Hero_Unclean_One, false);
    fields.get("building").set(UnitType.Hero_Unclean_One, false);
    fields.get("addon").set(UnitType.Hero_Unclean_One, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Unclean_One, false);
    fields.get("neutral").set(UnitType.Hero_Unclean_One, false);
    fields.get("hero").set(UnitType.Hero_Unclean_One, true);
    fields.get("powerup").set(UnitType.Hero_Unclean_One, false);
    fields.get("beacon").set(UnitType.Hero_Unclean_One, false);
    fields.get("flagBeacon").set(UnitType.Hero_Unclean_One, false);
    fields.get("specialBuilding").set(UnitType.Hero_Unclean_One, false);
    fields.get("spell").set(UnitType.Hero_Unclean_One, false);
    fields.get("producesCreep").set(UnitType.Hero_Unclean_One, false);
    fields.get("producesLarva").set(UnitType.Hero_Unclean_One, false);
    fields.get("mineralField").set(UnitType.Hero_Unclean_One, false);
    fields.get("critter").set(UnitType.Hero_Unclean_One, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Unclean_One, false);
    fields.get("researchesWhat").set(UnitType.Hero_Unclean_One, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Unclean_One, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Hunter_Killer() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Hunter_Killer, 53);
    fields.get("race").set(UnitType.Hero_Hunter_Killer, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Hunter_Killer, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Hunter_Killer, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Hunter_Killer, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Hunter_Killer, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Hunter_Killer, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Hero_Hunter_Killer, new ArrayList(Arrays.asList(TechType.Burrowing)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Hunter_Killer,
            new ArrayList(
                Arrays.asList(UpgradeType.Zerg_Missile_Attacks, UpgradeType.Zerg_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Hero_Hunter_Killer, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Hero_Hunter_Killer, 160);
    fields.get("maxShields").set(UnitType.Hero_Hunter_Killer, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Hunter_Killer, 0);
    fields.get("armor").set(UnitType.Hero_Hunter_Killer, 2);
    fields.get("mineralPrice").set(UnitType.Hero_Hunter_Killer, 150);
    fields.get("gasPrice").set(UnitType.Hero_Hunter_Killer, 50);
    fields.get("buildTime").set(UnitType.Hero_Hunter_Killer, 780);
    fields.get("supplyRequired").set(UnitType.Hero_Hunter_Killer, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Hunter_Killer, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Hunter_Killer, 2);
    fields.get("spaceProvided").set(UnitType.Hero_Hunter_Killer, 0);
    fields.get("buildScore").set(UnitType.Hero_Hunter_Killer, 0);
    fields.get("destroyScore").set(UnitType.Hero_Hunter_Killer, 500);
    fields.get("size").set(UnitType.Hero_Hunter_Killer, UnitSizeType.Medium);
    fields.get("tileWidth").set(UnitType.Hero_Hunter_Killer, 1);
    fields.get("tileHeight").set(UnitType.Hero_Hunter_Killer, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Hunter_Killer, 10);
    fields.get("dimensionUp").set(UnitType.Hero_Hunter_Killer, 10);
    fields.get("dimensionRight").set(UnitType.Hero_Hunter_Killer, 10);
    fields.get("dimensionDown").set(UnitType.Hero_Hunter_Killer, 12);
    fields.get("width").set(UnitType.Hero_Hunter_Killer, 21);
    fields.get("height").set(UnitType.Hero_Hunter_Killer, 23);
    fields.get("seekRange").set(UnitType.Hero_Hunter_Killer, 0);
    fields.get("sightRange").set(UnitType.Hero_Hunter_Killer, 256);
    fields
        .get("groundWeapon")
        .set(UnitType.Hero_Hunter_Killer, WeaponType.Needle_Spines_Hunter_Killer);
    fields.get("maxGroundHits").set(UnitType.Hero_Hunter_Killer, 1);
    fields
        .get("airWeapon")
        .set(UnitType.Hero_Hunter_Killer, WeaponType.Needle_Spines_Hunter_Killer);
    fields.get("maxAirHits").set(UnitType.Hero_Hunter_Killer, 1);
    fields.get("topSpeed").set(UnitType.Hero_Hunter_Killer, 2.859375);
    fields.get("acceleration").set(UnitType.Hero_Hunter_Killer, 1);
    fields.get("haltDistance").set(UnitType.Hero_Hunter_Killer, 1);
    fields.get("turnRadius").set(UnitType.Hero_Hunter_Killer, 27);
    fields.get("canProduce").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("canAttack").set(UnitType.Hero_Hunter_Killer, true);
    fields.get("canMove").set(UnitType.Hero_Hunter_Killer, true);
    fields.get("flyer").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Hunter_Killer, true);
    fields.get("spellcaster").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("invincible").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("organic").set(UnitType.Hero_Hunter_Killer, true);
    fields.get("mechanical").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("robotic").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("detector").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("resourceContainer").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("resourceDepot").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("refinery").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("worker").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("requiresPsi").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("requiresCreep").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("burrowable").set(UnitType.Hero_Hunter_Killer, true);
    fields.get("cloakable").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("building").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("addon").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("neutral").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("hero").set(UnitType.Hero_Hunter_Killer, true);
    fields.get("powerup").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("beacon").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("flagBeacon").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("specialBuilding").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("spell").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("producesCreep").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("producesLarva").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("mineralField").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("critter").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Hunter_Killer, false);
    fields.get("researchesWhat").set(UnitType.Hero_Hunter_Killer, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Hunter_Killer, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Devouring_One() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Devouring_One, 54);
    fields.get("race").set(UnitType.Hero_Devouring_One, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Devouring_One, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Devouring_One, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Devouring_One, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Devouring_One, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Devouring_One, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Hero_Devouring_One, new ArrayList(Arrays.asList(TechType.Burrowing)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Devouring_One,
            new ArrayList(
                Arrays.asList(UpgradeType.Zerg_Carapace, UpgradeType.Zerg_Melee_Attacks)));
    fields.get("armorUpgrade").set(UnitType.Hero_Devouring_One, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Hero_Devouring_One, 120);
    fields.get("maxShields").set(UnitType.Hero_Devouring_One, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Devouring_One, 0);
    fields.get("armor").set(UnitType.Hero_Devouring_One, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Devouring_One, 100);
    fields.get("gasPrice").set(UnitType.Hero_Devouring_One, 0);
    fields.get("buildTime").set(UnitType.Hero_Devouring_One, 840);
    fields.get("supplyRequired").set(UnitType.Hero_Devouring_One, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Devouring_One, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Devouring_One, 1);
    fields.get("spaceProvided").set(UnitType.Hero_Devouring_One, 0);
    fields.get("buildScore").set(UnitType.Hero_Devouring_One, 0);
    fields.get("destroyScore").set(UnitType.Hero_Devouring_One, 100);
    fields.get("size").set(UnitType.Hero_Devouring_One, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Hero_Devouring_One, 1);
    fields.get("tileHeight").set(UnitType.Hero_Devouring_One, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Devouring_One, 8);
    fields.get("dimensionUp").set(UnitType.Hero_Devouring_One, 4);
    fields.get("dimensionRight").set(UnitType.Hero_Devouring_One, 7);
    fields.get("dimensionDown").set(UnitType.Hero_Devouring_One, 11);
    fields.get("width").set(UnitType.Hero_Devouring_One, 16);
    fields.get("height").set(UnitType.Hero_Devouring_One, 16);
    fields.get("seekRange").set(UnitType.Hero_Devouring_One, 96);
    fields.get("sightRange").set(UnitType.Hero_Devouring_One, 160);
    fields.get("groundWeapon").set(UnitType.Hero_Devouring_One, WeaponType.Claws_Devouring_One);
    fields.get("maxGroundHits").set(UnitType.Hero_Devouring_One, 1);
    fields.get("airWeapon").set(UnitType.Hero_Devouring_One, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Devouring_One, 0);
    fields.get("topSpeed").set(UnitType.Hero_Devouring_One, 4.2890625);
    fields.get("acceleration").set(UnitType.Hero_Devouring_One, 1);
    fields.get("haltDistance").set(UnitType.Hero_Devouring_One, 1);
    fields.get("turnRadius").set(UnitType.Hero_Devouring_One, 27);
    fields.get("canProduce").set(UnitType.Hero_Devouring_One, false);
    fields.get("canAttack").set(UnitType.Hero_Devouring_One, true);
    fields.get("canMove").set(UnitType.Hero_Devouring_One, true);
    fields.get("flyer").set(UnitType.Hero_Devouring_One, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Devouring_One, true);
    fields.get("spellcaster").set(UnitType.Hero_Devouring_One, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Devouring_One, false);
    fields.get("invincible").set(UnitType.Hero_Devouring_One, false);
    fields.get("organic").set(UnitType.Hero_Devouring_One, true);
    fields.get("mechanical").set(UnitType.Hero_Devouring_One, false);
    fields.get("robotic").set(UnitType.Hero_Devouring_One, false);
    fields.get("detector").set(UnitType.Hero_Devouring_One, false);
    fields.get("resourceContainer").set(UnitType.Hero_Devouring_One, false);
    fields.get("resourceDepot").set(UnitType.Hero_Devouring_One, false);
    fields.get("refinery").set(UnitType.Hero_Devouring_One, false);
    fields.get("worker").set(UnitType.Hero_Devouring_One, false);
    fields.get("requiresPsi").set(UnitType.Hero_Devouring_One, false);
    fields.get("requiresCreep").set(UnitType.Hero_Devouring_One, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Devouring_One, true);
    fields.get("burrowable").set(UnitType.Hero_Devouring_One, true);
    fields.get("cloakable").set(UnitType.Hero_Devouring_One, false);
    fields.get("building").set(UnitType.Hero_Devouring_One, false);
    fields.get("addon").set(UnitType.Hero_Devouring_One, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Devouring_One, false);
    fields.get("neutral").set(UnitType.Hero_Devouring_One, false);
    fields.get("hero").set(UnitType.Hero_Devouring_One, true);
    fields.get("powerup").set(UnitType.Hero_Devouring_One, false);
    fields.get("beacon").set(UnitType.Hero_Devouring_One, false);
    fields.get("flagBeacon").set(UnitType.Hero_Devouring_One, false);
    fields.get("specialBuilding").set(UnitType.Hero_Devouring_One, false);
    fields.get("spell").set(UnitType.Hero_Devouring_One, false);
    fields.get("producesCreep").set(UnitType.Hero_Devouring_One, false);
    fields.get("producesLarva").set(UnitType.Hero_Devouring_One, false);
    fields.get("mineralField").set(UnitType.Hero_Devouring_One, false);
    fields.get("critter").set(UnitType.Hero_Devouring_One, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Devouring_One, false);
    fields.get("researchesWhat").set(UnitType.Hero_Devouring_One, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Devouring_One, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Kukulza_Mutalisk() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Kukulza_Mutalisk, 55);
    fields.get("race").set(UnitType.Hero_Kukulza_Mutalisk, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Kukulza_Mutalisk, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Kukulza_Mutalisk, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Kukulza_Mutalisk, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Kukulza_Mutalisk, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Kukulza_Mutalisk, TechType.None);
    fields.get("abilities").set(UnitType.Hero_Kukulza_Mutalisk, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Kukulza_Mutalisk,
            new ArrayList(
                Arrays.asList(UpgradeType.Zerg_Flyer_Attacks, UpgradeType.Zerg_Flyer_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Hero_Kukulza_Mutalisk, UpgradeType.Zerg_Flyer_Carapace);
    fields.get("maxHitPoints").set(UnitType.Hero_Kukulza_Mutalisk, 300);
    fields.get("maxShields").set(UnitType.Hero_Kukulza_Mutalisk, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Kukulza_Mutalisk, 0);
    fields.get("armor").set(UnitType.Hero_Kukulza_Mutalisk, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Kukulza_Mutalisk, 200);
    fields.get("gasPrice").set(UnitType.Hero_Kukulza_Mutalisk, 200);
    fields.get("buildTime").set(UnitType.Hero_Kukulza_Mutalisk, 1200);
    fields.get("supplyRequired").set(UnitType.Hero_Kukulza_Mutalisk, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Kukulza_Mutalisk, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Kukulza_Mutalisk, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Kukulza_Mutalisk, 0);
    fields.get("buildScore").set(UnitType.Hero_Kukulza_Mutalisk, 0);
    fields.get("destroyScore").set(UnitType.Hero_Kukulza_Mutalisk, 1200);
    fields.get("size").set(UnitType.Hero_Kukulza_Mutalisk, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Hero_Kukulza_Mutalisk, 2);
    fields.get("tileHeight").set(UnitType.Hero_Kukulza_Mutalisk, 2);
    fields.get("dimensionLeft").set(UnitType.Hero_Kukulza_Mutalisk, 22);
    fields.get("dimensionUp").set(UnitType.Hero_Kukulza_Mutalisk, 22);
    fields.get("dimensionRight").set(UnitType.Hero_Kukulza_Mutalisk, 21);
    fields.get("dimensionDown").set(UnitType.Hero_Kukulza_Mutalisk, 21);
    fields.get("width").set(UnitType.Hero_Kukulza_Mutalisk, 44);
    fields.get("height").set(UnitType.Hero_Kukulza_Mutalisk, 44);
    fields.get("seekRange").set(UnitType.Hero_Kukulza_Mutalisk, 96);
    fields.get("sightRange").set(UnitType.Hero_Kukulza_Mutalisk, 224);
    fields.get("groundWeapon").set(UnitType.Hero_Kukulza_Mutalisk, WeaponType.Glave_Wurm_Kukulza);
    fields.get("maxGroundHits").set(UnitType.Hero_Kukulza_Mutalisk, 1);
    fields.get("airWeapon").set(UnitType.Hero_Kukulza_Mutalisk, WeaponType.Glave_Wurm_Kukulza);
    fields.get("maxAirHits").set(UnitType.Hero_Kukulza_Mutalisk, 1);
    fields.get("topSpeed").set(UnitType.Hero_Kukulza_Mutalisk, 5.2109375);
    fields.get("acceleration").set(UnitType.Hero_Kukulza_Mutalisk, 67);
    fields.get("haltDistance").set(UnitType.Hero_Kukulza_Mutalisk, 21745);
    fields.get("turnRadius").set(UnitType.Hero_Kukulza_Mutalisk, 40);
    fields.get("canProduce").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("canAttack").set(UnitType.Hero_Kukulza_Mutalisk, true);
    fields.get("canMove").set(UnitType.Hero_Kukulza_Mutalisk, true);
    fields.get("flyer").set(UnitType.Hero_Kukulza_Mutalisk, true);
    fields.get("regeneratesHP").set(UnitType.Hero_Kukulza_Mutalisk, true);
    fields.get("spellcaster").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("invincible").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("organic").set(UnitType.Hero_Kukulza_Mutalisk, true);
    fields.get("mechanical").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("robotic").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("detector").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("resourceContainer").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("resourceDepot").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("refinery").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("worker").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("requiresPsi").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("requiresCreep").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("burrowable").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("cloakable").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("building").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("addon").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("neutral").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("hero").set(UnitType.Hero_Kukulza_Mutalisk, true);
    fields.get("powerup").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("beacon").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("flagBeacon").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("specialBuilding").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("spell").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("producesCreep").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("producesLarva").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("mineralField").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("critter").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Kukulza_Mutalisk, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Hero_Kukulza_Mutalisk, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Kukulza_Mutalisk, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Kukulza_Guardian() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Kukulza_Guardian, 56);
    fields.get("race").set(UnitType.Hero_Kukulza_Guardian, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Kukulza_Guardian, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Kukulza_Guardian, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Kukulza_Guardian, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Kukulza_Guardian, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Kukulza_Guardian, TechType.None);
    fields.get("abilities").set(UnitType.Hero_Kukulza_Guardian, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Kukulza_Guardian,
            new ArrayList(
                Arrays.asList(UpgradeType.Zerg_Flyer_Attacks, UpgradeType.Zerg_Flyer_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Hero_Kukulza_Guardian, UpgradeType.Zerg_Flyer_Carapace);
    fields.get("maxHitPoints").set(UnitType.Hero_Kukulza_Guardian, 400);
    fields.get("maxShields").set(UnitType.Hero_Kukulza_Guardian, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Kukulza_Guardian, 0);
    fields.get("armor").set(UnitType.Hero_Kukulza_Guardian, 4);
    fields.get("mineralPrice").set(UnitType.Hero_Kukulza_Guardian, 100);
    fields.get("gasPrice").set(UnitType.Hero_Kukulza_Guardian, 200);
    fields.get("buildTime").set(UnitType.Hero_Kukulza_Guardian, 1200);
    fields.get("supplyRequired").set(UnitType.Hero_Kukulza_Guardian, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Kukulza_Guardian, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Kukulza_Guardian, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Kukulza_Guardian, 0);
    fields.get("buildScore").set(UnitType.Hero_Kukulza_Guardian, 0);
    fields.get("destroyScore").set(UnitType.Hero_Kukulza_Guardian, 2200);
    fields.get("size").set(UnitType.Hero_Kukulza_Guardian, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Kukulza_Guardian, 2);
    fields.get("tileHeight").set(UnitType.Hero_Kukulza_Guardian, 2);
    fields.get("dimensionLeft").set(UnitType.Hero_Kukulza_Guardian, 22);
    fields.get("dimensionUp").set(UnitType.Hero_Kukulza_Guardian, 22);
    fields.get("dimensionRight").set(UnitType.Hero_Kukulza_Guardian, 21);
    fields.get("dimensionDown").set(UnitType.Hero_Kukulza_Guardian, 21);
    fields.get("width").set(UnitType.Hero_Kukulza_Guardian, 44);
    fields.get("height").set(UnitType.Hero_Kukulza_Guardian, 44);
    fields.get("seekRange").set(UnitType.Hero_Kukulza_Guardian, 0);
    fields.get("sightRange").set(UnitType.Hero_Kukulza_Guardian, 352);
    fields.get("groundWeapon").set(UnitType.Hero_Kukulza_Guardian, WeaponType.Acid_Spore_Kukulza);
    fields.get("maxGroundHits").set(UnitType.Hero_Kukulza_Guardian, 1);
    fields.get("airWeapon").set(UnitType.Hero_Kukulza_Guardian, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Kukulza_Guardian, 0);
    fields.get("topSpeed").set(UnitType.Hero_Kukulza_Guardian, 1.953125);
    fields.get("acceleration").set(UnitType.Hero_Kukulza_Guardian, 27);
    fields.get("haltDistance").set(UnitType.Hero_Kukulza_Guardian, 7585);
    fields.get("turnRadius").set(UnitType.Hero_Kukulza_Guardian, 20);
    fields.get("canProduce").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("canAttack").set(UnitType.Hero_Kukulza_Guardian, true);
    fields.get("canMove").set(UnitType.Hero_Kukulza_Guardian, true);
    fields.get("flyer").set(UnitType.Hero_Kukulza_Guardian, true);
    fields.get("regeneratesHP").set(UnitType.Hero_Kukulza_Guardian, true);
    fields.get("spellcaster").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("invincible").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("organic").set(UnitType.Hero_Kukulza_Guardian, true);
    fields.get("mechanical").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("robotic").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("detector").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("resourceContainer").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("resourceDepot").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("refinery").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("worker").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("requiresPsi").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("requiresCreep").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("burrowable").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("cloakable").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("building").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("addon").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("neutral").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("hero").set(UnitType.Hero_Kukulza_Guardian, true);
    fields.get("powerup").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("beacon").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("flagBeacon").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("specialBuilding").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("spell").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("producesCreep").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("producesLarva").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("mineralField").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("critter").set(UnitType.Hero_Kukulza_Guardian, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Kukulza_Guardian, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Hero_Kukulza_Guardian, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Kukulza_Guardian, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Yggdrasill() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Yggdrasill, 57);
    fields.get("race").set(UnitType.Hero_Yggdrasill, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Yggdrasill, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Yggdrasill, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Yggdrasill, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Yggdrasill, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Yggdrasill, TechType.None);
    fields.get("abilities").set(UnitType.Hero_Yggdrasill, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Yggdrasill,
            new ArrayList(Arrays.asList(UpgradeType.Zerg_Flyer_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Hero_Yggdrasill, UpgradeType.Zerg_Flyer_Carapace);
    fields.get("maxHitPoints").set(UnitType.Hero_Yggdrasill, 1000);
    fields.get("maxShields").set(UnitType.Hero_Yggdrasill, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Yggdrasill, 0);
    fields.get("armor").set(UnitType.Hero_Yggdrasill, 4);
    fields.get("mineralPrice").set(UnitType.Hero_Yggdrasill, 200);
    fields.get("gasPrice").set(UnitType.Hero_Yggdrasill, 0);
    fields.get("buildTime").set(UnitType.Hero_Yggdrasill, 1200);
    fields.get("supplyRequired").set(UnitType.Hero_Yggdrasill, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Yggdrasill, 60);
    fields.get("spaceRequired").set(UnitType.Hero_Yggdrasill, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Yggdrasill, 8);
    fields.get("buildScore").set(UnitType.Hero_Yggdrasill, 0);
    fields.get("destroyScore").set(UnitType.Hero_Yggdrasill, 400);
    fields.get("size").set(UnitType.Hero_Yggdrasill, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Yggdrasill, 2);
    fields.get("tileHeight").set(UnitType.Hero_Yggdrasill, 2);
    fields.get("dimensionLeft").set(UnitType.Hero_Yggdrasill, 25);
    fields.get("dimensionUp").set(UnitType.Hero_Yggdrasill, 25);
    fields.get("dimensionRight").set(UnitType.Hero_Yggdrasill, 24);
    fields.get("dimensionDown").set(UnitType.Hero_Yggdrasill, 24);
    fields.get("width").set(UnitType.Hero_Yggdrasill, 50);
    fields.get("height").set(UnitType.Hero_Yggdrasill, 50);
    fields.get("seekRange").set(UnitType.Hero_Yggdrasill, 0);
    fields.get("sightRange").set(UnitType.Hero_Yggdrasill, 352);
    fields.get("groundWeapon").set(UnitType.Hero_Yggdrasill, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Hero_Yggdrasill, 0);
    fields.get("airWeapon").set(UnitType.Hero_Yggdrasill, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Yggdrasill, 0);
    fields.get("topSpeed").set(UnitType.Hero_Yggdrasill, 0.6484375);
    fields.get("acceleration").set(UnitType.Hero_Yggdrasill, 27);
    fields.get("haltDistance").set(UnitType.Hero_Yggdrasill, 840);
    fields.get("turnRadius").set(UnitType.Hero_Yggdrasill, 20);
    fields.get("canProduce").set(UnitType.Hero_Yggdrasill, false);
    fields.get("canAttack").set(UnitType.Hero_Yggdrasill, false);
    fields.get("canMove").set(UnitType.Hero_Yggdrasill, true);
    fields.get("flyer").set(UnitType.Hero_Yggdrasill, true);
    fields.get("regeneratesHP").set(UnitType.Hero_Yggdrasill, true);
    fields.get("spellcaster").set(UnitType.Hero_Yggdrasill, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Yggdrasill, false);
    fields.get("invincible").set(UnitType.Hero_Yggdrasill, false);
    fields.get("organic").set(UnitType.Hero_Yggdrasill, true);
    fields.get("mechanical").set(UnitType.Hero_Yggdrasill, false);
    fields.get("robotic").set(UnitType.Hero_Yggdrasill, false);
    fields.get("detector").set(UnitType.Hero_Yggdrasill, true);
    fields.get("resourceContainer").set(UnitType.Hero_Yggdrasill, false);
    fields.get("resourceDepot").set(UnitType.Hero_Yggdrasill, false);
    fields.get("refinery").set(UnitType.Hero_Yggdrasill, false);
    fields.get("worker").set(UnitType.Hero_Yggdrasill, false);
    fields.get("requiresPsi").set(UnitType.Hero_Yggdrasill, false);
    fields.get("requiresCreep").set(UnitType.Hero_Yggdrasill, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Yggdrasill, false);
    fields.get("burrowable").set(UnitType.Hero_Yggdrasill, false);
    fields.get("cloakable").set(UnitType.Hero_Yggdrasill, false);
    fields.get("building").set(UnitType.Hero_Yggdrasill, false);
    fields.get("addon").set(UnitType.Hero_Yggdrasill, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Yggdrasill, false);
    fields.get("neutral").set(UnitType.Hero_Yggdrasill, false);
    fields.get("hero").set(UnitType.Hero_Yggdrasill, true);
    fields.get("powerup").set(UnitType.Hero_Yggdrasill, false);
    fields.get("beacon").set(UnitType.Hero_Yggdrasill, false);
    fields.get("flagBeacon").set(UnitType.Hero_Yggdrasill, false);
    fields.get("specialBuilding").set(UnitType.Hero_Yggdrasill, false);
    fields.get("spell").set(UnitType.Hero_Yggdrasill, false);
    fields.get("producesCreep").set(UnitType.Hero_Yggdrasill, false);
    fields.get("producesLarva").set(UnitType.Hero_Yggdrasill, false);
    fields.get("mineralField").set(UnitType.Hero_Yggdrasill, false);
    fields.get("critter").set(UnitType.Hero_Yggdrasill, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Yggdrasill, false);
    fields.get("researchesWhat").set(UnitType.Hero_Yggdrasill, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Yggdrasill, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Valkyrie() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Valkyrie, 58);
    fields.get("race").set(UnitType.Terran_Valkyrie, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Valkyrie, new UnitType.WhatBuilds(UnitType.Terran_Starport, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Valkyrie, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Terran_Valkyrie,
            toMap(
                UnitType.Terran_Control_Tower,
                1,
                UnitType.Terran_Armory,
                1,
                UnitType.Terran_Starport,
                1));
    fields.get("requiredTech").set(UnitType.Terran_Valkyrie, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Valkyrie, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Valkyrie, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Terran_Valkyrie,
            new ArrayList(
                Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Terran_Ship_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Terran_Valkyrie, UpgradeType.Terran_Ship_Plating);
    fields.get("maxHitPoints").set(UnitType.Terran_Valkyrie, 200);
    fields.get("maxShields").set(UnitType.Terran_Valkyrie, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Valkyrie, 0);
    fields.get("armor").set(UnitType.Terran_Valkyrie, 2);
    fields.get("mineralPrice").set(UnitType.Terran_Valkyrie, 250);
    fields.get("gasPrice").set(UnitType.Terran_Valkyrie, 125);
    fields.get("buildTime").set(UnitType.Terran_Valkyrie, 750);
    fields.get("supplyRequired").set(UnitType.Terran_Valkyrie, 6);
    fields.get("supplyProvided").set(UnitType.Terran_Valkyrie, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Valkyrie, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Valkyrie, 0);
    fields.get("buildScore").set(UnitType.Terran_Valkyrie, 400);
    fields.get("destroyScore").set(UnitType.Terran_Valkyrie, 800);
    fields.get("size").set(UnitType.Terran_Valkyrie, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Valkyrie, 2);
    fields.get("tileHeight").set(UnitType.Terran_Valkyrie, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Valkyrie, 24);
    fields.get("dimensionUp").set(UnitType.Terran_Valkyrie, 16);
    fields.get("dimensionRight").set(UnitType.Terran_Valkyrie, 24);
    fields.get("dimensionDown").set(UnitType.Terran_Valkyrie, 20);
    fields.get("width").set(UnitType.Terran_Valkyrie, 49);
    fields.get("height").set(UnitType.Terran_Valkyrie, 37);
    fields.get("seekRange").set(UnitType.Terran_Valkyrie, 0);
    fields.get("sightRange").set(UnitType.Terran_Valkyrie, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Valkyrie, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Valkyrie, 0);
    fields.get("airWeapon").set(UnitType.Terran_Valkyrie, WeaponType.Halo_Rockets);
    fields.get("maxAirHits").set(UnitType.Terran_Valkyrie, 4);
    fields.get("topSpeed").set(UnitType.Terran_Valkyrie, 5.15625);
    fields.get("acceleration").set(UnitType.Terran_Valkyrie, 65);
    fields.get("haltDistance").set(UnitType.Terran_Valkyrie, 21901);
    fields.get("turnRadius").set(UnitType.Terran_Valkyrie, 30);
    fields.get("canProduce").set(UnitType.Terran_Valkyrie, false);
    fields.get("canAttack").set(UnitType.Terran_Valkyrie, true);
    fields.get("canMove").set(UnitType.Terran_Valkyrie, true);
    fields.get("flyer").set(UnitType.Terran_Valkyrie, true);
    fields.get("regeneratesHP").set(UnitType.Terran_Valkyrie, false);
    fields.get("spellcaster").set(UnitType.Terran_Valkyrie, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Valkyrie, false);
    fields.get("invincible").set(UnitType.Terran_Valkyrie, false);
    fields.get("organic").set(UnitType.Terran_Valkyrie, false);
    fields.get("mechanical").set(UnitType.Terran_Valkyrie, true);
    fields.get("robotic").set(UnitType.Terran_Valkyrie, false);
    fields.get("detector").set(UnitType.Terran_Valkyrie, false);
    fields.get("resourceContainer").set(UnitType.Terran_Valkyrie, false);
    fields.get("resourceDepot").set(UnitType.Terran_Valkyrie, false);
    fields.get("refinery").set(UnitType.Terran_Valkyrie, false);
    fields.get("worker").set(UnitType.Terran_Valkyrie, false);
    fields.get("requiresPsi").set(UnitType.Terran_Valkyrie, false);
    fields.get("requiresCreep").set(UnitType.Terran_Valkyrie, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Valkyrie, false);
    fields.get("burrowable").set(UnitType.Terran_Valkyrie, false);
    fields.get("cloakable").set(UnitType.Terran_Valkyrie, false);
    fields.get("building").set(UnitType.Terran_Valkyrie, false);
    fields.get("addon").set(UnitType.Terran_Valkyrie, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Valkyrie, false);
    fields.get("neutral").set(UnitType.Terran_Valkyrie, false);
    fields.get("hero").set(UnitType.Terran_Valkyrie, false);
    fields.get("powerup").set(UnitType.Terran_Valkyrie, false);
    fields.get("beacon").set(UnitType.Terran_Valkyrie, false);
    fields.get("flagBeacon").set(UnitType.Terran_Valkyrie, false);
    fields.get("specialBuilding").set(UnitType.Terran_Valkyrie, false);
    fields.get("spell").set(UnitType.Terran_Valkyrie, false);
    fields.get("producesCreep").set(UnitType.Terran_Valkyrie, false);
    fields.get("producesLarva").set(UnitType.Terran_Valkyrie, false);
    fields.get("mineralField").set(UnitType.Terran_Valkyrie, false);
    fields.get("critter").set(UnitType.Terran_Valkyrie, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Valkyrie, false);
    fields.get("researchesWhat").set(UnitType.Terran_Valkyrie, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Valkyrie, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Cocoon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Cocoon, 59);
    fields.get("race").set(UnitType.Zerg_Cocoon, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Cocoon, new UnitType.WhatBuilds(UnitType.Zerg_Mutalisk, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Cocoon, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Zerg_Cocoon, toMap(UnitType.Zerg_Mutalisk, 1, UnitType.Zerg_Greater_Spire, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Cocoon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Cocoon, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Cocoon, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Zerg_Cocoon, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Cocoon, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Cocoon, 200);
    fields.get("maxShields").set(UnitType.Zerg_Cocoon, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Cocoon, 0);
    fields.get("armor").set(UnitType.Zerg_Cocoon, 0);
    fields.get("mineralPrice").set(UnitType.Zerg_Cocoon, 1);
    fields.get("gasPrice").set(UnitType.Zerg_Cocoon, 1);
    fields.get("buildTime").set(UnitType.Zerg_Cocoon, 1);
    fields.get("supplyRequired").set(UnitType.Zerg_Cocoon, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Cocoon, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Cocoon, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Cocoon, 0);
    fields.get("buildScore").set(UnitType.Zerg_Cocoon, 0);
    fields.get("destroyScore").set(UnitType.Zerg_Cocoon, 1100);
    fields.get("size").set(UnitType.Zerg_Cocoon, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Cocoon, 1);
    fields.get("tileHeight").set(UnitType.Zerg_Cocoon, 1);
    fields.get("dimensionLeft").set(UnitType.Zerg_Cocoon, 16);
    fields.get("dimensionUp").set(UnitType.Zerg_Cocoon, 16);
    fields.get("dimensionRight").set(UnitType.Zerg_Cocoon, 15);
    fields.get("dimensionDown").set(UnitType.Zerg_Cocoon, 15);
    fields.get("width").set(UnitType.Zerg_Cocoon, 32);
    fields.get("height").set(UnitType.Zerg_Cocoon, 32);
    fields.get("seekRange").set(UnitType.Zerg_Cocoon, 0);
    fields.get("sightRange").set(UnitType.Zerg_Cocoon, 128);
    fields.get("groundWeapon").set(UnitType.Zerg_Cocoon, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Cocoon, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Cocoon, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Cocoon, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Cocoon, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Cocoon, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Cocoon, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Cocoon, 0);
    fields.get("canProduce").set(UnitType.Zerg_Cocoon, false);
    fields.get("canAttack").set(UnitType.Zerg_Cocoon, false);
    fields.get("canMove").set(UnitType.Zerg_Cocoon, false);
    fields.get("flyer").set(UnitType.Zerg_Cocoon, true);
    fields.get("regeneratesHP").set(UnitType.Zerg_Cocoon, false);
    fields.get("spellcaster").set(UnitType.Zerg_Cocoon, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Cocoon, false);
    fields.get("invincible").set(UnitType.Zerg_Cocoon, false);
    fields.get("organic").set(UnitType.Zerg_Cocoon, true);
    fields.get("mechanical").set(UnitType.Zerg_Cocoon, false);
    fields.get("robotic").set(UnitType.Zerg_Cocoon, false);
    fields.get("detector").set(UnitType.Zerg_Cocoon, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Cocoon, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Cocoon, false);
    fields.get("refinery").set(UnitType.Zerg_Cocoon, false);
    fields.get("worker").set(UnitType.Zerg_Cocoon, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Cocoon, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Cocoon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Cocoon, false);
    fields.get("burrowable").set(UnitType.Zerg_Cocoon, false);
    fields.get("cloakable").set(UnitType.Zerg_Cocoon, false);
    fields.get("building").set(UnitType.Zerg_Cocoon, false);
    fields.get("addon").set(UnitType.Zerg_Cocoon, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Cocoon, false);
    fields.get("neutral").set(UnitType.Zerg_Cocoon, false);
    fields.get("hero").set(UnitType.Zerg_Cocoon, false);
    fields.get("powerup").set(UnitType.Zerg_Cocoon, false);
    fields.get("beacon").set(UnitType.Zerg_Cocoon, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Cocoon, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Cocoon, false);
    fields.get("spell").set(UnitType.Zerg_Cocoon, false);
    fields.get("producesCreep").set(UnitType.Zerg_Cocoon, false);
    fields.get("producesLarva").set(UnitType.Zerg_Cocoon, false);
    fields.get("mineralField").set(UnitType.Zerg_Cocoon, false);
    fields.get("critter").set(UnitType.Zerg_Cocoon, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Cocoon, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Cocoon, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Cocoon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Corsair() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Corsair, 60);
    fields.get("race").set(UnitType.Protoss_Corsair, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Corsair, new UnitType.WhatBuilds(UnitType.Protoss_Stargate, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Corsair, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Protoss_Corsair, toMap(UnitType.Protoss_Stargate, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Corsair, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Corsair, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Protoss_Corsair, new ArrayList(Arrays.asList(TechType.Disruption_Web)));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Corsair,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Argus_Jewel,
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Air_Weapons,
                    UpgradeType.Protoss_Air_Armor)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Corsair, UpgradeType.Protoss_Air_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_Corsair, 100);
    fields.get("maxShields").set(UnitType.Protoss_Corsair, 80);
    fields.get("maxEnergy").set(UnitType.Protoss_Corsair, 200);
    fields.get("armor").set(UnitType.Protoss_Corsair, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Corsair, 150);
    fields.get("gasPrice").set(UnitType.Protoss_Corsair, 100);
    fields.get("buildTime").set(UnitType.Protoss_Corsair, 600);
    fields.get("supplyRequired").set(UnitType.Protoss_Corsair, 4);
    fields.get("supplyProvided").set(UnitType.Protoss_Corsair, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Corsair, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Corsair, 0);
    fields.get("buildScore").set(UnitType.Protoss_Corsair, 350);
    fields.get("destroyScore").set(UnitType.Protoss_Corsair, 700);
    fields.get("size").set(UnitType.Protoss_Corsair, UnitSizeType.Medium);
    fields.get("tileWidth").set(UnitType.Protoss_Corsair, 1);
    fields.get("tileHeight").set(UnitType.Protoss_Corsair, 1);
    fields.get("dimensionLeft").set(UnitType.Protoss_Corsair, 18);
    fields.get("dimensionUp").set(UnitType.Protoss_Corsair, 16);
    fields.get("dimensionRight").set(UnitType.Protoss_Corsair, 17);
    fields.get("dimensionDown").set(UnitType.Protoss_Corsair, 15);
    fields.get("width").set(UnitType.Protoss_Corsair, 36);
    fields.get("height").set(UnitType.Protoss_Corsair, 32);
    fields.get("seekRange").set(UnitType.Protoss_Corsair, 288);
    fields.get("sightRange").set(UnitType.Protoss_Corsair, 288);
    fields.get("groundWeapon").set(UnitType.Protoss_Corsair, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Corsair, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Corsair, WeaponType.Neutron_Flare);
    fields.get("maxAirHits").set(UnitType.Protoss_Corsair, 1);
    fields.get("topSpeed").set(UnitType.Protoss_Corsair, 5.2109375);
    fields.get("acceleration").set(UnitType.Protoss_Corsair, 67);
    fields.get("haltDistance").set(UnitType.Protoss_Corsair, 17067);
    fields.get("turnRadius").set(UnitType.Protoss_Corsair, 30);
    fields.get("canProduce").set(UnitType.Protoss_Corsair, false);
    fields.get("canAttack").set(UnitType.Protoss_Corsair, true);
    fields.get("canMove").set(UnitType.Protoss_Corsair, true);
    fields.get("flyer").set(UnitType.Protoss_Corsair, true);
    fields.get("regeneratesHP").set(UnitType.Protoss_Corsair, false);
    fields.get("spellcaster").set(UnitType.Protoss_Corsair, true);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Corsair, false);
    fields.get("invincible").set(UnitType.Protoss_Corsair, false);
    fields.get("organic").set(UnitType.Protoss_Corsair, false);
    fields.get("mechanical").set(UnitType.Protoss_Corsair, true);
    fields.get("robotic").set(UnitType.Protoss_Corsair, false);
    fields.get("detector").set(UnitType.Protoss_Corsair, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Corsair, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Corsair, false);
    fields.get("refinery").set(UnitType.Protoss_Corsair, false);
    fields.get("worker").set(UnitType.Protoss_Corsair, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Corsair, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Corsair, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Corsair, false);
    fields.get("burrowable").set(UnitType.Protoss_Corsair, false);
    fields.get("cloakable").set(UnitType.Protoss_Corsair, false);
    fields.get("building").set(UnitType.Protoss_Corsair, false);
    fields.get("addon").set(UnitType.Protoss_Corsair, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Corsair, false);
    fields.get("neutral").set(UnitType.Protoss_Corsair, false);
    fields.get("hero").set(UnitType.Protoss_Corsair, false);
    fields.get("powerup").set(UnitType.Protoss_Corsair, false);
    fields.get("beacon").set(UnitType.Protoss_Corsair, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Corsair, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Corsair, false);
    fields.get("spell").set(UnitType.Protoss_Corsair, false);
    fields.get("producesCreep").set(UnitType.Protoss_Corsair, false);
    fields.get("producesLarva").set(UnitType.Protoss_Corsair, false);
    fields.get("mineralField").set(UnitType.Protoss_Corsair, false);
    fields.get("critter").set(UnitType.Protoss_Corsair, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Corsair, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Corsair, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Corsair, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Dark_Templar() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Dark_Templar, 61);
    fields.get("race").set(UnitType.Protoss_Dark_Templar, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Dark_Templar, new UnitType.WhatBuilds(UnitType.Protoss_Gateway, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Protoss_Dark_Templar,
            new ArrayList(Arrays.asList(UnitType.Protoss_Dark_Archon)));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Dark_Templar,
            toMap(UnitType.Protoss_Templar_Archives, 1, UnitType.Protoss_Gateway, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Dark_Templar, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Dark_Templar, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Protoss_Dark_Templar, new ArrayList(Arrays.asList(TechType.Dark_Archon_Meld)));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Dark_Templar,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Ground_Weapons,
                    UpgradeType.Protoss_Ground_Armor)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Dark_Templar, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_Dark_Templar, 80);
    fields.get("maxShields").set(UnitType.Protoss_Dark_Templar, 40);
    fields.get("maxEnergy").set(UnitType.Protoss_Dark_Templar, 0);
    fields.get("armor").set(UnitType.Protoss_Dark_Templar, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Dark_Templar, 125);
    fields.get("gasPrice").set(UnitType.Protoss_Dark_Templar, 100);
    fields.get("buildTime").set(UnitType.Protoss_Dark_Templar, 750);
    fields.get("supplyRequired").set(UnitType.Protoss_Dark_Templar, 4);
    fields.get("supplyProvided").set(UnitType.Protoss_Dark_Templar, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Dark_Templar, 2);
    fields.get("spaceProvided").set(UnitType.Protoss_Dark_Templar, 0);
    fields.get("buildScore").set(UnitType.Protoss_Dark_Templar, 325);
    fields.get("destroyScore").set(UnitType.Protoss_Dark_Templar, 650);
    fields.get("size").set(UnitType.Protoss_Dark_Templar, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Protoss_Dark_Templar, 1);
    fields.get("tileHeight").set(UnitType.Protoss_Dark_Templar, 1);
    fields.get("dimensionLeft").set(UnitType.Protoss_Dark_Templar, 12);
    fields.get("dimensionUp").set(UnitType.Protoss_Dark_Templar, 6);
    fields.get("dimensionRight").set(UnitType.Protoss_Dark_Templar, 11);
    fields.get("dimensionDown").set(UnitType.Protoss_Dark_Templar, 19);
    fields.get("width").set(UnitType.Protoss_Dark_Templar, 24);
    fields.get("height").set(UnitType.Protoss_Dark_Templar, 26);
    fields.get("seekRange").set(UnitType.Protoss_Dark_Templar, 96);
    fields.get("sightRange").set(UnitType.Protoss_Dark_Templar, 224);
    fields.get("groundWeapon").set(UnitType.Protoss_Dark_Templar, WeaponType.Warp_Blades);
    fields.get("maxGroundHits").set(UnitType.Protoss_Dark_Templar, 1);
    fields.get("airWeapon").set(UnitType.Protoss_Dark_Templar, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Dark_Templar, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Dark_Templar, 3.84375);
    fields.get("acceleration").set(UnitType.Protoss_Dark_Templar, 27);
    fields.get("haltDistance").set(UnitType.Protoss_Dark_Templar, 13474);
    fields.get("turnRadius").set(UnitType.Protoss_Dark_Templar, 40);
    fields.get("canProduce").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("canAttack").set(UnitType.Protoss_Dark_Templar, true);
    fields.get("canMove").set(UnitType.Protoss_Dark_Templar, true);
    fields.get("flyer").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("spellcaster").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Dark_Templar, true);
    fields.get("invincible").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("organic").set(UnitType.Protoss_Dark_Templar, true);
    fields.get("mechanical").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("robotic").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("detector").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("refinery").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("worker").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("burrowable").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("cloakable").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("building").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("addon").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("neutral").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("hero").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("powerup").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("beacon").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("spell").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("producesCreep").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("producesLarva").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("mineralField").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("critter").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Dark_Templar, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Dark_Templar, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Dark_Templar, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Devourer() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Devourer, 62);
    fields.get("race").set(UnitType.Zerg_Devourer, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Devourer, new UnitType.WhatBuilds(UnitType.Zerg_Mutalisk, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Devourer, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Zerg_Devourer,
            toMap(UnitType.Zerg_Mutalisk, 1, UnitType.Zerg_Greater_Spire, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Devourer, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Devourer, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Devourer, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Zerg_Devourer,
            new ArrayList(
                Arrays.asList(UpgradeType.Zerg_Flyer_Attacks, UpgradeType.Zerg_Flyer_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Devourer, UpgradeType.Zerg_Flyer_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Devourer, 250);
    fields.get("maxShields").set(UnitType.Zerg_Devourer, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Devourer, 0);
    fields.get("armor").set(UnitType.Zerg_Devourer, 2);
    fields.get("mineralPrice").set(UnitType.Zerg_Devourer, 150);
    fields.get("gasPrice").set(UnitType.Zerg_Devourer, 50);
    fields.get("buildTime").set(UnitType.Zerg_Devourer, 600);
    fields.get("supplyRequired").set(UnitType.Zerg_Devourer, 4);
    fields.get("supplyProvided").set(UnitType.Zerg_Devourer, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Devourer, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Devourer, 0);
    fields.get("buildScore").set(UnitType.Zerg_Devourer, 550);
    fields.get("destroyScore").set(UnitType.Zerg_Devourer, 1100);
    fields.get("size").set(UnitType.Zerg_Devourer, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Devourer, 2);
    fields.get("tileHeight").set(UnitType.Zerg_Devourer, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Devourer, 22);
    fields.get("dimensionUp").set(UnitType.Zerg_Devourer, 22);
    fields.get("dimensionRight").set(UnitType.Zerg_Devourer, 21);
    fields.get("dimensionDown").set(UnitType.Zerg_Devourer, 21);
    fields.get("width").set(UnitType.Zerg_Devourer, 44);
    fields.get("height").set(UnitType.Zerg_Devourer, 44);
    fields.get("seekRange").set(UnitType.Zerg_Devourer, 224);
    fields.get("sightRange").set(UnitType.Zerg_Devourer, 320);
    fields.get("groundWeapon").set(UnitType.Zerg_Devourer, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Devourer, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Devourer, WeaponType.Corrosive_Acid);
    fields.get("maxAirHits").set(UnitType.Zerg_Devourer, 1);
    fields.get("topSpeed").set(UnitType.Zerg_Devourer, 3.90625);
    fields.get("acceleration").set(UnitType.Zerg_Devourer, 48);
    fields.get("haltDistance").set(UnitType.Zerg_Devourer, 17067);
    fields.get("turnRadius").set(UnitType.Zerg_Devourer, 30);
    fields.get("canProduce").set(UnitType.Zerg_Devourer, false);
    fields.get("canAttack").set(UnitType.Zerg_Devourer, true);
    fields.get("canMove").set(UnitType.Zerg_Devourer, true);
    fields.get("flyer").set(UnitType.Zerg_Devourer, true);
    fields.get("regeneratesHP").set(UnitType.Zerg_Devourer, true);
    fields.get("spellcaster").set(UnitType.Zerg_Devourer, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Devourer, false);
    fields.get("invincible").set(UnitType.Zerg_Devourer, false);
    fields.get("organic").set(UnitType.Zerg_Devourer, true);
    fields.get("mechanical").set(UnitType.Zerg_Devourer, false);
    fields.get("robotic").set(UnitType.Zerg_Devourer, false);
    fields.get("detector").set(UnitType.Zerg_Devourer, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Devourer, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Devourer, false);
    fields.get("refinery").set(UnitType.Zerg_Devourer, false);
    fields.get("worker").set(UnitType.Zerg_Devourer, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Devourer, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Devourer, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Devourer, false);
    fields.get("burrowable").set(UnitType.Zerg_Devourer, false);
    fields.get("cloakable").set(UnitType.Zerg_Devourer, false);
    fields.get("building").set(UnitType.Zerg_Devourer, false);
    fields.get("addon").set(UnitType.Zerg_Devourer, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Devourer, false);
    fields.get("neutral").set(UnitType.Zerg_Devourer, false);
    fields.get("hero").set(UnitType.Zerg_Devourer, false);
    fields.get("powerup").set(UnitType.Zerg_Devourer, false);
    fields.get("beacon").set(UnitType.Zerg_Devourer, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Devourer, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Devourer, false);
    fields.get("spell").set(UnitType.Zerg_Devourer, false);
    fields.get("producesCreep").set(UnitType.Zerg_Devourer, false);
    fields.get("producesLarva").set(UnitType.Zerg_Devourer, false);
    fields.get("mineralField").set(UnitType.Zerg_Devourer, false);
    fields.get("critter").set(UnitType.Zerg_Devourer, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Devourer, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Devourer, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Devourer, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Dark_Archon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Dark_Archon, 63);
    fields.get("race").set(UnitType.Protoss_Dark_Archon, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(
            UnitType.Protoss_Dark_Archon,
            new UnitType.WhatBuilds(UnitType.Protoss_Dark_Templar, 2));
    fields.get("buildsWhat").set(UnitType.Protoss_Dark_Archon, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Protoss_Dark_Archon, toMap(UnitType.Protoss_Dark_Templar, 2));
    fields.get("requiredTech").set(UnitType.Protoss_Dark_Archon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Dark_Archon, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Protoss_Dark_Archon,
            new ArrayList(
                Arrays.asList(TechType.Mind_Control, TechType.Feedback, TechType.Maelstrom)));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Dark_Archon,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Air_Weapons,
                    UpgradeType.Protoss_Air_Armor,
                    UpgradeType.Argus_Talisman)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Dark_Archon, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_Dark_Archon, 25);
    fields.get("maxShields").set(UnitType.Protoss_Dark_Archon, 200);
    fields.get("maxEnergy").set(UnitType.Protoss_Dark_Archon, 200);
    fields.get("armor").set(UnitType.Protoss_Dark_Archon, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Dark_Archon, 0);
    fields.get("gasPrice").set(UnitType.Protoss_Dark_Archon, 0);
    fields.get("buildTime").set(UnitType.Protoss_Dark_Archon, 300);
    fields.get("supplyRequired").set(UnitType.Protoss_Dark_Archon, 8);
    fields.get("supplyProvided").set(UnitType.Protoss_Dark_Archon, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Dark_Archon, 4);
    fields.get("spaceProvided").set(UnitType.Protoss_Dark_Archon, 0);
    fields.get("buildScore").set(UnitType.Protoss_Dark_Archon, 650);
    fields.get("destroyScore").set(UnitType.Protoss_Dark_Archon, 1300);
    fields.get("size").set(UnitType.Protoss_Dark_Archon, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Dark_Archon, 1);
    fields.get("tileHeight").set(UnitType.Protoss_Dark_Archon, 1);
    fields.get("dimensionLeft").set(UnitType.Protoss_Dark_Archon, 16);
    fields.get("dimensionUp").set(UnitType.Protoss_Dark_Archon, 16);
    fields.get("dimensionRight").set(UnitType.Protoss_Dark_Archon, 15);
    fields.get("dimensionDown").set(UnitType.Protoss_Dark_Archon, 15);
    fields.get("width").set(UnitType.Protoss_Dark_Archon, 32);
    fields.get("height").set(UnitType.Protoss_Dark_Archon, 32);
    fields.get("seekRange").set(UnitType.Protoss_Dark_Archon, 224);
    fields.get("sightRange").set(UnitType.Protoss_Dark_Archon, 320);
    fields.get("groundWeapon").set(UnitType.Protoss_Dark_Archon, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Dark_Archon, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Dark_Archon, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Dark_Archon, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Dark_Archon, 3.84375);
    fields.get("acceleration").set(UnitType.Protoss_Dark_Archon, 160);
    fields.get("haltDistance").set(UnitType.Protoss_Dark_Archon, 5120);
    fields.get("turnRadius").set(UnitType.Protoss_Dark_Archon, 40);
    fields.get("canProduce").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("canAttack").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("canMove").set(UnitType.Protoss_Dark_Archon, true);
    fields.get("flyer").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("spellcaster").set(UnitType.Protoss_Dark_Archon, true);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("invincible").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("organic").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("mechanical").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("robotic").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("detector").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("refinery").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("worker").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("burrowable").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("cloakable").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("building").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("addon").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("neutral").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("hero").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("powerup").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("beacon").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("spell").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("producesCreep").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("producesLarva").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("mineralField").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("critter").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Dark_Archon, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Dark_Archon, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Dark_Archon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Probe() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Probe, 64);
    fields.get("race").set(UnitType.Protoss_Probe, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Probe, new UnitType.WhatBuilds(UnitType.Protoss_Nexus, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Protoss_Probe,
            new ArrayList(
                Arrays.asList(
                    UnitType.Protoss_Nexus,
                    UnitType.Protoss_Arbiter_Tribunal,
                    UnitType.Protoss_Assimilator,
                    UnitType.Protoss_Citadel_of_Adun,
                    UnitType.Protoss_Cybernetics_Core,
                    UnitType.Protoss_Fleet_Beacon,
                    UnitType.Protoss_Forge,
                    UnitType.Protoss_Gateway,
                    UnitType.Protoss_Observatory,
                    UnitType.Protoss_Photon_Cannon,
                    UnitType.Protoss_Pylon,
                    UnitType.Protoss_Robotics_Facility,
                    UnitType.Protoss_Robotics_Support_Bay,
                    UnitType.Protoss_Shield_Battery,
                    UnitType.Protoss_Stargate,
                    UnitType.Protoss_Templar_Archives)));
    fields.get("requiredUnits").set(UnitType.Protoss_Probe, toMap(UnitType.Protoss_Nexus, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Probe, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Probe, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Probe, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Probe,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields, UpgradeType.Protoss_Ground_Armor)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Probe, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_Probe, 20);
    fields.get("maxShields").set(UnitType.Protoss_Probe, 20);
    fields.get("maxEnergy").set(UnitType.Protoss_Probe, 0);
    fields.get("armor").set(UnitType.Protoss_Probe, 0);
    fields.get("mineralPrice").set(UnitType.Protoss_Probe, 50);
    fields.get("gasPrice").set(UnitType.Protoss_Probe, 0);
    fields.get("buildTime").set(UnitType.Protoss_Probe, 300);
    fields.get("supplyRequired").set(UnitType.Protoss_Probe, 2);
    fields.get("supplyProvided").set(UnitType.Protoss_Probe, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Probe, 1);
    fields.get("spaceProvided").set(UnitType.Protoss_Probe, 0);
    fields.get("buildScore").set(UnitType.Protoss_Probe, 50);
    fields.get("destroyScore").set(UnitType.Protoss_Probe, 100);
    fields.get("size").set(UnitType.Protoss_Probe, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Protoss_Probe, 1);
    fields.get("tileHeight").set(UnitType.Protoss_Probe, 1);
    fields.get("dimensionLeft").set(UnitType.Protoss_Probe, 11);
    fields.get("dimensionUp").set(UnitType.Protoss_Probe, 11);
    fields.get("dimensionRight").set(UnitType.Protoss_Probe, 11);
    fields.get("dimensionDown").set(UnitType.Protoss_Probe, 11);
    fields.get("width").set(UnitType.Protoss_Probe, 23);
    fields.get("height").set(UnitType.Protoss_Probe, 23);
    fields.get("seekRange").set(UnitType.Protoss_Probe, 0);
    fields.get("sightRange").set(UnitType.Protoss_Probe, 256);
    fields.get("groundWeapon").set(UnitType.Protoss_Probe, WeaponType.Particle_Beam);
    fields.get("maxGroundHits").set(UnitType.Protoss_Probe, 1);
    fields.get("airWeapon").set(UnitType.Protoss_Probe, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Probe, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Probe, 3.84375);
    fields.get("acceleration").set(UnitType.Protoss_Probe, 67);
    fields.get("haltDistance").set(UnitType.Protoss_Probe, 12227);
    fields.get("turnRadius").set(UnitType.Protoss_Probe, 40);
    fields.get("canProduce").set(UnitType.Protoss_Probe, false);
    fields.get("canAttack").set(UnitType.Protoss_Probe, true);
    fields.get("canMove").set(UnitType.Protoss_Probe, true);
    fields.get("flyer").set(UnitType.Protoss_Probe, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Probe, false);
    fields.get("spellcaster").set(UnitType.Protoss_Probe, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Probe, false);
    fields.get("invincible").set(UnitType.Protoss_Probe, false);
    fields.get("organic").set(UnitType.Protoss_Probe, false);
    fields.get("mechanical").set(UnitType.Protoss_Probe, true);
    fields.get("robotic").set(UnitType.Protoss_Probe, true);
    fields.get("detector").set(UnitType.Protoss_Probe, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Probe, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Probe, false);
    fields.get("refinery").set(UnitType.Protoss_Probe, false);
    fields.get("worker").set(UnitType.Protoss_Probe, true);
    fields.get("requiresPsi").set(UnitType.Protoss_Probe, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Probe, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Probe, false);
    fields.get("burrowable").set(UnitType.Protoss_Probe, false);
    fields.get("cloakable").set(UnitType.Protoss_Probe, false);
    fields.get("building").set(UnitType.Protoss_Probe, false);
    fields.get("addon").set(UnitType.Protoss_Probe, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Probe, false);
    fields.get("neutral").set(UnitType.Protoss_Probe, false);
    fields.get("hero").set(UnitType.Protoss_Probe, false);
    fields.get("powerup").set(UnitType.Protoss_Probe, false);
    fields.get("beacon").set(UnitType.Protoss_Probe, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Probe, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Probe, false);
    fields.get("spell").set(UnitType.Protoss_Probe, false);
    fields.get("producesCreep").set(UnitType.Protoss_Probe, false);
    fields.get("producesLarva").set(UnitType.Protoss_Probe, false);
    fields.get("mineralField").set(UnitType.Protoss_Probe, false);
    fields.get("critter").set(UnitType.Protoss_Probe, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Probe, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Probe, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Probe, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Zealot() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Zealot, 65);
    fields.get("race").set(UnitType.Protoss_Zealot, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Zealot, new UnitType.WhatBuilds(UnitType.Protoss_Gateway, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Zealot, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Protoss_Zealot, toMap(UnitType.Protoss_Gateway, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Zealot, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Zealot, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Zealot, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Zealot,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Ground_Weapons,
                    UpgradeType.Protoss_Ground_Armor,
                    UpgradeType.Leg_Enhancements)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Zealot, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_Zealot, 100);
    fields.get("maxShields").set(UnitType.Protoss_Zealot, 60);
    fields.get("maxEnergy").set(UnitType.Protoss_Zealot, 0);
    fields.get("armor").set(UnitType.Protoss_Zealot, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Zealot, 100);
    fields.get("gasPrice").set(UnitType.Protoss_Zealot, 0);
    fields.get("buildTime").set(UnitType.Protoss_Zealot, 600);
    fields.get("supplyRequired").set(UnitType.Protoss_Zealot, 4);
    fields.get("supplyProvided").set(UnitType.Protoss_Zealot, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Zealot, 2);
    fields.get("spaceProvided").set(UnitType.Protoss_Zealot, 0);
    fields.get("buildScore").set(UnitType.Protoss_Zealot, 100);
    fields.get("destroyScore").set(UnitType.Protoss_Zealot, 200);
    fields.get("size").set(UnitType.Protoss_Zealot, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Protoss_Zealot, 1);
    fields.get("tileHeight").set(UnitType.Protoss_Zealot, 1);
    fields.get("dimensionLeft").set(UnitType.Protoss_Zealot, 11);
    fields.get("dimensionUp").set(UnitType.Protoss_Zealot, 5);
    fields.get("dimensionRight").set(UnitType.Protoss_Zealot, 11);
    fields.get("dimensionDown").set(UnitType.Protoss_Zealot, 13);
    fields.get("width").set(UnitType.Protoss_Zealot, 23);
    fields.get("height").set(UnitType.Protoss_Zealot, 19);
    fields.get("seekRange").set(UnitType.Protoss_Zealot, 96);
    fields.get("sightRange").set(UnitType.Protoss_Zealot, 224);
    fields.get("groundWeapon").set(UnitType.Protoss_Zealot, WeaponType.Psi_Blades);
    fields.get("maxGroundHits").set(UnitType.Protoss_Zealot, 2);
    fields.get("airWeapon").set(UnitType.Protoss_Zealot, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Zealot, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Zealot, 3.125);
    fields.get("acceleration").set(UnitType.Protoss_Zealot, 1);
    fields.get("haltDistance").set(UnitType.Protoss_Zealot, 1);
    fields.get("turnRadius").set(UnitType.Protoss_Zealot, 40);
    fields.get("canProduce").set(UnitType.Protoss_Zealot, false);
    fields.get("canAttack").set(UnitType.Protoss_Zealot, true);
    fields.get("canMove").set(UnitType.Protoss_Zealot, true);
    fields.get("flyer").set(UnitType.Protoss_Zealot, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Zealot, false);
    fields.get("spellcaster").set(UnitType.Protoss_Zealot, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Zealot, false);
    fields.get("invincible").set(UnitType.Protoss_Zealot, false);
    fields.get("organic").set(UnitType.Protoss_Zealot, true);
    fields.get("mechanical").set(UnitType.Protoss_Zealot, false);
    fields.get("robotic").set(UnitType.Protoss_Zealot, false);
    fields.get("detector").set(UnitType.Protoss_Zealot, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Zealot, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Zealot, false);
    fields.get("refinery").set(UnitType.Protoss_Zealot, false);
    fields.get("worker").set(UnitType.Protoss_Zealot, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Zealot, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Zealot, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Zealot, false);
    fields.get("burrowable").set(UnitType.Protoss_Zealot, false);
    fields.get("cloakable").set(UnitType.Protoss_Zealot, false);
    fields.get("building").set(UnitType.Protoss_Zealot, false);
    fields.get("addon").set(UnitType.Protoss_Zealot, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Zealot, false);
    fields.get("neutral").set(UnitType.Protoss_Zealot, false);
    fields.get("hero").set(UnitType.Protoss_Zealot, false);
    fields.get("powerup").set(UnitType.Protoss_Zealot, false);
    fields.get("beacon").set(UnitType.Protoss_Zealot, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Zealot, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Zealot, false);
    fields.get("spell").set(UnitType.Protoss_Zealot, false);
    fields.get("producesCreep").set(UnitType.Protoss_Zealot, false);
    fields.get("producesLarva").set(UnitType.Protoss_Zealot, false);
    fields.get("mineralField").set(UnitType.Protoss_Zealot, false);
    fields.get("critter").set(UnitType.Protoss_Zealot, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Zealot, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Zealot, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Zealot, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Dragoon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Dragoon, 66);
    fields.get("race").set(UnitType.Protoss_Dragoon, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Dragoon, new UnitType.WhatBuilds(UnitType.Protoss_Gateway, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Dragoon, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Dragoon,
            toMap(UnitType.Protoss_Cybernetics_Core, 1, UnitType.Protoss_Gateway, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Dragoon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Dragoon, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Dragoon, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Dragoon,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Ground_Weapons,
                    UpgradeType.Protoss_Ground_Armor,
                    UpgradeType.Singularity_Charge)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Dragoon, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_Dragoon, 100);
    fields.get("maxShields").set(UnitType.Protoss_Dragoon, 80);
    fields.get("maxEnergy").set(UnitType.Protoss_Dragoon, 0);
    fields.get("armor").set(UnitType.Protoss_Dragoon, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Dragoon, 125);
    fields.get("gasPrice").set(UnitType.Protoss_Dragoon, 50);
    fields.get("buildTime").set(UnitType.Protoss_Dragoon, 750);
    fields.get("supplyRequired").set(UnitType.Protoss_Dragoon, 4);
    fields.get("supplyProvided").set(UnitType.Protoss_Dragoon, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Dragoon, 4);
    fields.get("spaceProvided").set(UnitType.Protoss_Dragoon, 0);
    fields.get("buildScore").set(UnitType.Protoss_Dragoon, 250);
    fields.get("destroyScore").set(UnitType.Protoss_Dragoon, 500);
    fields.get("size").set(UnitType.Protoss_Dragoon, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Dragoon, 1);
    fields.get("tileHeight").set(UnitType.Protoss_Dragoon, 1);
    fields.get("dimensionLeft").set(UnitType.Protoss_Dragoon, 15);
    fields.get("dimensionUp").set(UnitType.Protoss_Dragoon, 15);
    fields.get("dimensionRight").set(UnitType.Protoss_Dragoon, 16);
    fields.get("dimensionDown").set(UnitType.Protoss_Dragoon, 16);
    fields.get("width").set(UnitType.Protoss_Dragoon, 32);
    fields.get("height").set(UnitType.Protoss_Dragoon, 32);
    fields.get("seekRange").set(UnitType.Protoss_Dragoon, 0);
    fields.get("sightRange").set(UnitType.Protoss_Dragoon, 256);
    fields.get("groundWeapon").set(UnitType.Protoss_Dragoon, WeaponType.Phase_Disruptor);
    fields.get("maxGroundHits").set(UnitType.Protoss_Dragoon, 1);
    fields.get("airWeapon").set(UnitType.Protoss_Dragoon, WeaponType.Phase_Disruptor);
    fields.get("maxAirHits").set(UnitType.Protoss_Dragoon, 1);
    fields.get("topSpeed").set(UnitType.Protoss_Dragoon, 3.90625);
    fields.get("acceleration").set(UnitType.Protoss_Dragoon, 1);
    fields.get("haltDistance").set(UnitType.Protoss_Dragoon, 1);
    fields.get("turnRadius").set(UnitType.Protoss_Dragoon, 40);
    fields.get("canProduce").set(UnitType.Protoss_Dragoon, false);
    fields.get("canAttack").set(UnitType.Protoss_Dragoon, true);
    fields.get("canMove").set(UnitType.Protoss_Dragoon, true);
    fields.get("flyer").set(UnitType.Protoss_Dragoon, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Dragoon, false);
    fields.get("spellcaster").set(UnitType.Protoss_Dragoon, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Dragoon, false);
    fields.get("invincible").set(UnitType.Protoss_Dragoon, false);
    fields.get("organic").set(UnitType.Protoss_Dragoon, false);
    fields.get("mechanical").set(UnitType.Protoss_Dragoon, true);
    fields.get("robotic").set(UnitType.Protoss_Dragoon, false);
    fields.get("detector").set(UnitType.Protoss_Dragoon, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Dragoon, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Dragoon, false);
    fields.get("refinery").set(UnitType.Protoss_Dragoon, false);
    fields.get("worker").set(UnitType.Protoss_Dragoon, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Dragoon, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Dragoon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Dragoon, false);
    fields.get("burrowable").set(UnitType.Protoss_Dragoon, false);
    fields.get("cloakable").set(UnitType.Protoss_Dragoon, false);
    fields.get("building").set(UnitType.Protoss_Dragoon, false);
    fields.get("addon").set(UnitType.Protoss_Dragoon, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Dragoon, false);
    fields.get("neutral").set(UnitType.Protoss_Dragoon, false);
    fields.get("hero").set(UnitType.Protoss_Dragoon, false);
    fields.get("powerup").set(UnitType.Protoss_Dragoon, false);
    fields.get("beacon").set(UnitType.Protoss_Dragoon, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Dragoon, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Dragoon, false);
    fields.get("spell").set(UnitType.Protoss_Dragoon, false);
    fields.get("producesCreep").set(UnitType.Protoss_Dragoon, false);
    fields.get("producesLarva").set(UnitType.Protoss_Dragoon, false);
    fields.get("mineralField").set(UnitType.Protoss_Dragoon, false);
    fields.get("critter").set(UnitType.Protoss_Dragoon, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Dragoon, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Dragoon, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Dragoon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_High_Templar() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_High_Templar, 67);
    fields.get("race").set(UnitType.Protoss_High_Templar, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_High_Templar, new UnitType.WhatBuilds(UnitType.Protoss_Gateway, 1));
    fields
        .get("buildsWhat")
        .set(UnitType.Protoss_High_Templar, new ArrayList(Arrays.asList(UnitType.Protoss_Archon)));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_High_Templar,
            toMap(UnitType.Protoss_Templar_Archives, 1, UnitType.Protoss_Gateway, 1));
    fields.get("requiredTech").set(UnitType.Protoss_High_Templar, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_High_Templar, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Protoss_High_Templar,
            new ArrayList(
                Arrays.asList(
                    TechType.Psionic_Storm, TechType.Hallucination, TechType.Archon_Warp)));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_High_Templar,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Ground_Armor,
                    UpgradeType.Khaydarin_Amulet)));
    fields.get("armorUpgrade").set(UnitType.Protoss_High_Templar, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_High_Templar, 40);
    fields.get("maxShields").set(UnitType.Protoss_High_Templar, 40);
    fields.get("maxEnergy").set(UnitType.Protoss_High_Templar, 200);
    fields.get("armor").set(UnitType.Protoss_High_Templar, 0);
    fields.get("mineralPrice").set(UnitType.Protoss_High_Templar, 50);
    fields.get("gasPrice").set(UnitType.Protoss_High_Templar, 150);
    fields.get("buildTime").set(UnitType.Protoss_High_Templar, 750);
    fields.get("supplyRequired").set(UnitType.Protoss_High_Templar, 4);
    fields.get("supplyProvided").set(UnitType.Protoss_High_Templar, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_High_Templar, 2);
    fields.get("spaceProvided").set(UnitType.Protoss_High_Templar, 0);
    fields.get("buildScore").set(UnitType.Protoss_High_Templar, 350);
    fields.get("destroyScore").set(UnitType.Protoss_High_Templar, 700);
    fields.get("size").set(UnitType.Protoss_High_Templar, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Protoss_High_Templar, 1);
    fields.get("tileHeight").set(UnitType.Protoss_High_Templar, 1);
    fields.get("dimensionLeft").set(UnitType.Protoss_High_Templar, 12);
    fields.get("dimensionUp").set(UnitType.Protoss_High_Templar, 10);
    fields.get("dimensionRight").set(UnitType.Protoss_High_Templar, 11);
    fields.get("dimensionDown").set(UnitType.Protoss_High_Templar, 13);
    fields.get("width").set(UnitType.Protoss_High_Templar, 24);
    fields.get("height").set(UnitType.Protoss_High_Templar, 24);
    fields.get("seekRange").set(UnitType.Protoss_High_Templar, 96);
    fields.get("sightRange").set(UnitType.Protoss_High_Templar, 224);
    fields.get("groundWeapon").set(UnitType.Protoss_High_Templar, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_High_Templar, 0);
    fields.get("airWeapon").set(UnitType.Protoss_High_Templar, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_High_Templar, 0);
    fields.get("topSpeed").set(UnitType.Protoss_High_Templar, 2.5);
    fields.get("acceleration").set(UnitType.Protoss_High_Templar, 27);
    fields.get("haltDistance").set(UnitType.Protoss_High_Templar, 13474);
    fields.get("turnRadius").set(UnitType.Protoss_High_Templar, 40);
    fields.get("canProduce").set(UnitType.Protoss_High_Templar, false);
    fields.get("canAttack").set(UnitType.Protoss_High_Templar, false);
    fields.get("canMove").set(UnitType.Protoss_High_Templar, true);
    fields.get("flyer").set(UnitType.Protoss_High_Templar, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_High_Templar, false);
    fields.get("spellcaster").set(UnitType.Protoss_High_Templar, true);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_High_Templar, false);
    fields.get("invincible").set(UnitType.Protoss_High_Templar, false);
    fields.get("organic").set(UnitType.Protoss_High_Templar, true);
    fields.get("mechanical").set(UnitType.Protoss_High_Templar, false);
    fields.get("robotic").set(UnitType.Protoss_High_Templar, false);
    fields.get("detector").set(UnitType.Protoss_High_Templar, false);
    fields.get("resourceContainer").set(UnitType.Protoss_High_Templar, false);
    fields.get("resourceDepot").set(UnitType.Protoss_High_Templar, false);
    fields.get("refinery").set(UnitType.Protoss_High_Templar, false);
    fields.get("worker").set(UnitType.Protoss_High_Templar, false);
    fields.get("requiresPsi").set(UnitType.Protoss_High_Templar, false);
    fields.get("requiresCreep").set(UnitType.Protoss_High_Templar, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_High_Templar, false);
    fields.get("burrowable").set(UnitType.Protoss_High_Templar, false);
    fields.get("cloakable").set(UnitType.Protoss_High_Templar, false);
    fields.get("building").set(UnitType.Protoss_High_Templar, false);
    fields.get("addon").set(UnitType.Protoss_High_Templar, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_High_Templar, false);
    fields.get("neutral").set(UnitType.Protoss_High_Templar, false);
    fields.get("hero").set(UnitType.Protoss_High_Templar, false);
    fields.get("powerup").set(UnitType.Protoss_High_Templar, false);
    fields.get("beacon").set(UnitType.Protoss_High_Templar, false);
    fields.get("flagBeacon").set(UnitType.Protoss_High_Templar, false);
    fields.get("specialBuilding").set(UnitType.Protoss_High_Templar, false);
    fields.get("spell").set(UnitType.Protoss_High_Templar, false);
    fields.get("producesCreep").set(UnitType.Protoss_High_Templar, false);
    fields.get("producesLarva").set(UnitType.Protoss_High_Templar, false);
    fields.get("mineralField").set(UnitType.Protoss_High_Templar, false);
    fields.get("critter").set(UnitType.Protoss_High_Templar, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_High_Templar, false);
    fields.get("researchesWhat").set(UnitType.Protoss_High_Templar, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_High_Templar, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Archon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Archon, 68);
    fields.get("race").set(UnitType.Protoss_Archon, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Archon, new UnitType.WhatBuilds(UnitType.Protoss_High_Templar, 2));
    fields.get("buildsWhat").set(UnitType.Protoss_Archon, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Protoss_Archon, toMap(UnitType.Protoss_High_Templar, 2));
    fields.get("requiredTech").set(UnitType.Protoss_Archon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Archon, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Archon, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Archon,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Ground_Weapons,
                    UpgradeType.Protoss_Ground_Armor)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Archon, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_Archon, 10);
    fields.get("maxShields").set(UnitType.Protoss_Archon, 350);
    fields.get("maxEnergy").set(UnitType.Protoss_Archon, 0);
    fields.get("armor").set(UnitType.Protoss_Archon, 0);
    fields.get("mineralPrice").set(UnitType.Protoss_Archon, 0);
    fields.get("gasPrice").set(UnitType.Protoss_Archon, 0);
    fields.get("buildTime").set(UnitType.Protoss_Archon, 300);
    fields.get("supplyRequired").set(UnitType.Protoss_Archon, 8);
    fields.get("supplyProvided").set(UnitType.Protoss_Archon, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Archon, 4);
    fields.get("spaceProvided").set(UnitType.Protoss_Archon, 0);
    fields.get("buildScore").set(UnitType.Protoss_Archon, 700);
    fields.get("destroyScore").set(UnitType.Protoss_Archon, 1400);
    fields.get("size").set(UnitType.Protoss_Archon, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Archon, 1);
    fields.get("tileHeight").set(UnitType.Protoss_Archon, 1);
    fields.get("dimensionLeft").set(UnitType.Protoss_Archon, 16);
    fields.get("dimensionUp").set(UnitType.Protoss_Archon, 16);
    fields.get("dimensionRight").set(UnitType.Protoss_Archon, 15);
    fields.get("dimensionDown").set(UnitType.Protoss_Archon, 15);
    fields.get("width").set(UnitType.Protoss_Archon, 32);
    fields.get("height").set(UnitType.Protoss_Archon, 32);
    fields.get("seekRange").set(UnitType.Protoss_Archon, 96);
    fields.get("sightRange").set(UnitType.Protoss_Archon, 256);
    fields.get("groundWeapon").set(UnitType.Protoss_Archon, WeaponType.Psionic_Shockwave);
    fields.get("maxGroundHits").set(UnitType.Protoss_Archon, 1);
    fields.get("airWeapon").set(UnitType.Protoss_Archon, WeaponType.Psionic_Shockwave);
    fields.get("maxAirHits").set(UnitType.Protoss_Archon, 1);
    fields.get("topSpeed").set(UnitType.Protoss_Archon, 3.84375);
    fields.get("acceleration").set(UnitType.Protoss_Archon, 160);
    fields.get("haltDistance").set(UnitType.Protoss_Archon, 5120);
    fields.get("turnRadius").set(UnitType.Protoss_Archon, 40);
    fields.get("canProduce").set(UnitType.Protoss_Archon, false);
    fields.get("canAttack").set(UnitType.Protoss_Archon, true);
    fields.get("canMove").set(UnitType.Protoss_Archon, true);
    fields.get("flyer").set(UnitType.Protoss_Archon, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Archon, false);
    fields.get("spellcaster").set(UnitType.Protoss_Archon, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Archon, false);
    fields.get("invincible").set(UnitType.Protoss_Archon, false);
    fields.get("organic").set(UnitType.Protoss_Archon, false);
    fields.get("mechanical").set(UnitType.Protoss_Archon, false);
    fields.get("robotic").set(UnitType.Protoss_Archon, false);
    fields.get("detector").set(UnitType.Protoss_Archon, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Archon, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Archon, false);
    fields.get("refinery").set(UnitType.Protoss_Archon, false);
    fields.get("worker").set(UnitType.Protoss_Archon, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Archon, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Archon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Archon, false);
    fields.get("burrowable").set(UnitType.Protoss_Archon, false);
    fields.get("cloakable").set(UnitType.Protoss_Archon, false);
    fields.get("building").set(UnitType.Protoss_Archon, false);
    fields.get("addon").set(UnitType.Protoss_Archon, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Archon, false);
    fields.get("neutral").set(UnitType.Protoss_Archon, false);
    fields.get("hero").set(UnitType.Protoss_Archon, false);
    fields.get("powerup").set(UnitType.Protoss_Archon, false);
    fields.get("beacon").set(UnitType.Protoss_Archon, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Archon, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Archon, false);
    fields.get("spell").set(UnitType.Protoss_Archon, false);
    fields.get("producesCreep").set(UnitType.Protoss_Archon, false);
    fields.get("producesLarva").set(UnitType.Protoss_Archon, false);
    fields.get("mineralField").set(UnitType.Protoss_Archon, false);
    fields.get("critter").set(UnitType.Protoss_Archon, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Archon, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Archon, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Archon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Shuttle() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Shuttle, 69);
    fields.get("race").set(UnitType.Protoss_Shuttle, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(
            UnitType.Protoss_Shuttle,
            new UnitType.WhatBuilds(UnitType.Protoss_Robotics_Facility, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Shuttle, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Protoss_Shuttle, toMap(UnitType.Protoss_Robotics_Facility, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Shuttle, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Shuttle, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Shuttle, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Shuttle,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Air_Armor,
                    UpgradeType.Gravitic_Drive)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Shuttle, UpgradeType.Protoss_Air_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_Shuttle, 80);
    fields.get("maxShields").set(UnitType.Protoss_Shuttle, 60);
    fields.get("maxEnergy").set(UnitType.Protoss_Shuttle, 0);
    fields.get("armor").set(UnitType.Protoss_Shuttle, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Shuttle, 200);
    fields.get("gasPrice").set(UnitType.Protoss_Shuttle, 0);
    fields.get("buildTime").set(UnitType.Protoss_Shuttle, 900);
    fields.get("supplyRequired").set(UnitType.Protoss_Shuttle, 4);
    fields.get("supplyProvided").set(UnitType.Protoss_Shuttle, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Shuttle, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Shuttle, 8);
    fields.get("buildScore").set(UnitType.Protoss_Shuttle, 200);
    fields.get("destroyScore").set(UnitType.Protoss_Shuttle, 400);
    fields.get("size").set(UnitType.Protoss_Shuttle, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Shuttle, 2);
    fields.get("tileHeight").set(UnitType.Protoss_Shuttle, 1);
    fields.get("dimensionLeft").set(UnitType.Protoss_Shuttle, 20);
    fields.get("dimensionUp").set(UnitType.Protoss_Shuttle, 16);
    fields.get("dimensionRight").set(UnitType.Protoss_Shuttle, 19);
    fields.get("dimensionDown").set(UnitType.Protoss_Shuttle, 15);
    fields.get("width").set(UnitType.Protoss_Shuttle, 40);
    fields.get("height").set(UnitType.Protoss_Shuttle, 32);
    fields.get("seekRange").set(UnitType.Protoss_Shuttle, 0);
    fields.get("sightRange").set(UnitType.Protoss_Shuttle, 256);
    fields.get("groundWeapon").set(UnitType.Protoss_Shuttle, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Shuttle, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Shuttle, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Shuttle, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Shuttle, 3.4609375);
    fields.get("acceleration").set(UnitType.Protoss_Shuttle, 17);
    fields.get("haltDistance").set(UnitType.Protoss_Shuttle, 37756);
    fields.get("turnRadius").set(UnitType.Protoss_Shuttle, 20);
    fields.get("canProduce").set(UnitType.Protoss_Shuttle, false);
    fields.get("canAttack").set(UnitType.Protoss_Shuttle, false);
    fields.get("canMove").set(UnitType.Protoss_Shuttle, true);
    fields.get("flyer").set(UnitType.Protoss_Shuttle, true);
    fields.get("regeneratesHP").set(UnitType.Protoss_Shuttle, false);
    fields.get("spellcaster").set(UnitType.Protoss_Shuttle, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Shuttle, false);
    fields.get("invincible").set(UnitType.Protoss_Shuttle, false);
    fields.get("organic").set(UnitType.Protoss_Shuttle, false);
    fields.get("mechanical").set(UnitType.Protoss_Shuttle, true);
    fields.get("robotic").set(UnitType.Protoss_Shuttle, true);
    fields.get("detector").set(UnitType.Protoss_Shuttle, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Shuttle, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Shuttle, false);
    fields.get("refinery").set(UnitType.Protoss_Shuttle, false);
    fields.get("worker").set(UnitType.Protoss_Shuttle, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Shuttle, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Shuttle, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Shuttle, false);
    fields.get("burrowable").set(UnitType.Protoss_Shuttle, false);
    fields.get("cloakable").set(UnitType.Protoss_Shuttle, false);
    fields.get("building").set(UnitType.Protoss_Shuttle, false);
    fields.get("addon").set(UnitType.Protoss_Shuttle, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Shuttle, false);
    fields.get("neutral").set(UnitType.Protoss_Shuttle, false);
    fields.get("hero").set(UnitType.Protoss_Shuttle, false);
    fields.get("powerup").set(UnitType.Protoss_Shuttle, false);
    fields.get("beacon").set(UnitType.Protoss_Shuttle, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Shuttle, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Shuttle, false);
    fields.get("spell").set(UnitType.Protoss_Shuttle, false);
    fields.get("producesCreep").set(UnitType.Protoss_Shuttle, false);
    fields.get("producesLarva").set(UnitType.Protoss_Shuttle, false);
    fields.get("mineralField").set(UnitType.Protoss_Shuttle, false);
    fields.get("critter").set(UnitType.Protoss_Shuttle, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Shuttle, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Shuttle, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Shuttle, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Scout() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Scout, 70);
    fields.get("race").set(UnitType.Protoss_Scout, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Scout, new UnitType.WhatBuilds(UnitType.Protoss_Stargate, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Scout, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Protoss_Scout, toMap(UnitType.Protoss_Stargate, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Scout, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Scout, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Scout, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Scout,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Air_Weapons,
                    UpgradeType.Protoss_Air_Armor,
                    UpgradeType.Apial_Sensors,
                    UpgradeType.Gravitic_Thrusters)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Scout, UpgradeType.Protoss_Air_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_Scout, 150);
    fields.get("maxShields").set(UnitType.Protoss_Scout, 100);
    fields.get("maxEnergy").set(UnitType.Protoss_Scout, 0);
    fields.get("armor").set(UnitType.Protoss_Scout, 0);
    fields.get("mineralPrice").set(UnitType.Protoss_Scout, 275);
    fields.get("gasPrice").set(UnitType.Protoss_Scout, 125);
    fields.get("buildTime").set(UnitType.Protoss_Scout, 1200);
    fields.get("supplyRequired").set(UnitType.Protoss_Scout, 6);
    fields.get("supplyProvided").set(UnitType.Protoss_Scout, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Scout, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Scout, 0);
    fields.get("buildScore").set(UnitType.Protoss_Scout, 650);
    fields.get("destroyScore").set(UnitType.Protoss_Scout, 1300);
    fields.get("size").set(UnitType.Protoss_Scout, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Scout, 2);
    fields.get("tileHeight").set(UnitType.Protoss_Scout, 1);
    fields.get("dimensionLeft").set(UnitType.Protoss_Scout, 18);
    fields.get("dimensionUp").set(UnitType.Protoss_Scout, 16);
    fields.get("dimensionRight").set(UnitType.Protoss_Scout, 17);
    fields.get("dimensionDown").set(UnitType.Protoss_Scout, 15);
    fields.get("width").set(UnitType.Protoss_Scout, 36);
    fields.get("height").set(UnitType.Protoss_Scout, 32);
    fields.get("seekRange").set(UnitType.Protoss_Scout, 0);
    fields.get("sightRange").set(UnitType.Protoss_Scout, 256);
    fields.get("groundWeapon").set(UnitType.Protoss_Scout, WeaponType.Dual_Photon_Blasters);
    fields.get("maxGroundHits").set(UnitType.Protoss_Scout, 1);
    fields.get("airWeapon").set(UnitType.Protoss_Scout, WeaponType.Anti_Matter_Missiles);
    fields.get("maxAirHits").set(UnitType.Protoss_Scout, 1);
    fields.get("topSpeed").set(UnitType.Protoss_Scout, 3.90625);
    fields.get("acceleration").set(UnitType.Protoss_Scout, 48);
    fields.get("haltDistance").set(UnitType.Protoss_Scout, 17067);
    fields.get("turnRadius").set(UnitType.Protoss_Scout, 30);
    fields.get("canProduce").set(UnitType.Protoss_Scout, false);
    fields.get("canAttack").set(UnitType.Protoss_Scout, true);
    fields.get("canMove").set(UnitType.Protoss_Scout, true);
    fields.get("flyer").set(UnitType.Protoss_Scout, true);
    fields.get("regeneratesHP").set(UnitType.Protoss_Scout, false);
    fields.get("spellcaster").set(UnitType.Protoss_Scout, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Scout, false);
    fields.get("invincible").set(UnitType.Protoss_Scout, false);
    fields.get("organic").set(UnitType.Protoss_Scout, false);
    fields.get("mechanical").set(UnitType.Protoss_Scout, true);
    fields.get("robotic").set(UnitType.Protoss_Scout, false);
    fields.get("detector").set(UnitType.Protoss_Scout, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Scout, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Scout, false);
    fields.get("refinery").set(UnitType.Protoss_Scout, false);
    fields.get("worker").set(UnitType.Protoss_Scout, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Scout, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Scout, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Scout, false);
    fields.get("burrowable").set(UnitType.Protoss_Scout, false);
    fields.get("cloakable").set(UnitType.Protoss_Scout, false);
    fields.get("building").set(UnitType.Protoss_Scout, false);
    fields.get("addon").set(UnitType.Protoss_Scout, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Scout, false);
    fields.get("neutral").set(UnitType.Protoss_Scout, false);
    fields.get("hero").set(UnitType.Protoss_Scout, false);
    fields.get("powerup").set(UnitType.Protoss_Scout, false);
    fields.get("beacon").set(UnitType.Protoss_Scout, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Scout, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Scout, false);
    fields.get("spell").set(UnitType.Protoss_Scout, false);
    fields.get("producesCreep").set(UnitType.Protoss_Scout, false);
    fields.get("producesLarva").set(UnitType.Protoss_Scout, false);
    fields.get("mineralField").set(UnitType.Protoss_Scout, false);
    fields.get("critter").set(UnitType.Protoss_Scout, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Scout, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Scout, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Scout, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Arbiter() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Arbiter, 71);
    fields.get("race").set(UnitType.Protoss_Arbiter, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Arbiter, new UnitType.WhatBuilds(UnitType.Protoss_Stargate, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Arbiter, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Arbiter,
            toMap(UnitType.Protoss_Stargate, 1, UnitType.Protoss_Arbiter_Tribunal, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Arbiter, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Arbiter, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Protoss_Arbiter,
            new ArrayList(Arrays.asList(TechType.Recall, TechType.Stasis_Field)));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Arbiter,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Air_Weapons,
                    UpgradeType.Protoss_Air_Armor,
                    UpgradeType.Khaydarin_Core)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Arbiter, UpgradeType.Protoss_Air_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_Arbiter, 200);
    fields.get("maxShields").set(UnitType.Protoss_Arbiter, 150);
    fields.get("maxEnergy").set(UnitType.Protoss_Arbiter, 200);
    fields.get("armor").set(UnitType.Protoss_Arbiter, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Arbiter, 100);
    fields.get("gasPrice").set(UnitType.Protoss_Arbiter, 350);
    fields.get("buildTime").set(UnitType.Protoss_Arbiter, 2400);
    fields.get("supplyRequired").set(UnitType.Protoss_Arbiter, 8);
    fields.get("supplyProvided").set(UnitType.Protoss_Arbiter, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Arbiter, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Arbiter, 0);
    fields.get("buildScore").set(UnitType.Protoss_Arbiter, 1025);
    fields.get("destroyScore").set(UnitType.Protoss_Arbiter, 2050);
    fields.get("size").set(UnitType.Protoss_Arbiter, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Arbiter, 2);
    fields.get("tileHeight").set(UnitType.Protoss_Arbiter, 2);
    fields.get("dimensionLeft").set(UnitType.Protoss_Arbiter, 22);
    fields.get("dimensionUp").set(UnitType.Protoss_Arbiter, 22);
    fields.get("dimensionRight").set(UnitType.Protoss_Arbiter, 21);
    fields.get("dimensionDown").set(UnitType.Protoss_Arbiter, 21);
    fields.get("width").set(UnitType.Protoss_Arbiter, 44);
    fields.get("height").set(UnitType.Protoss_Arbiter, 44);
    fields.get("seekRange").set(UnitType.Protoss_Arbiter, 0);
    fields.get("sightRange").set(UnitType.Protoss_Arbiter, 288);
    fields.get("groundWeapon").set(UnitType.Protoss_Arbiter, WeaponType.Phase_Disruptor_Cannon);
    fields.get("maxGroundHits").set(UnitType.Protoss_Arbiter, 1);
    fields.get("airWeapon").set(UnitType.Protoss_Arbiter, WeaponType.Phase_Disruptor_Cannon);
    fields.get("maxAirHits").set(UnitType.Protoss_Arbiter, 1);
    fields.get("topSpeed").set(UnitType.Protoss_Arbiter, 3.90625);
    fields.get("acceleration").set(UnitType.Protoss_Arbiter, 33);
    fields.get("haltDistance").set(UnitType.Protoss_Arbiter, 24824);
    fields.get("turnRadius").set(UnitType.Protoss_Arbiter, 40);
    fields.get("canProduce").set(UnitType.Protoss_Arbiter, false);
    fields.get("canAttack").set(UnitType.Protoss_Arbiter, true);
    fields.get("canMove").set(UnitType.Protoss_Arbiter, true);
    fields.get("flyer").set(UnitType.Protoss_Arbiter, true);
    fields.get("regeneratesHP").set(UnitType.Protoss_Arbiter, false);
    fields.get("spellcaster").set(UnitType.Protoss_Arbiter, true);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Arbiter, false);
    fields.get("invincible").set(UnitType.Protoss_Arbiter, false);
    fields.get("organic").set(UnitType.Protoss_Arbiter, false);
    fields.get("mechanical").set(UnitType.Protoss_Arbiter, true);
    fields.get("robotic").set(UnitType.Protoss_Arbiter, false);
    fields.get("detector").set(UnitType.Protoss_Arbiter, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Arbiter, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Arbiter, false);
    fields.get("refinery").set(UnitType.Protoss_Arbiter, false);
    fields.get("worker").set(UnitType.Protoss_Arbiter, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Arbiter, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Arbiter, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Arbiter, false);
    fields.get("burrowable").set(UnitType.Protoss_Arbiter, false);
    fields.get("cloakable").set(UnitType.Protoss_Arbiter, false);
    fields.get("building").set(UnitType.Protoss_Arbiter, false);
    fields.get("addon").set(UnitType.Protoss_Arbiter, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Arbiter, false);
    fields.get("neutral").set(UnitType.Protoss_Arbiter, false);
    fields.get("hero").set(UnitType.Protoss_Arbiter, false);
    fields.get("powerup").set(UnitType.Protoss_Arbiter, false);
    fields.get("beacon").set(UnitType.Protoss_Arbiter, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Arbiter, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Arbiter, false);
    fields.get("spell").set(UnitType.Protoss_Arbiter, false);
    fields.get("producesCreep").set(UnitType.Protoss_Arbiter, false);
    fields.get("producesLarva").set(UnitType.Protoss_Arbiter, false);
    fields.get("mineralField").set(UnitType.Protoss_Arbiter, false);
    fields.get("critter").set(UnitType.Protoss_Arbiter, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Arbiter, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Arbiter, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Arbiter, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Carrier() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Carrier, 72);
    fields.get("race").set(UnitType.Protoss_Carrier, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Carrier, new UnitType.WhatBuilds(UnitType.Protoss_Stargate, 1));
    fields
        .get("buildsWhat")
        .set(UnitType.Protoss_Carrier, new ArrayList(Arrays.asList(UnitType.Protoss_Interceptor)));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Carrier,
            toMap(UnitType.Protoss_Fleet_Beacon, 1, UnitType.Protoss_Stargate, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Carrier, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Carrier, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Carrier, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Carrier,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Air_Weapons,
                    UpgradeType.Protoss_Air_Armor,
                    UpgradeType.Carrier_Capacity)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Carrier, UpgradeType.Protoss_Air_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_Carrier, 300);
    fields.get("maxShields").set(UnitType.Protoss_Carrier, 150);
    fields.get("maxEnergy").set(UnitType.Protoss_Carrier, 0);
    fields.get("armor").set(UnitType.Protoss_Carrier, 4);
    fields.get("mineralPrice").set(UnitType.Protoss_Carrier, 350);
    fields.get("gasPrice").set(UnitType.Protoss_Carrier, 250);
    fields.get("buildTime").set(UnitType.Protoss_Carrier, 2100);
    fields.get("supplyRequired").set(UnitType.Protoss_Carrier, 12);
    fields.get("supplyProvided").set(UnitType.Protoss_Carrier, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Carrier, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Carrier, 0);
    fields.get("buildScore").set(UnitType.Protoss_Carrier, 950);
    fields.get("destroyScore").set(UnitType.Protoss_Carrier, 1900);
    fields.get("size").set(UnitType.Protoss_Carrier, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Carrier, 2);
    fields.get("tileHeight").set(UnitType.Protoss_Carrier, 2);
    fields.get("dimensionLeft").set(UnitType.Protoss_Carrier, 32);
    fields.get("dimensionUp").set(UnitType.Protoss_Carrier, 32);
    fields.get("dimensionRight").set(UnitType.Protoss_Carrier, 31);
    fields.get("dimensionDown").set(UnitType.Protoss_Carrier, 31);
    fields.get("width").set(UnitType.Protoss_Carrier, 64);
    fields.get("height").set(UnitType.Protoss_Carrier, 64);
    fields.get("seekRange").set(UnitType.Protoss_Carrier, 256);
    fields.get("sightRange").set(UnitType.Protoss_Carrier, 352);
    fields.get("groundWeapon").set(UnitType.Protoss_Carrier, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Carrier, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Carrier, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Carrier, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Carrier, 2.6015625);
    fields.get("acceleration").set(UnitType.Protoss_Carrier, 27);
    fields.get("haltDistance").set(UnitType.Protoss_Carrier, 13474);
    fields.get("turnRadius").set(UnitType.Protoss_Carrier, 20);
    fields.get("canProduce").set(UnitType.Protoss_Carrier, true);
    fields.get("canAttack").set(UnitType.Protoss_Carrier, true);
    fields.get("canMove").set(UnitType.Protoss_Carrier, true);
    fields.get("flyer").set(UnitType.Protoss_Carrier, true);
    fields.get("regeneratesHP").set(UnitType.Protoss_Carrier, false);
    fields.get("spellcaster").set(UnitType.Protoss_Carrier, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Carrier, false);
    fields.get("invincible").set(UnitType.Protoss_Carrier, false);
    fields.get("organic").set(UnitType.Protoss_Carrier, false);
    fields.get("mechanical").set(UnitType.Protoss_Carrier, true);
    fields.get("robotic").set(UnitType.Protoss_Carrier, false);
    fields.get("detector").set(UnitType.Protoss_Carrier, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Carrier, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Carrier, false);
    fields.get("refinery").set(UnitType.Protoss_Carrier, false);
    fields.get("worker").set(UnitType.Protoss_Carrier, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Carrier, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Carrier, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Carrier, false);
    fields.get("burrowable").set(UnitType.Protoss_Carrier, false);
    fields.get("cloakable").set(UnitType.Protoss_Carrier, false);
    fields.get("building").set(UnitType.Protoss_Carrier, false);
    fields.get("addon").set(UnitType.Protoss_Carrier, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Carrier, false);
    fields.get("neutral").set(UnitType.Protoss_Carrier, false);
    fields.get("hero").set(UnitType.Protoss_Carrier, false);
    fields.get("powerup").set(UnitType.Protoss_Carrier, false);
    fields.get("beacon").set(UnitType.Protoss_Carrier, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Carrier, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Carrier, false);
    fields.get("spell").set(UnitType.Protoss_Carrier, false);
    fields.get("producesCreep").set(UnitType.Protoss_Carrier, false);
    fields.get("producesLarva").set(UnitType.Protoss_Carrier, false);
    fields.get("mineralField").set(UnitType.Protoss_Carrier, false);
    fields.get("critter").set(UnitType.Protoss_Carrier, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Carrier, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Carrier, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Carrier, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Interceptor() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Interceptor, 73);
    fields.get("race").set(UnitType.Protoss_Interceptor, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Interceptor, new UnitType.WhatBuilds(UnitType.Protoss_Carrier, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Interceptor, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Protoss_Interceptor, toMap(UnitType.Protoss_Carrier, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Interceptor, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Interceptor, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Interceptor, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Interceptor,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Air_Weapons,
                    UpgradeType.Protoss_Air_Armor)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Interceptor, UpgradeType.Protoss_Air_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_Interceptor, 40);
    fields.get("maxShields").set(UnitType.Protoss_Interceptor, 40);
    fields.get("maxEnergy").set(UnitType.Protoss_Interceptor, 0);
    fields.get("armor").set(UnitType.Protoss_Interceptor, 0);
    fields.get("mineralPrice").set(UnitType.Protoss_Interceptor, 25);
    fields.get("gasPrice").set(UnitType.Protoss_Interceptor, 0);
    fields.get("buildTime").set(UnitType.Protoss_Interceptor, 300);
    fields.get("supplyRequired").set(UnitType.Protoss_Interceptor, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Interceptor, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Interceptor, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Interceptor, 0);
    fields.get("buildScore").set(UnitType.Protoss_Interceptor, 30);
    fields.get("destroyScore").set(UnitType.Protoss_Interceptor, 60);
    fields.get("size").set(UnitType.Protoss_Interceptor, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Protoss_Interceptor, 1);
    fields.get("tileHeight").set(UnitType.Protoss_Interceptor, 1);
    fields.get("dimensionLeft").set(UnitType.Protoss_Interceptor, 8);
    fields.get("dimensionUp").set(UnitType.Protoss_Interceptor, 8);
    fields.get("dimensionRight").set(UnitType.Protoss_Interceptor, 7);
    fields.get("dimensionDown").set(UnitType.Protoss_Interceptor, 7);
    fields.get("width").set(UnitType.Protoss_Interceptor, 16);
    fields.get("height").set(UnitType.Protoss_Interceptor, 16);
    fields.get("seekRange").set(UnitType.Protoss_Interceptor, 0);
    fields.get("sightRange").set(UnitType.Protoss_Interceptor, 192);
    fields.get("groundWeapon").set(UnitType.Protoss_Interceptor, WeaponType.Pulse_Cannon);
    fields.get("maxGroundHits").set(UnitType.Protoss_Interceptor, 1);
    fields.get("airWeapon").set(UnitType.Protoss_Interceptor, WeaponType.Pulse_Cannon);
    fields.get("maxAirHits").set(UnitType.Protoss_Interceptor, 1);
    fields.get("topSpeed").set(UnitType.Protoss_Interceptor, 10.4140625);
    fields.get("acceleration").set(UnitType.Protoss_Interceptor, 427);
    fields.get("haltDistance").set(UnitType.Protoss_Interceptor, 13640);
    fields.get("turnRadius").set(UnitType.Protoss_Interceptor, 40);
    fields.get("canProduce").set(UnitType.Protoss_Interceptor, false);
    fields.get("canAttack").set(UnitType.Protoss_Interceptor, true);
    fields.get("canMove").set(UnitType.Protoss_Interceptor, true);
    fields.get("flyer").set(UnitType.Protoss_Interceptor, true);
    fields.get("regeneratesHP").set(UnitType.Protoss_Interceptor, false);
    fields.get("spellcaster").set(UnitType.Protoss_Interceptor, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Interceptor, false);
    fields.get("invincible").set(UnitType.Protoss_Interceptor, false);
    fields.get("organic").set(UnitType.Protoss_Interceptor, false);
    fields.get("mechanical").set(UnitType.Protoss_Interceptor, true);
    fields.get("robotic").set(UnitType.Protoss_Interceptor, false);
    fields.get("detector").set(UnitType.Protoss_Interceptor, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Interceptor, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Interceptor, false);
    fields.get("refinery").set(UnitType.Protoss_Interceptor, false);
    fields.get("worker").set(UnitType.Protoss_Interceptor, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Interceptor, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Interceptor, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Interceptor, false);
    fields.get("burrowable").set(UnitType.Protoss_Interceptor, false);
    fields.get("cloakable").set(UnitType.Protoss_Interceptor, false);
    fields.get("building").set(UnitType.Protoss_Interceptor, false);
    fields.get("addon").set(UnitType.Protoss_Interceptor, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Interceptor, false);
    fields.get("neutral").set(UnitType.Protoss_Interceptor, false);
    fields.get("hero").set(UnitType.Protoss_Interceptor, false);
    fields.get("powerup").set(UnitType.Protoss_Interceptor, false);
    fields.get("beacon").set(UnitType.Protoss_Interceptor, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Interceptor, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Interceptor, false);
    fields.get("spell").set(UnitType.Protoss_Interceptor, false);
    fields.get("producesCreep").set(UnitType.Protoss_Interceptor, false);
    fields.get("producesLarva").set(UnitType.Protoss_Interceptor, false);
    fields.get("mineralField").set(UnitType.Protoss_Interceptor, false);
    fields.get("critter").set(UnitType.Protoss_Interceptor, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Interceptor, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Interceptor, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Interceptor, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Dark_Templar() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Dark_Templar, 74);
    fields.get("race").set(UnitType.Hero_Dark_Templar, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Dark_Templar, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Dark_Templar, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Dark_Templar, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Dark_Templar, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Dark_Templar, TechType.None);
    fields.get("abilities").set(UnitType.Hero_Dark_Templar, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Dark_Templar,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Ground_Weapons,
                    UpgradeType.Protoss_Ground_Armor)));
    fields.get("armorUpgrade").set(UnitType.Hero_Dark_Templar, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Dark_Templar, 40);
    fields.get("maxShields").set(UnitType.Hero_Dark_Templar, 80);
    fields.get("maxEnergy").set(UnitType.Hero_Dark_Templar, 0);
    fields.get("armor").set(UnitType.Hero_Dark_Templar, 0);
    fields.get("mineralPrice").set(UnitType.Hero_Dark_Templar, 150);
    fields.get("gasPrice").set(UnitType.Hero_Dark_Templar, 150);
    fields.get("buildTime").set(UnitType.Hero_Dark_Templar, 750);
    fields.get("supplyRequired").set(UnitType.Hero_Dark_Templar, 2);
    fields.get("supplyProvided").set(UnitType.Hero_Dark_Templar, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Dark_Templar, 2);
    fields.get("spaceProvided").set(UnitType.Hero_Dark_Templar, 0);
    fields.get("buildScore").set(UnitType.Hero_Dark_Templar, 0);
    fields.get("destroyScore").set(UnitType.Hero_Dark_Templar, 400);
    fields.get("size").set(UnitType.Hero_Dark_Templar, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Hero_Dark_Templar, 1);
    fields.get("tileHeight").set(UnitType.Hero_Dark_Templar, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Dark_Templar, 12);
    fields.get("dimensionUp").set(UnitType.Hero_Dark_Templar, 6);
    fields.get("dimensionRight").set(UnitType.Hero_Dark_Templar, 11);
    fields.get("dimensionDown").set(UnitType.Hero_Dark_Templar, 19);
    fields.get("width").set(UnitType.Hero_Dark_Templar, 24);
    fields.get("height").set(UnitType.Hero_Dark_Templar, 26);
    fields.get("seekRange").set(UnitType.Hero_Dark_Templar, 96);
    fields.get("sightRange").set(UnitType.Hero_Dark_Templar, 224);
    fields.get("groundWeapon").set(UnitType.Hero_Dark_Templar, WeaponType.Warp_Blades_Hero);
    fields.get("maxGroundHits").set(UnitType.Hero_Dark_Templar, 1);
    fields.get("airWeapon").set(UnitType.Hero_Dark_Templar, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Dark_Templar, 0);
    fields.get("topSpeed").set(UnitType.Hero_Dark_Templar, 3.84375);
    fields.get("acceleration").set(UnitType.Hero_Dark_Templar, 27);
    fields.get("haltDistance").set(UnitType.Hero_Dark_Templar, 13474);
    fields.get("turnRadius").set(UnitType.Hero_Dark_Templar, 40);
    fields.get("canProduce").set(UnitType.Hero_Dark_Templar, false);
    fields.get("canAttack").set(UnitType.Hero_Dark_Templar, true);
    fields.get("canMove").set(UnitType.Hero_Dark_Templar, true);
    fields.get("flyer").set(UnitType.Hero_Dark_Templar, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Dark_Templar, false);
    fields.get("spellcaster").set(UnitType.Hero_Dark_Templar, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Dark_Templar, true);
    fields.get("invincible").set(UnitType.Hero_Dark_Templar, false);
    fields.get("organic").set(UnitType.Hero_Dark_Templar, true);
    fields.get("mechanical").set(UnitType.Hero_Dark_Templar, false);
    fields.get("robotic").set(UnitType.Hero_Dark_Templar, false);
    fields.get("detector").set(UnitType.Hero_Dark_Templar, false);
    fields.get("resourceContainer").set(UnitType.Hero_Dark_Templar, false);
    fields.get("resourceDepot").set(UnitType.Hero_Dark_Templar, false);
    fields.get("refinery").set(UnitType.Hero_Dark_Templar, false);
    fields.get("worker").set(UnitType.Hero_Dark_Templar, false);
    fields.get("requiresPsi").set(UnitType.Hero_Dark_Templar, false);
    fields.get("requiresCreep").set(UnitType.Hero_Dark_Templar, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Dark_Templar, false);
    fields.get("burrowable").set(UnitType.Hero_Dark_Templar, false);
    fields.get("cloakable").set(UnitType.Hero_Dark_Templar, false);
    fields.get("building").set(UnitType.Hero_Dark_Templar, false);
    fields.get("addon").set(UnitType.Hero_Dark_Templar, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Dark_Templar, false);
    fields.get("neutral").set(UnitType.Hero_Dark_Templar, false);
    fields.get("hero").set(UnitType.Hero_Dark_Templar, true);
    fields.get("powerup").set(UnitType.Hero_Dark_Templar, false);
    fields.get("beacon").set(UnitType.Hero_Dark_Templar, false);
    fields.get("flagBeacon").set(UnitType.Hero_Dark_Templar, false);
    fields.get("specialBuilding").set(UnitType.Hero_Dark_Templar, false);
    fields.get("spell").set(UnitType.Hero_Dark_Templar, false);
    fields.get("producesCreep").set(UnitType.Hero_Dark_Templar, false);
    fields.get("producesLarva").set(UnitType.Hero_Dark_Templar, false);
    fields.get("mineralField").set(UnitType.Hero_Dark_Templar, false);
    fields.get("critter").set(UnitType.Hero_Dark_Templar, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Dark_Templar, false);
    fields.get("researchesWhat").set(UnitType.Hero_Dark_Templar, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Dark_Templar, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Zeratul() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Zeratul, 75);
    fields.get("race").set(UnitType.Hero_Zeratul, Race.Protoss);
    fields.get("whatBuilds").set(UnitType.Hero_Zeratul, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Zeratul, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Zeratul, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Zeratul, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Zeratul, TechType.None);
    fields.get("abilities").set(UnitType.Hero_Zeratul, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Zeratul,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Ground_Weapons,
                    UpgradeType.Protoss_Ground_Armor)));
    fields.get("armorUpgrade").set(UnitType.Hero_Zeratul, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Zeratul, 60);
    fields.get("maxShields").set(UnitType.Hero_Zeratul, 400);
    fields.get("maxEnergy").set(UnitType.Hero_Zeratul, 0);
    fields.get("armor").set(UnitType.Hero_Zeratul, 0);
    fields.get("mineralPrice").set(UnitType.Hero_Zeratul, 100);
    fields.get("gasPrice").set(UnitType.Hero_Zeratul, 300);
    fields.get("buildTime").set(UnitType.Hero_Zeratul, 1500);
    fields.get("supplyRequired").set(UnitType.Hero_Zeratul, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Zeratul, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Zeratul, 2);
    fields.get("spaceProvided").set(UnitType.Hero_Zeratul, 0);
    fields.get("buildScore").set(UnitType.Hero_Zeratul, 0);
    fields.get("destroyScore").set(UnitType.Hero_Zeratul, 800);
    fields.get("size").set(UnitType.Hero_Zeratul, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Hero_Zeratul, 1);
    fields.get("tileHeight").set(UnitType.Hero_Zeratul, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Zeratul, 12);
    fields.get("dimensionUp").set(UnitType.Hero_Zeratul, 6);
    fields.get("dimensionRight").set(UnitType.Hero_Zeratul, 11);
    fields.get("dimensionDown").set(UnitType.Hero_Zeratul, 19);
    fields.get("width").set(UnitType.Hero_Zeratul, 24);
    fields.get("height").set(UnitType.Hero_Zeratul, 26);
    fields.get("seekRange").set(UnitType.Hero_Zeratul, 96);
    fields.get("sightRange").set(UnitType.Hero_Zeratul, 224);
    fields.get("groundWeapon").set(UnitType.Hero_Zeratul, WeaponType.Warp_Blades_Zeratul);
    fields.get("maxGroundHits").set(UnitType.Hero_Zeratul, 1);
    fields.get("airWeapon").set(UnitType.Hero_Zeratul, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Zeratul, 0);
    fields.get("topSpeed").set(UnitType.Hero_Zeratul, 3.84375);
    fields.get("acceleration").set(UnitType.Hero_Zeratul, 27);
    fields.get("haltDistance").set(UnitType.Hero_Zeratul, 13474);
    fields.get("turnRadius").set(UnitType.Hero_Zeratul, 40);
    fields.get("canProduce").set(UnitType.Hero_Zeratul, false);
    fields.get("canAttack").set(UnitType.Hero_Zeratul, true);
    fields.get("canMove").set(UnitType.Hero_Zeratul, true);
    fields.get("flyer").set(UnitType.Hero_Zeratul, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Zeratul, false);
    fields.get("spellcaster").set(UnitType.Hero_Zeratul, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Zeratul, true);
    fields.get("invincible").set(UnitType.Hero_Zeratul, false);
    fields.get("organic").set(UnitType.Hero_Zeratul, true);
    fields.get("mechanical").set(UnitType.Hero_Zeratul, false);
    fields.get("robotic").set(UnitType.Hero_Zeratul, false);
    fields.get("detector").set(UnitType.Hero_Zeratul, false);
    fields.get("resourceContainer").set(UnitType.Hero_Zeratul, false);
    fields.get("resourceDepot").set(UnitType.Hero_Zeratul, false);
    fields.get("refinery").set(UnitType.Hero_Zeratul, false);
    fields.get("worker").set(UnitType.Hero_Zeratul, false);
    fields.get("requiresPsi").set(UnitType.Hero_Zeratul, false);
    fields.get("requiresCreep").set(UnitType.Hero_Zeratul, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Zeratul, false);
    fields.get("burrowable").set(UnitType.Hero_Zeratul, false);
    fields.get("cloakable").set(UnitType.Hero_Zeratul, false);
    fields.get("building").set(UnitType.Hero_Zeratul, false);
    fields.get("addon").set(UnitType.Hero_Zeratul, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Zeratul, false);
    fields.get("neutral").set(UnitType.Hero_Zeratul, false);
    fields.get("hero").set(UnitType.Hero_Zeratul, true);
    fields.get("powerup").set(UnitType.Hero_Zeratul, false);
    fields.get("beacon").set(UnitType.Hero_Zeratul, false);
    fields.get("flagBeacon").set(UnitType.Hero_Zeratul, false);
    fields.get("specialBuilding").set(UnitType.Hero_Zeratul, false);
    fields.get("spell").set(UnitType.Hero_Zeratul, false);
    fields.get("producesCreep").set(UnitType.Hero_Zeratul, false);
    fields.get("producesLarva").set(UnitType.Hero_Zeratul, false);
    fields.get("mineralField").set(UnitType.Hero_Zeratul, false);
    fields.get("critter").set(UnitType.Hero_Zeratul, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Zeratul, false);
    fields.get("researchesWhat").set(UnitType.Hero_Zeratul, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Zeratul, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Tassadar_Zeratul_Archon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Tassadar_Zeratul_Archon, 76);
    fields.get("race").set(UnitType.Hero_Tassadar_Zeratul_Archon, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Tassadar_Zeratul_Archon, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Hero_Tassadar_Zeratul_Archon, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Tassadar_Zeratul_Archon, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Tassadar_Zeratul_Archon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Tassadar_Zeratul_Archon, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Hero_Tassadar_Zeratul_Archon, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Tassadar_Zeratul_Archon,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Ground_Weapons,
                    UpgradeType.Protoss_Ground_Armor)));
    fields
        .get("armorUpgrade")
        .set(UnitType.Hero_Tassadar_Zeratul_Archon, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Tassadar_Zeratul_Archon, 100);
    fields.get("maxShields").set(UnitType.Hero_Tassadar_Zeratul_Archon, 800);
    fields.get("maxEnergy").set(UnitType.Hero_Tassadar_Zeratul_Archon, 0);
    fields.get("armor").set(UnitType.Hero_Tassadar_Zeratul_Archon, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Tassadar_Zeratul_Archon, 0);
    fields.get("gasPrice").set(UnitType.Hero_Tassadar_Zeratul_Archon, 0);
    fields.get("buildTime").set(UnitType.Hero_Tassadar_Zeratul_Archon, 600);
    fields.get("supplyRequired").set(UnitType.Hero_Tassadar_Zeratul_Archon, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Tassadar_Zeratul_Archon, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Tassadar_Zeratul_Archon, 4);
    fields.get("spaceProvided").set(UnitType.Hero_Tassadar_Zeratul_Archon, 0);
    fields.get("buildScore").set(UnitType.Hero_Tassadar_Zeratul_Archon, 0);
    fields.get("destroyScore").set(UnitType.Hero_Tassadar_Zeratul_Archon, 2800);
    fields.get("size").set(UnitType.Hero_Tassadar_Zeratul_Archon, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Tassadar_Zeratul_Archon, 1);
    fields.get("tileHeight").set(UnitType.Hero_Tassadar_Zeratul_Archon, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Tassadar_Zeratul_Archon, 16);
    fields.get("dimensionUp").set(UnitType.Hero_Tassadar_Zeratul_Archon, 16);
    fields.get("dimensionRight").set(UnitType.Hero_Tassadar_Zeratul_Archon, 15);
    fields.get("dimensionDown").set(UnitType.Hero_Tassadar_Zeratul_Archon, 15);
    fields.get("width").set(UnitType.Hero_Tassadar_Zeratul_Archon, 32);
    fields.get("height").set(UnitType.Hero_Tassadar_Zeratul_Archon, 32);
    fields.get("seekRange").set(UnitType.Hero_Tassadar_Zeratul_Archon, 96);
    fields.get("sightRange").set(UnitType.Hero_Tassadar_Zeratul_Archon, 256);
    fields
        .get("groundWeapon")
        .set(UnitType.Hero_Tassadar_Zeratul_Archon, WeaponType.Psionic_Shockwave_TZ_Archon);
    fields.get("maxGroundHits").set(UnitType.Hero_Tassadar_Zeratul_Archon, 1);
    fields
        .get("airWeapon")
        .set(UnitType.Hero_Tassadar_Zeratul_Archon, WeaponType.Psionic_Shockwave_TZ_Archon);
    fields.get("maxAirHits").set(UnitType.Hero_Tassadar_Zeratul_Archon, 1);
    fields.get("topSpeed").set(UnitType.Hero_Tassadar_Zeratul_Archon, 3.84375);
    fields.get("acceleration").set(UnitType.Hero_Tassadar_Zeratul_Archon, 160);
    fields.get("haltDistance").set(UnitType.Hero_Tassadar_Zeratul_Archon, 5120);
    fields.get("turnRadius").set(UnitType.Hero_Tassadar_Zeratul_Archon, 40);
    fields.get("canProduce").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("canAttack").set(UnitType.Hero_Tassadar_Zeratul_Archon, true);
    fields.get("canMove").set(UnitType.Hero_Tassadar_Zeratul_Archon, true);
    fields.get("flyer").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("spellcaster").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("invincible").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("organic").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("mechanical").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("robotic").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("detector").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("resourceContainer").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("resourceDepot").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("refinery").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("worker").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("requiresPsi").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("requiresCreep").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("burrowable").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("cloakable").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("building").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("addon").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("neutral").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("hero").set(UnitType.Hero_Tassadar_Zeratul_Archon, true);
    fields.get("powerup").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("beacon").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("flagBeacon").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("specialBuilding").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("spell").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("producesCreep").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("producesLarva").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("mineralField").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("critter").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Tassadar_Zeratul_Archon, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Hero_Tassadar_Zeratul_Archon, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Hero_Tassadar_Zeratul_Archon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Fenix_Zealot() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Fenix_Zealot, 77);
    fields.get("race").set(UnitType.Hero_Fenix_Zealot, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Fenix_Zealot, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Fenix_Zealot, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Fenix_Zealot, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Fenix_Zealot, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Fenix_Zealot, TechType.None);
    fields.get("abilities").set(UnitType.Hero_Fenix_Zealot, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Fenix_Zealot,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Ground_Weapons,
                    UpgradeType.Protoss_Ground_Armor)));
    fields.get("armorUpgrade").set(UnitType.Hero_Fenix_Zealot, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Fenix_Zealot, 240);
    fields.get("maxShields").set(UnitType.Hero_Fenix_Zealot, 240);
    fields.get("maxEnergy").set(UnitType.Hero_Fenix_Zealot, 0);
    fields.get("armor").set(UnitType.Hero_Fenix_Zealot, 2);
    fields.get("mineralPrice").set(UnitType.Hero_Fenix_Zealot, 200);
    fields.get("gasPrice").set(UnitType.Hero_Fenix_Zealot, 0);
    fields.get("buildTime").set(UnitType.Hero_Fenix_Zealot, 1200);
    fields.get("supplyRequired").set(UnitType.Hero_Fenix_Zealot, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Fenix_Zealot, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Fenix_Zealot, 2);
    fields.get("spaceProvided").set(UnitType.Hero_Fenix_Zealot, 0);
    fields.get("buildScore").set(UnitType.Hero_Fenix_Zealot, 0);
    fields.get("destroyScore").set(UnitType.Hero_Fenix_Zealot, 400);
    fields.get("size").set(UnitType.Hero_Fenix_Zealot, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Hero_Fenix_Zealot, 1);
    fields.get("tileHeight").set(UnitType.Hero_Fenix_Zealot, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Fenix_Zealot, 11);
    fields.get("dimensionUp").set(UnitType.Hero_Fenix_Zealot, 5);
    fields.get("dimensionRight").set(UnitType.Hero_Fenix_Zealot, 11);
    fields.get("dimensionDown").set(UnitType.Hero_Fenix_Zealot, 13);
    fields.get("width").set(UnitType.Hero_Fenix_Zealot, 23);
    fields.get("height").set(UnitType.Hero_Fenix_Zealot, 19);
    fields.get("seekRange").set(UnitType.Hero_Fenix_Zealot, 96);
    fields.get("sightRange").set(UnitType.Hero_Fenix_Zealot, 224);
    fields.get("groundWeapon").set(UnitType.Hero_Fenix_Zealot, WeaponType.Psi_Blades_Fenix);
    fields.get("maxGroundHits").set(UnitType.Hero_Fenix_Zealot, 2);
    fields.get("airWeapon").set(UnitType.Hero_Fenix_Zealot, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Fenix_Zealot, 0);
    fields.get("topSpeed").set(UnitType.Hero_Fenix_Zealot, 3.125);
    fields.get("acceleration").set(UnitType.Hero_Fenix_Zealot, 1);
    fields.get("haltDistance").set(UnitType.Hero_Fenix_Zealot, 1);
    fields.get("turnRadius").set(UnitType.Hero_Fenix_Zealot, 40);
    fields.get("canProduce").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("canAttack").set(UnitType.Hero_Fenix_Zealot, true);
    fields.get("canMove").set(UnitType.Hero_Fenix_Zealot, true);
    fields.get("flyer").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("spellcaster").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("invincible").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("organic").set(UnitType.Hero_Fenix_Zealot, true);
    fields.get("mechanical").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("robotic").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("detector").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("resourceContainer").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("resourceDepot").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("refinery").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("worker").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("requiresPsi").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("requiresCreep").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("burrowable").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("cloakable").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("building").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("addon").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("neutral").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("hero").set(UnitType.Hero_Fenix_Zealot, true);
    fields.get("powerup").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("beacon").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("flagBeacon").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("specialBuilding").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("spell").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("producesCreep").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("producesLarva").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("mineralField").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("critter").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Fenix_Zealot, false);
    fields.get("researchesWhat").set(UnitType.Hero_Fenix_Zealot, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Fenix_Zealot, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Fenix_Dragoon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Fenix_Dragoon, 78);
    fields.get("race").set(UnitType.Hero_Fenix_Dragoon, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Fenix_Dragoon, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Fenix_Dragoon, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Fenix_Dragoon, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Fenix_Dragoon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Fenix_Dragoon, TechType.None);
    fields.get("abilities").set(UnitType.Hero_Fenix_Dragoon, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Fenix_Dragoon,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Ground_Weapons,
                    UpgradeType.Protoss_Ground_Armor)));
    fields.get("armorUpgrade").set(UnitType.Hero_Fenix_Dragoon, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Fenix_Dragoon, 240);
    fields.get("maxShields").set(UnitType.Hero_Fenix_Dragoon, 240);
    fields.get("maxEnergy").set(UnitType.Hero_Fenix_Dragoon, 0);
    fields.get("armor").set(UnitType.Hero_Fenix_Dragoon, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Fenix_Dragoon, 300);
    fields.get("gasPrice").set(UnitType.Hero_Fenix_Dragoon, 100);
    fields.get("buildTime").set(UnitType.Hero_Fenix_Dragoon, 1500);
    fields.get("supplyRequired").set(UnitType.Hero_Fenix_Dragoon, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Fenix_Dragoon, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Fenix_Dragoon, 4);
    fields.get("spaceProvided").set(UnitType.Hero_Fenix_Dragoon, 0);
    fields.get("buildScore").set(UnitType.Hero_Fenix_Dragoon, 0);
    fields.get("destroyScore").set(UnitType.Hero_Fenix_Dragoon, 1000);
    fields.get("size").set(UnitType.Hero_Fenix_Dragoon, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Fenix_Dragoon, 1);
    fields.get("tileHeight").set(UnitType.Hero_Fenix_Dragoon, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Fenix_Dragoon, 15);
    fields.get("dimensionUp").set(UnitType.Hero_Fenix_Dragoon, 15);
    fields.get("dimensionRight").set(UnitType.Hero_Fenix_Dragoon, 16);
    fields.get("dimensionDown").set(UnitType.Hero_Fenix_Dragoon, 16);
    fields.get("width").set(UnitType.Hero_Fenix_Dragoon, 32);
    fields.get("height").set(UnitType.Hero_Fenix_Dragoon, 32);
    fields.get("seekRange").set(UnitType.Hero_Fenix_Dragoon, 0);
    fields.get("sightRange").set(UnitType.Hero_Fenix_Dragoon, 256);
    fields.get("groundWeapon").set(UnitType.Hero_Fenix_Dragoon, WeaponType.Phase_Disruptor_Fenix);
    fields.get("maxGroundHits").set(UnitType.Hero_Fenix_Dragoon, 1);
    fields.get("airWeapon").set(UnitType.Hero_Fenix_Dragoon, WeaponType.Phase_Disruptor_Fenix);
    fields.get("maxAirHits").set(UnitType.Hero_Fenix_Dragoon, 1);
    fields.get("topSpeed").set(UnitType.Hero_Fenix_Dragoon, 3.90625);
    fields.get("acceleration").set(UnitType.Hero_Fenix_Dragoon, 1);
    fields.get("haltDistance").set(UnitType.Hero_Fenix_Dragoon, 1);
    fields.get("turnRadius").set(UnitType.Hero_Fenix_Dragoon, 40);
    fields.get("canProduce").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("canAttack").set(UnitType.Hero_Fenix_Dragoon, true);
    fields.get("canMove").set(UnitType.Hero_Fenix_Dragoon, true);
    fields.get("flyer").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("spellcaster").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("invincible").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("organic").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("mechanical").set(UnitType.Hero_Fenix_Dragoon, true);
    fields.get("robotic").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("detector").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("resourceContainer").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("resourceDepot").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("refinery").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("worker").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("requiresPsi").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("requiresCreep").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("burrowable").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("cloakable").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("building").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("addon").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("neutral").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("hero").set(UnitType.Hero_Fenix_Dragoon, true);
    fields.get("powerup").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("beacon").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("flagBeacon").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("specialBuilding").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("spell").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("producesCreep").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("producesLarva").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("mineralField").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("critter").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Fenix_Dragoon, false);
    fields.get("researchesWhat").set(UnitType.Hero_Fenix_Dragoon, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Fenix_Dragoon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Tassadar() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Tassadar, 79);
    fields.get("race").set(UnitType.Hero_Tassadar, Race.Protoss);
    fields.get("whatBuilds").set(UnitType.Hero_Tassadar, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Tassadar, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Tassadar, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Tassadar, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Tassadar, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Hero_Tassadar,
            new ArrayList(Arrays.asList(TechType.Psionic_Storm, TechType.Hallucination)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Tassadar,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Ground_Weapons,
                    UpgradeType.Protoss_Ground_Armor)));
    fields.get("armorUpgrade").set(UnitType.Hero_Tassadar, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Tassadar, 80);
    fields.get("maxShields").set(UnitType.Hero_Tassadar, 300);
    fields.get("maxEnergy").set(UnitType.Hero_Tassadar, 250);
    fields.get("armor").set(UnitType.Hero_Tassadar, 2);
    fields.get("mineralPrice").set(UnitType.Hero_Tassadar, 100);
    fields.get("gasPrice").set(UnitType.Hero_Tassadar, 300);
    fields.get("buildTime").set(UnitType.Hero_Tassadar, 1500);
    fields.get("supplyRequired").set(UnitType.Hero_Tassadar, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Tassadar, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Tassadar, 2);
    fields.get("spaceProvided").set(UnitType.Hero_Tassadar, 0);
    fields.get("buildScore").set(UnitType.Hero_Tassadar, 0);
    fields.get("destroyScore").set(UnitType.Hero_Tassadar, 1400);
    fields.get("size").set(UnitType.Hero_Tassadar, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Hero_Tassadar, 1);
    fields.get("tileHeight").set(UnitType.Hero_Tassadar, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Tassadar, 12);
    fields.get("dimensionUp").set(UnitType.Hero_Tassadar, 10);
    fields.get("dimensionRight").set(UnitType.Hero_Tassadar, 11);
    fields.get("dimensionDown").set(UnitType.Hero_Tassadar, 13);
    fields.get("width").set(UnitType.Hero_Tassadar, 24);
    fields.get("height").set(UnitType.Hero_Tassadar, 24);
    fields.get("seekRange").set(UnitType.Hero_Tassadar, 96);
    fields.get("sightRange").set(UnitType.Hero_Tassadar, 224);
    fields.get("groundWeapon").set(UnitType.Hero_Tassadar, WeaponType.Psi_Assault);
    fields.get("maxGroundHits").set(UnitType.Hero_Tassadar, 1);
    fields.get("airWeapon").set(UnitType.Hero_Tassadar, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Tassadar, 0);
    fields.get("topSpeed").set(UnitType.Hero_Tassadar, 2.5);
    fields.get("acceleration").set(UnitType.Hero_Tassadar, 27);
    fields.get("haltDistance").set(UnitType.Hero_Tassadar, 13474);
    fields.get("turnRadius").set(UnitType.Hero_Tassadar, 40);
    fields.get("canProduce").set(UnitType.Hero_Tassadar, false);
    fields.get("canAttack").set(UnitType.Hero_Tassadar, true);
    fields.get("canMove").set(UnitType.Hero_Tassadar, true);
    fields.get("flyer").set(UnitType.Hero_Tassadar, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Tassadar, false);
    fields.get("spellcaster").set(UnitType.Hero_Tassadar, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Tassadar, false);
    fields.get("invincible").set(UnitType.Hero_Tassadar, false);
    fields.get("organic").set(UnitType.Hero_Tassadar, true);
    fields.get("mechanical").set(UnitType.Hero_Tassadar, false);
    fields.get("robotic").set(UnitType.Hero_Tassadar, false);
    fields.get("detector").set(UnitType.Hero_Tassadar, false);
    fields.get("resourceContainer").set(UnitType.Hero_Tassadar, false);
    fields.get("resourceDepot").set(UnitType.Hero_Tassadar, false);
    fields.get("refinery").set(UnitType.Hero_Tassadar, false);
    fields.get("worker").set(UnitType.Hero_Tassadar, false);
    fields.get("requiresPsi").set(UnitType.Hero_Tassadar, false);
    fields.get("requiresCreep").set(UnitType.Hero_Tassadar, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Tassadar, false);
    fields.get("burrowable").set(UnitType.Hero_Tassadar, false);
    fields.get("cloakable").set(UnitType.Hero_Tassadar, false);
    fields.get("building").set(UnitType.Hero_Tassadar, false);
    fields.get("addon").set(UnitType.Hero_Tassadar, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Tassadar, false);
    fields.get("neutral").set(UnitType.Hero_Tassadar, false);
    fields.get("hero").set(UnitType.Hero_Tassadar, true);
    fields.get("powerup").set(UnitType.Hero_Tassadar, false);
    fields.get("beacon").set(UnitType.Hero_Tassadar, false);
    fields.get("flagBeacon").set(UnitType.Hero_Tassadar, false);
    fields.get("specialBuilding").set(UnitType.Hero_Tassadar, false);
    fields.get("spell").set(UnitType.Hero_Tassadar, false);
    fields.get("producesCreep").set(UnitType.Hero_Tassadar, false);
    fields.get("producesLarva").set(UnitType.Hero_Tassadar, false);
    fields.get("mineralField").set(UnitType.Hero_Tassadar, false);
    fields.get("critter").set(UnitType.Hero_Tassadar, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Tassadar, false);
    fields.get("researchesWhat").set(UnitType.Hero_Tassadar, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Tassadar, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Mojo() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Mojo, 80);
    fields.get("race").set(UnitType.Hero_Mojo, Race.Protoss);
    fields.get("whatBuilds").set(UnitType.Hero_Mojo, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Mojo, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Mojo, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Mojo, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Mojo, TechType.None);
    fields.get("abilities").set(UnitType.Hero_Mojo, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Mojo,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Air_Weapons,
                    UpgradeType.Protoss_Air_Armor)));
    fields.get("armorUpgrade").set(UnitType.Hero_Mojo, UpgradeType.Protoss_Air_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Mojo, 400);
    fields.get("maxShields").set(UnitType.Hero_Mojo, 400);
    fields.get("maxEnergy").set(UnitType.Hero_Mojo, 0);
    fields.get("armor").set(UnitType.Hero_Mojo, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Mojo, 600);
    fields.get("gasPrice").set(UnitType.Hero_Mojo, 300);
    fields.get("buildTime").set(UnitType.Hero_Mojo, 2400);
    fields.get("supplyRequired").set(UnitType.Hero_Mojo, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Mojo, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Mojo, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Mojo, 0);
    fields.get("buildScore").set(UnitType.Hero_Mojo, 0);
    fields.get("destroyScore").set(UnitType.Hero_Mojo, 2600);
    fields.get("size").set(UnitType.Hero_Mojo, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Mojo, 2);
    fields.get("tileHeight").set(UnitType.Hero_Mojo, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Mojo, 18);
    fields.get("dimensionUp").set(UnitType.Hero_Mojo, 16);
    fields.get("dimensionRight").set(UnitType.Hero_Mojo, 17);
    fields.get("dimensionDown").set(UnitType.Hero_Mojo, 15);
    fields.get("width").set(UnitType.Hero_Mojo, 36);
    fields.get("height").set(UnitType.Hero_Mojo, 32);
    fields.get("seekRange").set(UnitType.Hero_Mojo, 0);
    fields.get("sightRange").set(UnitType.Hero_Mojo, 320);
    fields.get("groundWeapon").set(UnitType.Hero_Mojo, WeaponType.Dual_Photon_Blasters_Mojo);
    fields.get("maxGroundHits").set(UnitType.Hero_Mojo, 1);
    fields.get("airWeapon").set(UnitType.Hero_Mojo, WeaponType.Anti_Matter_Missiles_Mojo);
    fields.get("maxAirHits").set(UnitType.Hero_Mojo, 1);
    fields.get("topSpeed").set(UnitType.Hero_Mojo, 3.90625);
    fields.get("acceleration").set(UnitType.Hero_Mojo, 48);
    fields.get("haltDistance").set(UnitType.Hero_Mojo, 17067);
    fields.get("turnRadius").set(UnitType.Hero_Mojo, 30);
    fields.get("canProduce").set(UnitType.Hero_Mojo, false);
    fields.get("canAttack").set(UnitType.Hero_Mojo, true);
    fields.get("canMove").set(UnitType.Hero_Mojo, true);
    fields.get("flyer").set(UnitType.Hero_Mojo, true);
    fields.get("regeneratesHP").set(UnitType.Hero_Mojo, false);
    fields.get("spellcaster").set(UnitType.Hero_Mojo, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Mojo, false);
    fields.get("invincible").set(UnitType.Hero_Mojo, false);
    fields.get("organic").set(UnitType.Hero_Mojo, false);
    fields.get("mechanical").set(UnitType.Hero_Mojo, true);
    fields.get("robotic").set(UnitType.Hero_Mojo, false);
    fields.get("detector").set(UnitType.Hero_Mojo, false);
    fields.get("resourceContainer").set(UnitType.Hero_Mojo, false);
    fields.get("resourceDepot").set(UnitType.Hero_Mojo, false);
    fields.get("refinery").set(UnitType.Hero_Mojo, false);
    fields.get("worker").set(UnitType.Hero_Mojo, false);
    fields.get("requiresPsi").set(UnitType.Hero_Mojo, false);
    fields.get("requiresCreep").set(UnitType.Hero_Mojo, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Mojo, false);
    fields.get("burrowable").set(UnitType.Hero_Mojo, false);
    fields.get("cloakable").set(UnitType.Hero_Mojo, false);
    fields.get("building").set(UnitType.Hero_Mojo, false);
    fields.get("addon").set(UnitType.Hero_Mojo, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Mojo, false);
    fields.get("neutral").set(UnitType.Hero_Mojo, false);
    fields.get("hero").set(UnitType.Hero_Mojo, true);
    fields.get("powerup").set(UnitType.Hero_Mojo, false);
    fields.get("beacon").set(UnitType.Hero_Mojo, false);
    fields.get("flagBeacon").set(UnitType.Hero_Mojo, false);
    fields.get("specialBuilding").set(UnitType.Hero_Mojo, false);
    fields.get("spell").set(UnitType.Hero_Mojo, false);
    fields.get("producesCreep").set(UnitType.Hero_Mojo, false);
    fields.get("producesLarva").set(UnitType.Hero_Mojo, false);
    fields.get("mineralField").set(UnitType.Hero_Mojo, false);
    fields.get("critter").set(UnitType.Hero_Mojo, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Mojo, false);
    fields.get("researchesWhat").set(UnitType.Hero_Mojo, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Mojo, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Warbringer() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Warbringer, 81);
    fields.get("race").set(UnitType.Hero_Warbringer, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Warbringer, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Warbringer, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Warbringer, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Warbringer, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Warbringer, TechType.None);
    fields.get("abilities").set(UnitType.Hero_Warbringer, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Warbringer,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Ground_Weapons,
                    UpgradeType.Protoss_Ground_Armor,
                    UpgradeType.Scarab_Damage,
                    UpgradeType.Reaver_Capacity)));
    fields.get("armorUpgrade").set(UnitType.Hero_Warbringer, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Warbringer, 200);
    fields.get("maxShields").set(UnitType.Hero_Warbringer, 400);
    fields.get("maxEnergy").set(UnitType.Hero_Warbringer, 0);
    fields.get("armor").set(UnitType.Hero_Warbringer, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Warbringer, 400);
    fields.get("gasPrice").set(UnitType.Hero_Warbringer, 200);
    fields.get("buildTime").set(UnitType.Hero_Warbringer, 1800);
    fields.get("supplyRequired").set(UnitType.Hero_Warbringer, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Warbringer, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Warbringer, 4);
    fields.get("spaceProvided").set(UnitType.Hero_Warbringer, 0);
    fields.get("buildScore").set(UnitType.Hero_Warbringer, 0);
    fields.get("destroyScore").set(UnitType.Hero_Warbringer, 1600);
    fields.get("size").set(UnitType.Hero_Warbringer, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Warbringer, 1);
    fields.get("tileHeight").set(UnitType.Hero_Warbringer, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Warbringer, 16);
    fields.get("dimensionUp").set(UnitType.Hero_Warbringer, 16);
    fields.get("dimensionRight").set(UnitType.Hero_Warbringer, 15);
    fields.get("dimensionDown").set(UnitType.Hero_Warbringer, 15);
    fields.get("width").set(UnitType.Hero_Warbringer, 32);
    fields.get("height").set(UnitType.Hero_Warbringer, 32);
    fields.get("seekRange").set(UnitType.Hero_Warbringer, 256);
    fields.get("sightRange").set(UnitType.Hero_Warbringer, 320);
    fields.get("groundWeapon").set(UnitType.Hero_Warbringer, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Hero_Warbringer, 0);
    fields.get("airWeapon").set(UnitType.Hero_Warbringer, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Warbringer, 0);
    fields.get("topSpeed").set(UnitType.Hero_Warbringer, 1.390625);
    fields.get("acceleration").set(UnitType.Hero_Warbringer, 1);
    fields.get("haltDistance").set(UnitType.Hero_Warbringer, 1);
    fields.get("turnRadius").set(UnitType.Hero_Warbringer, 20);
    fields.get("canProduce").set(UnitType.Hero_Warbringer, true);
    fields.get("canAttack").set(UnitType.Hero_Warbringer, true);
    fields.get("canMove").set(UnitType.Hero_Warbringer, true);
    fields.get("flyer").set(UnitType.Hero_Warbringer, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Warbringer, false);
    fields.get("spellcaster").set(UnitType.Hero_Warbringer, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Warbringer, false);
    fields.get("invincible").set(UnitType.Hero_Warbringer, false);
    fields.get("organic").set(UnitType.Hero_Warbringer, false);
    fields.get("mechanical").set(UnitType.Hero_Warbringer, true);
    fields.get("robotic").set(UnitType.Hero_Warbringer, true);
    fields.get("detector").set(UnitType.Hero_Warbringer, false);
    fields.get("resourceContainer").set(UnitType.Hero_Warbringer, false);
    fields.get("resourceDepot").set(UnitType.Hero_Warbringer, false);
    fields.get("refinery").set(UnitType.Hero_Warbringer, false);
    fields.get("worker").set(UnitType.Hero_Warbringer, false);
    fields.get("requiresPsi").set(UnitType.Hero_Warbringer, false);
    fields.get("requiresCreep").set(UnitType.Hero_Warbringer, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Warbringer, false);
    fields.get("burrowable").set(UnitType.Hero_Warbringer, false);
    fields.get("cloakable").set(UnitType.Hero_Warbringer, false);
    fields.get("building").set(UnitType.Hero_Warbringer, false);
    fields.get("addon").set(UnitType.Hero_Warbringer, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Warbringer, false);
    fields.get("neutral").set(UnitType.Hero_Warbringer, false);
    fields.get("hero").set(UnitType.Hero_Warbringer, true);
    fields.get("powerup").set(UnitType.Hero_Warbringer, false);
    fields.get("beacon").set(UnitType.Hero_Warbringer, false);
    fields.get("flagBeacon").set(UnitType.Hero_Warbringer, false);
    fields.get("specialBuilding").set(UnitType.Hero_Warbringer, false);
    fields.get("spell").set(UnitType.Hero_Warbringer, false);
    fields.get("producesCreep").set(UnitType.Hero_Warbringer, false);
    fields.get("producesLarva").set(UnitType.Hero_Warbringer, false);
    fields.get("mineralField").set(UnitType.Hero_Warbringer, false);
    fields.get("critter").set(UnitType.Hero_Warbringer, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Warbringer, false);
    fields.get("researchesWhat").set(UnitType.Hero_Warbringer, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Warbringer, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Gantrithor() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Gantrithor, 82);
    fields.get("race").set(UnitType.Hero_Gantrithor, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Gantrithor, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Gantrithor, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Gantrithor, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Gantrithor, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Gantrithor, TechType.None);
    fields.get("abilities").set(UnitType.Hero_Gantrithor, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Gantrithor,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Air_Weapons,
                    UpgradeType.Protoss_Air_Armor)));
    fields.get("armorUpgrade").set(UnitType.Hero_Gantrithor, UpgradeType.Protoss_Air_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Gantrithor, 800);
    fields.get("maxShields").set(UnitType.Hero_Gantrithor, 500);
    fields.get("maxEnergy").set(UnitType.Hero_Gantrithor, 0);
    fields.get("armor").set(UnitType.Hero_Gantrithor, 4);
    fields.get("mineralPrice").set(UnitType.Hero_Gantrithor, 700);
    fields.get("gasPrice").set(UnitType.Hero_Gantrithor, 600);
    fields.get("buildTime").set(UnitType.Hero_Gantrithor, 4200);
    fields.get("supplyRequired").set(UnitType.Hero_Gantrithor, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Gantrithor, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Gantrithor, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Gantrithor, 0);
    fields.get("buildScore").set(UnitType.Hero_Gantrithor, 0);
    fields.get("destroyScore").set(UnitType.Hero_Gantrithor, 3800);
    fields.get("size").set(UnitType.Hero_Gantrithor, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Gantrithor, 2);
    fields.get("tileHeight").set(UnitType.Hero_Gantrithor, 2);
    fields.get("dimensionLeft").set(UnitType.Hero_Gantrithor, 32);
    fields.get("dimensionUp").set(UnitType.Hero_Gantrithor, 32);
    fields.get("dimensionRight").set(UnitType.Hero_Gantrithor, 31);
    fields.get("dimensionDown").set(UnitType.Hero_Gantrithor, 31);
    fields.get("width").set(UnitType.Hero_Gantrithor, 64);
    fields.get("height").set(UnitType.Hero_Gantrithor, 64);
    fields.get("seekRange").set(UnitType.Hero_Gantrithor, 256);
    fields.get("sightRange").set(UnitType.Hero_Gantrithor, 288);
    fields.get("groundWeapon").set(UnitType.Hero_Gantrithor, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Hero_Gantrithor, 0);
    fields.get("airWeapon").set(UnitType.Hero_Gantrithor, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Gantrithor, 0);
    fields.get("topSpeed").set(UnitType.Hero_Gantrithor, 2.6015625);
    fields.get("acceleration").set(UnitType.Hero_Gantrithor, 27);
    fields.get("haltDistance").set(UnitType.Hero_Gantrithor, 13474);
    fields.get("turnRadius").set(UnitType.Hero_Gantrithor, 20);
    fields.get("canProduce").set(UnitType.Hero_Gantrithor, true);
    fields.get("canAttack").set(UnitType.Hero_Gantrithor, true);
    fields.get("canMove").set(UnitType.Hero_Gantrithor, true);
    fields.get("flyer").set(UnitType.Hero_Gantrithor, true);
    fields.get("regeneratesHP").set(UnitType.Hero_Gantrithor, false);
    fields.get("spellcaster").set(UnitType.Hero_Gantrithor, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Gantrithor, false);
    fields.get("invincible").set(UnitType.Hero_Gantrithor, false);
    fields.get("organic").set(UnitType.Hero_Gantrithor, false);
    fields.get("mechanical").set(UnitType.Hero_Gantrithor, true);
    fields.get("robotic").set(UnitType.Hero_Gantrithor, false);
    fields.get("detector").set(UnitType.Hero_Gantrithor, false);
    fields.get("resourceContainer").set(UnitType.Hero_Gantrithor, false);
    fields.get("resourceDepot").set(UnitType.Hero_Gantrithor, false);
    fields.get("refinery").set(UnitType.Hero_Gantrithor, false);
    fields.get("worker").set(UnitType.Hero_Gantrithor, false);
    fields.get("requiresPsi").set(UnitType.Hero_Gantrithor, false);
    fields.get("requiresCreep").set(UnitType.Hero_Gantrithor, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Gantrithor, false);
    fields.get("burrowable").set(UnitType.Hero_Gantrithor, false);
    fields.get("cloakable").set(UnitType.Hero_Gantrithor, false);
    fields.get("building").set(UnitType.Hero_Gantrithor, false);
    fields.get("addon").set(UnitType.Hero_Gantrithor, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Gantrithor, false);
    fields.get("neutral").set(UnitType.Hero_Gantrithor, false);
    fields.get("hero").set(UnitType.Hero_Gantrithor, true);
    fields.get("powerup").set(UnitType.Hero_Gantrithor, false);
    fields.get("beacon").set(UnitType.Hero_Gantrithor, false);
    fields.get("flagBeacon").set(UnitType.Hero_Gantrithor, false);
    fields.get("specialBuilding").set(UnitType.Hero_Gantrithor, false);
    fields.get("spell").set(UnitType.Hero_Gantrithor, false);
    fields.get("producesCreep").set(UnitType.Hero_Gantrithor, false);
    fields.get("producesLarva").set(UnitType.Hero_Gantrithor, false);
    fields.get("mineralField").set(UnitType.Hero_Gantrithor, false);
    fields.get("critter").set(UnitType.Hero_Gantrithor, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Gantrithor, false);
    fields.get("researchesWhat").set(UnitType.Hero_Gantrithor, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Gantrithor, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Reaver() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Reaver, 83);
    fields.get("race").set(UnitType.Protoss_Reaver, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(
            UnitType.Protoss_Reaver,
            new UnitType.WhatBuilds(UnitType.Protoss_Robotics_Facility, 1));
    fields
        .get("buildsWhat")
        .set(UnitType.Protoss_Reaver, new ArrayList(Arrays.asList(UnitType.Protoss_Scarab)));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Reaver,
            toMap(UnitType.Protoss_Robotics_Support_Bay, 1, UnitType.Protoss_Robotics_Facility, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Reaver, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Reaver, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Reaver, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Reaver,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Ground_Weapons,
                    UpgradeType.Protoss_Ground_Armor,
                    UpgradeType.Scarab_Damage,
                    UpgradeType.Reaver_Capacity)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Reaver, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_Reaver, 100);
    fields.get("maxShields").set(UnitType.Protoss_Reaver, 80);
    fields.get("maxEnergy").set(UnitType.Protoss_Reaver, 0);
    fields.get("armor").set(UnitType.Protoss_Reaver, 0);
    fields.get("mineralPrice").set(UnitType.Protoss_Reaver, 200);
    fields.get("gasPrice").set(UnitType.Protoss_Reaver, 100);
    fields.get("buildTime").set(UnitType.Protoss_Reaver, 1050);
    fields.get("supplyRequired").set(UnitType.Protoss_Reaver, 8);
    fields.get("supplyProvided").set(UnitType.Protoss_Reaver, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Reaver, 4);
    fields.get("spaceProvided").set(UnitType.Protoss_Reaver, 0);
    fields.get("buildScore").set(UnitType.Protoss_Reaver, 400);
    fields.get("destroyScore").set(UnitType.Protoss_Reaver, 800);
    fields.get("size").set(UnitType.Protoss_Reaver, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Reaver, 1);
    fields.get("tileHeight").set(UnitType.Protoss_Reaver, 1);
    fields.get("dimensionLeft").set(UnitType.Protoss_Reaver, 16);
    fields.get("dimensionUp").set(UnitType.Protoss_Reaver, 16);
    fields.get("dimensionRight").set(UnitType.Protoss_Reaver, 15);
    fields.get("dimensionDown").set(UnitType.Protoss_Reaver, 15);
    fields.get("width").set(UnitType.Protoss_Reaver, 32);
    fields.get("height").set(UnitType.Protoss_Reaver, 32);
    fields.get("seekRange").set(UnitType.Protoss_Reaver, 256);
    fields.get("sightRange").set(UnitType.Protoss_Reaver, 320);
    fields.get("groundWeapon").set(UnitType.Protoss_Reaver, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Reaver, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Reaver, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Reaver, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Reaver, 1.390625);
    fields.get("acceleration").set(UnitType.Protoss_Reaver, 1);
    fields.get("haltDistance").set(UnitType.Protoss_Reaver, 1);
    fields.get("turnRadius").set(UnitType.Protoss_Reaver, 20);
    fields.get("canProduce").set(UnitType.Protoss_Reaver, true);
    fields.get("canAttack").set(UnitType.Protoss_Reaver, true);
    fields.get("canMove").set(UnitType.Protoss_Reaver, true);
    fields.get("flyer").set(UnitType.Protoss_Reaver, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Reaver, false);
    fields.get("spellcaster").set(UnitType.Protoss_Reaver, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Reaver, false);
    fields.get("invincible").set(UnitType.Protoss_Reaver, false);
    fields.get("organic").set(UnitType.Protoss_Reaver, false);
    fields.get("mechanical").set(UnitType.Protoss_Reaver, true);
    fields.get("robotic").set(UnitType.Protoss_Reaver, true);
    fields.get("detector").set(UnitType.Protoss_Reaver, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Reaver, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Reaver, false);
    fields.get("refinery").set(UnitType.Protoss_Reaver, false);
    fields.get("worker").set(UnitType.Protoss_Reaver, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Reaver, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Reaver, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Reaver, false);
    fields.get("burrowable").set(UnitType.Protoss_Reaver, false);
    fields.get("cloakable").set(UnitType.Protoss_Reaver, false);
    fields.get("building").set(UnitType.Protoss_Reaver, false);
    fields.get("addon").set(UnitType.Protoss_Reaver, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Reaver, false);
    fields.get("neutral").set(UnitType.Protoss_Reaver, false);
    fields.get("hero").set(UnitType.Protoss_Reaver, false);
    fields.get("powerup").set(UnitType.Protoss_Reaver, false);
    fields.get("beacon").set(UnitType.Protoss_Reaver, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Reaver, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Reaver, false);
    fields.get("spell").set(UnitType.Protoss_Reaver, false);
    fields.get("producesCreep").set(UnitType.Protoss_Reaver, false);
    fields.get("producesLarva").set(UnitType.Protoss_Reaver, false);
    fields.get("mineralField").set(UnitType.Protoss_Reaver, false);
    fields.get("critter").set(UnitType.Protoss_Reaver, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Reaver, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Reaver, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Reaver, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Observer() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Observer, 84);
    fields.get("race").set(UnitType.Protoss_Observer, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(
            UnitType.Protoss_Observer,
            new UnitType.WhatBuilds(UnitType.Protoss_Robotics_Facility, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Observer, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Observer,
            toMap(UnitType.Protoss_Observatory, 1, UnitType.Protoss_Robotics_Facility, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Observer, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Observer, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Observer, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Observer,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Gravitic_Boosters,
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Sensor_Array,
                    UpgradeType.Protoss_Air_Armor)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Observer, UpgradeType.Protoss_Air_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_Observer, 40);
    fields.get("maxShields").set(UnitType.Protoss_Observer, 20);
    fields.get("maxEnergy").set(UnitType.Protoss_Observer, 0);
    fields.get("armor").set(UnitType.Protoss_Observer, 0);
    fields.get("mineralPrice").set(UnitType.Protoss_Observer, 25);
    fields.get("gasPrice").set(UnitType.Protoss_Observer, 75);
    fields.get("buildTime").set(UnitType.Protoss_Observer, 600);
    fields.get("supplyRequired").set(UnitType.Protoss_Observer, 2);
    fields.get("supplyProvided").set(UnitType.Protoss_Observer, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Observer, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Observer, 0);
    fields.get("buildScore").set(UnitType.Protoss_Observer, 225);
    fields.get("destroyScore").set(UnitType.Protoss_Observer, 450);
    fields.get("size").set(UnitType.Protoss_Observer, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Protoss_Observer, 1);
    fields.get("tileHeight").set(UnitType.Protoss_Observer, 1);
    fields.get("dimensionLeft").set(UnitType.Protoss_Observer, 16);
    fields.get("dimensionUp").set(UnitType.Protoss_Observer, 16);
    fields.get("dimensionRight").set(UnitType.Protoss_Observer, 15);
    fields.get("dimensionDown").set(UnitType.Protoss_Observer, 15);
    fields.get("width").set(UnitType.Protoss_Observer, 32);
    fields.get("height").set(UnitType.Protoss_Observer, 32);
    fields.get("seekRange").set(UnitType.Protoss_Observer, 0);
    fields.get("sightRange").set(UnitType.Protoss_Observer, 288);
    fields.get("groundWeapon").set(UnitType.Protoss_Observer, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Observer, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Observer, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Observer, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Observer, 2.6015625);
    fields.get("acceleration").set(UnitType.Protoss_Observer, 27);
    fields.get("haltDistance").set(UnitType.Protoss_Observer, 13474);
    fields.get("turnRadius").set(UnitType.Protoss_Observer, 20);
    fields.get("canProduce").set(UnitType.Protoss_Observer, false);
    fields.get("canAttack").set(UnitType.Protoss_Observer, false);
    fields.get("canMove").set(UnitType.Protoss_Observer, true);
    fields.get("flyer").set(UnitType.Protoss_Observer, true);
    fields.get("regeneratesHP").set(UnitType.Protoss_Observer, false);
    fields.get("spellcaster").set(UnitType.Protoss_Observer, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Observer, true);
    fields.get("invincible").set(UnitType.Protoss_Observer, false);
    fields.get("organic").set(UnitType.Protoss_Observer, false);
    fields.get("mechanical").set(UnitType.Protoss_Observer, true);
    fields.get("robotic").set(UnitType.Protoss_Observer, true);
    fields.get("detector").set(UnitType.Protoss_Observer, true);
    fields.get("resourceContainer").set(UnitType.Protoss_Observer, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Observer, false);
    fields.get("refinery").set(UnitType.Protoss_Observer, false);
    fields.get("worker").set(UnitType.Protoss_Observer, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Observer, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Observer, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Observer, false);
    fields.get("burrowable").set(UnitType.Protoss_Observer, false);
    fields.get("cloakable").set(UnitType.Protoss_Observer, false);
    fields.get("building").set(UnitType.Protoss_Observer, false);
    fields.get("addon").set(UnitType.Protoss_Observer, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Observer, false);
    fields.get("neutral").set(UnitType.Protoss_Observer, false);
    fields.get("hero").set(UnitType.Protoss_Observer, false);
    fields.get("powerup").set(UnitType.Protoss_Observer, false);
    fields.get("beacon").set(UnitType.Protoss_Observer, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Observer, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Observer, false);
    fields.get("spell").set(UnitType.Protoss_Observer, false);
    fields.get("producesCreep").set(UnitType.Protoss_Observer, false);
    fields.get("producesLarva").set(UnitType.Protoss_Observer, false);
    fields.get("mineralField").set(UnitType.Protoss_Observer, false);
    fields.get("critter").set(UnitType.Protoss_Observer, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Observer, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Observer, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Observer, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Scarab() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Scarab, 85);
    fields.get("race").set(UnitType.Protoss_Scarab, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Scarab, new UnitType.WhatBuilds(UnitType.Protoss_Reaver, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Scarab, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Protoss_Scarab, toMap(UnitType.Protoss_Reaver, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Scarab, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Scarab, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Scarab, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Scarab,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Ground_Weapons,
                    UpgradeType.Protoss_Ground_Armor)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Scarab, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Protoss_Scarab, 20);
    fields.get("maxShields").set(UnitType.Protoss_Scarab, 10);
    fields.get("maxEnergy").set(UnitType.Protoss_Scarab, 0);
    fields.get("armor").set(UnitType.Protoss_Scarab, 0);
    fields.get("mineralPrice").set(UnitType.Protoss_Scarab, 15);
    fields.get("gasPrice").set(UnitType.Protoss_Scarab, 0);
    fields.get("buildTime").set(UnitType.Protoss_Scarab, 105);
    fields.get("supplyRequired").set(UnitType.Protoss_Scarab, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Scarab, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Scarab, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Scarab, 0);
    fields.get("buildScore").set(UnitType.Protoss_Scarab, 0);
    fields.get("destroyScore").set(UnitType.Protoss_Scarab, 0);
    fields.get("size").set(UnitType.Protoss_Scarab, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Protoss_Scarab, 1);
    fields.get("tileHeight").set(UnitType.Protoss_Scarab, 1);
    fields.get("dimensionLeft").set(UnitType.Protoss_Scarab, 2);
    fields.get("dimensionUp").set(UnitType.Protoss_Scarab, 2);
    fields.get("dimensionRight").set(UnitType.Protoss_Scarab, 2);
    fields.get("dimensionDown").set(UnitType.Protoss_Scarab, 2);
    fields.get("width").set(UnitType.Protoss_Scarab, 5);
    fields.get("height").set(UnitType.Protoss_Scarab, 5);
    fields.get("seekRange").set(UnitType.Protoss_Scarab, 96);
    fields.get("sightRange").set(UnitType.Protoss_Scarab, 160);
    fields.get("groundWeapon").set(UnitType.Protoss_Scarab, WeaponType.Scarab);
    fields.get("maxGroundHits").set(UnitType.Protoss_Scarab, 1);
    fields.get("airWeapon").set(UnitType.Protoss_Scarab, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Scarab, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Scarab, 12.5);
    fields.get("acceleration").set(UnitType.Protoss_Scarab, 1);
    fields.get("haltDistance").set(UnitType.Protoss_Scarab, 1);
    fields.get("turnRadius").set(UnitType.Protoss_Scarab, 27);
    fields.get("canProduce").set(UnitType.Protoss_Scarab, false);
    fields.get("canAttack").set(UnitType.Protoss_Scarab, true);
    fields.get("canMove").set(UnitType.Protoss_Scarab, true);
    fields.get("flyer").set(UnitType.Protoss_Scarab, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Scarab, false);
    fields.get("spellcaster").set(UnitType.Protoss_Scarab, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Scarab, false);
    fields.get("invincible").set(UnitType.Protoss_Scarab, true);
    fields.get("organic").set(UnitType.Protoss_Scarab, false);
    fields.get("mechanical").set(UnitType.Protoss_Scarab, true);
    fields.get("robotic").set(UnitType.Protoss_Scarab, false);
    fields.get("detector").set(UnitType.Protoss_Scarab, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Scarab, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Scarab, false);
    fields.get("refinery").set(UnitType.Protoss_Scarab, false);
    fields.get("worker").set(UnitType.Protoss_Scarab, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Scarab, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Scarab, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Scarab, false);
    fields.get("burrowable").set(UnitType.Protoss_Scarab, false);
    fields.get("cloakable").set(UnitType.Protoss_Scarab, false);
    fields.get("building").set(UnitType.Protoss_Scarab, false);
    fields.get("addon").set(UnitType.Protoss_Scarab, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Scarab, false);
    fields.get("neutral").set(UnitType.Protoss_Scarab, false);
    fields.get("hero").set(UnitType.Protoss_Scarab, false);
    fields.get("powerup").set(UnitType.Protoss_Scarab, false);
    fields.get("beacon").set(UnitType.Protoss_Scarab, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Scarab, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Scarab, false);
    fields.get("spell").set(UnitType.Protoss_Scarab, false);
    fields.get("producesCreep").set(UnitType.Protoss_Scarab, false);
    fields.get("producesLarva").set(UnitType.Protoss_Scarab, false);
    fields.get("mineralField").set(UnitType.Protoss_Scarab, false);
    fields.get("critter").set(UnitType.Protoss_Scarab, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Scarab, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Scarab, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Scarab, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Danimoth() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Danimoth, 86);
    fields.get("race").set(UnitType.Hero_Danimoth, Race.Protoss);
    fields.get("whatBuilds").set(UnitType.Hero_Danimoth, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Danimoth, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Danimoth, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Danimoth, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Danimoth, TechType.None);
    fields
        .get("abilities")
        .set(
            UnitType.Hero_Danimoth,
            new ArrayList(Arrays.asList(TechType.Recall, TechType.Stasis_Field)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Danimoth,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Air_Weapons,
                    UpgradeType.Protoss_Air_Armor)));
    fields.get("armorUpgrade").set(UnitType.Hero_Danimoth, UpgradeType.Protoss_Air_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Danimoth, 600);
    fields.get("maxShields").set(UnitType.Hero_Danimoth, 500);
    fields.get("maxEnergy").set(UnitType.Hero_Danimoth, 250);
    fields.get("armor").set(UnitType.Hero_Danimoth, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Danimoth, 50);
    fields.get("gasPrice").set(UnitType.Hero_Danimoth, 1000);
    fields.get("buildTime").set(UnitType.Hero_Danimoth, 4800);
    fields.get("supplyRequired").set(UnitType.Hero_Danimoth, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Danimoth, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Danimoth, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Danimoth, 0);
    fields.get("buildScore").set(UnitType.Hero_Danimoth, 0);
    fields.get("destroyScore").set(UnitType.Hero_Danimoth, 4100);
    fields.get("size").set(UnitType.Hero_Danimoth, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Danimoth, 2);
    fields.get("tileHeight").set(UnitType.Hero_Danimoth, 2);
    fields.get("dimensionLeft").set(UnitType.Hero_Danimoth, 22);
    fields.get("dimensionUp").set(UnitType.Hero_Danimoth, 22);
    fields.get("dimensionRight").set(UnitType.Hero_Danimoth, 21);
    fields.get("dimensionDown").set(UnitType.Hero_Danimoth, 21);
    fields.get("width").set(UnitType.Hero_Danimoth, 44);
    fields.get("height").set(UnitType.Hero_Danimoth, 44);
    fields.get("seekRange").set(UnitType.Hero_Danimoth, 0);
    fields.get("sightRange").set(UnitType.Hero_Danimoth, 288);
    fields
        .get("groundWeapon")
        .set(UnitType.Hero_Danimoth, WeaponType.Phase_Disruptor_Cannon_Danimoth);
    fields.get("maxGroundHits").set(UnitType.Hero_Danimoth, 1);
    fields.get("airWeapon").set(UnitType.Hero_Danimoth, WeaponType.Phase_Disruptor_Cannon_Danimoth);
    fields.get("maxAirHits").set(UnitType.Hero_Danimoth, 1);
    fields.get("topSpeed").set(UnitType.Hero_Danimoth, 3.90625);
    fields.get("acceleration").set(UnitType.Hero_Danimoth, 33);
    fields.get("haltDistance").set(UnitType.Hero_Danimoth, 24824);
    fields.get("turnRadius").set(UnitType.Hero_Danimoth, 40);
    fields.get("canProduce").set(UnitType.Hero_Danimoth, false);
    fields.get("canAttack").set(UnitType.Hero_Danimoth, true);
    fields.get("canMove").set(UnitType.Hero_Danimoth, true);
    fields.get("flyer").set(UnitType.Hero_Danimoth, true);
    fields.get("regeneratesHP").set(UnitType.Hero_Danimoth, false);
    fields.get("spellcaster").set(UnitType.Hero_Danimoth, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Danimoth, false);
    fields.get("invincible").set(UnitType.Hero_Danimoth, false);
    fields.get("organic").set(UnitType.Hero_Danimoth, false);
    fields.get("mechanical").set(UnitType.Hero_Danimoth, true);
    fields.get("robotic").set(UnitType.Hero_Danimoth, false);
    fields.get("detector").set(UnitType.Hero_Danimoth, false);
    fields.get("resourceContainer").set(UnitType.Hero_Danimoth, false);
    fields.get("resourceDepot").set(UnitType.Hero_Danimoth, false);
    fields.get("refinery").set(UnitType.Hero_Danimoth, false);
    fields.get("worker").set(UnitType.Hero_Danimoth, false);
    fields.get("requiresPsi").set(UnitType.Hero_Danimoth, false);
    fields.get("requiresCreep").set(UnitType.Hero_Danimoth, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Danimoth, false);
    fields.get("burrowable").set(UnitType.Hero_Danimoth, false);
    fields.get("cloakable").set(UnitType.Hero_Danimoth, false);
    fields.get("building").set(UnitType.Hero_Danimoth, false);
    fields.get("addon").set(UnitType.Hero_Danimoth, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Danimoth, false);
    fields.get("neutral").set(UnitType.Hero_Danimoth, false);
    fields.get("hero").set(UnitType.Hero_Danimoth, true);
    fields.get("powerup").set(UnitType.Hero_Danimoth, false);
    fields.get("beacon").set(UnitType.Hero_Danimoth, false);
    fields.get("flagBeacon").set(UnitType.Hero_Danimoth, false);
    fields.get("specialBuilding").set(UnitType.Hero_Danimoth, false);
    fields.get("spell").set(UnitType.Hero_Danimoth, false);
    fields.get("producesCreep").set(UnitType.Hero_Danimoth, false);
    fields.get("producesLarva").set(UnitType.Hero_Danimoth, false);
    fields.get("mineralField").set(UnitType.Hero_Danimoth, false);
    fields.get("critter").set(UnitType.Hero_Danimoth, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Danimoth, false);
    fields.get("researchesWhat").set(UnitType.Hero_Danimoth, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Danimoth, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Aldaris() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Aldaris, 87);
    fields.get("race").set(UnitType.Hero_Aldaris, Race.Protoss);
    fields.get("whatBuilds").set(UnitType.Hero_Aldaris, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Aldaris, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Aldaris, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Aldaris, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Aldaris, TechType.None);
    fields.get("abilities").set(UnitType.Hero_Aldaris, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Aldaris,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Ground_Weapons,
                    UpgradeType.Protoss_Ground_Armor)));
    fields.get("armorUpgrade").set(UnitType.Hero_Aldaris, UpgradeType.Protoss_Ground_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Aldaris, 80);
    fields.get("maxShields").set(UnitType.Hero_Aldaris, 300);
    fields.get("maxEnergy").set(UnitType.Hero_Aldaris, 250);
    fields.get("armor").set(UnitType.Hero_Aldaris, 2);
    fields.get("mineralPrice").set(UnitType.Hero_Aldaris, 100);
    fields.get("gasPrice").set(UnitType.Hero_Aldaris, 300);
    fields.get("buildTime").set(UnitType.Hero_Aldaris, 1500);
    fields.get("supplyRequired").set(UnitType.Hero_Aldaris, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Aldaris, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Aldaris, 2);
    fields.get("spaceProvided").set(UnitType.Hero_Aldaris, 0);
    fields.get("buildScore").set(UnitType.Hero_Aldaris, 0);
    fields.get("destroyScore").set(UnitType.Hero_Aldaris, 1400);
    fields.get("size").set(UnitType.Hero_Aldaris, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Hero_Aldaris, 1);
    fields.get("tileHeight").set(UnitType.Hero_Aldaris, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Aldaris, 12);
    fields.get("dimensionUp").set(UnitType.Hero_Aldaris, 10);
    fields.get("dimensionRight").set(UnitType.Hero_Aldaris, 11);
    fields.get("dimensionDown").set(UnitType.Hero_Aldaris, 13);
    fields.get("width").set(UnitType.Hero_Aldaris, 24);
    fields.get("height").set(UnitType.Hero_Aldaris, 24);
    fields.get("seekRange").set(UnitType.Hero_Aldaris, 96);
    fields.get("sightRange").set(UnitType.Hero_Aldaris, 224);
    fields.get("groundWeapon").set(UnitType.Hero_Aldaris, WeaponType.Psi_Assault);
    fields.get("maxGroundHits").set(UnitType.Hero_Aldaris, 1);
    fields.get("airWeapon").set(UnitType.Hero_Aldaris, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Hero_Aldaris, 0);
    fields.get("topSpeed").set(UnitType.Hero_Aldaris, 2.5);
    fields.get("acceleration").set(UnitType.Hero_Aldaris, 27);
    fields.get("haltDistance").set(UnitType.Hero_Aldaris, 13474);
    fields.get("turnRadius").set(UnitType.Hero_Aldaris, 40);
    fields.get("canProduce").set(UnitType.Hero_Aldaris, false);
    fields.get("canAttack").set(UnitType.Hero_Aldaris, true);
    fields.get("canMove").set(UnitType.Hero_Aldaris, true);
    fields.get("flyer").set(UnitType.Hero_Aldaris, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Aldaris, false);
    fields.get("spellcaster").set(UnitType.Hero_Aldaris, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Aldaris, false);
    fields.get("invincible").set(UnitType.Hero_Aldaris, false);
    fields.get("organic").set(UnitType.Hero_Aldaris, true);
    fields.get("mechanical").set(UnitType.Hero_Aldaris, false);
    fields.get("robotic").set(UnitType.Hero_Aldaris, false);
    fields.get("detector").set(UnitType.Hero_Aldaris, false);
    fields.get("resourceContainer").set(UnitType.Hero_Aldaris, false);
    fields.get("resourceDepot").set(UnitType.Hero_Aldaris, false);
    fields.get("refinery").set(UnitType.Hero_Aldaris, false);
    fields.get("worker").set(UnitType.Hero_Aldaris, false);
    fields.get("requiresPsi").set(UnitType.Hero_Aldaris, false);
    fields.get("requiresCreep").set(UnitType.Hero_Aldaris, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Aldaris, false);
    fields.get("burrowable").set(UnitType.Hero_Aldaris, false);
    fields.get("cloakable").set(UnitType.Hero_Aldaris, false);
    fields.get("building").set(UnitType.Hero_Aldaris, false);
    fields.get("addon").set(UnitType.Hero_Aldaris, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Aldaris, false);
    fields.get("neutral").set(UnitType.Hero_Aldaris, false);
    fields.get("hero").set(UnitType.Hero_Aldaris, true);
    fields.get("powerup").set(UnitType.Hero_Aldaris, false);
    fields.get("beacon").set(UnitType.Hero_Aldaris, false);
    fields.get("flagBeacon").set(UnitType.Hero_Aldaris, false);
    fields.get("specialBuilding").set(UnitType.Hero_Aldaris, false);
    fields.get("spell").set(UnitType.Hero_Aldaris, false);
    fields.get("producesCreep").set(UnitType.Hero_Aldaris, false);
    fields.get("producesLarva").set(UnitType.Hero_Aldaris, false);
    fields.get("mineralField").set(UnitType.Hero_Aldaris, false);
    fields.get("critter").set(UnitType.Hero_Aldaris, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Aldaris, false);
    fields.get("researchesWhat").set(UnitType.Hero_Aldaris, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Aldaris, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Artanis() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Artanis, 88);
    fields.get("race").set(UnitType.Hero_Artanis, Race.Protoss);
    fields.get("whatBuilds").set(UnitType.Hero_Artanis, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Artanis, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Artanis, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Artanis, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Artanis, TechType.None);
    fields.get("abilities").set(UnitType.Hero_Artanis, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Artanis,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Air_Weapons,
                    UpgradeType.Protoss_Air_Armor)));
    fields.get("armorUpgrade").set(UnitType.Hero_Artanis, UpgradeType.Protoss_Air_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Artanis, 250);
    fields.get("maxShields").set(UnitType.Hero_Artanis, 250);
    fields.get("maxEnergy").set(UnitType.Hero_Artanis, 0);
    fields.get("armor").set(UnitType.Hero_Artanis, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Artanis, 600);
    fields.get("gasPrice").set(UnitType.Hero_Artanis, 300);
    fields.get("buildTime").set(UnitType.Hero_Artanis, 2400);
    fields.get("supplyRequired").set(UnitType.Hero_Artanis, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Artanis, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Artanis, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Artanis, 0);
    fields.get("buildScore").set(UnitType.Hero_Artanis, 0);
    fields.get("destroyScore").set(UnitType.Hero_Artanis, 2400);
    fields.get("size").set(UnitType.Hero_Artanis, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Artanis, 2);
    fields.get("tileHeight").set(UnitType.Hero_Artanis, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Artanis, 18);
    fields.get("dimensionUp").set(UnitType.Hero_Artanis, 16);
    fields.get("dimensionRight").set(UnitType.Hero_Artanis, 17);
    fields.get("dimensionDown").set(UnitType.Hero_Artanis, 15);
    fields.get("width").set(UnitType.Hero_Artanis, 36);
    fields.get("height").set(UnitType.Hero_Artanis, 32);
    fields.get("seekRange").set(UnitType.Hero_Artanis, 0);
    fields.get("sightRange").set(UnitType.Hero_Artanis, 320);
    fields.get("groundWeapon").set(UnitType.Hero_Artanis, WeaponType.Dual_Photon_Blasters_Artanis);
    fields.get("maxGroundHits").set(UnitType.Hero_Artanis, 1);
    fields.get("airWeapon").set(UnitType.Hero_Artanis, WeaponType.Anti_Matter_Missiles_Artanis);
    fields.get("maxAirHits").set(UnitType.Hero_Artanis, 1);
    fields.get("topSpeed").set(UnitType.Hero_Artanis, 3.90625);
    fields.get("acceleration").set(UnitType.Hero_Artanis, 48);
    fields.get("haltDistance").set(UnitType.Hero_Artanis, 17067);
    fields.get("turnRadius").set(UnitType.Hero_Artanis, 30);
    fields.get("canProduce").set(UnitType.Hero_Artanis, false);
    fields.get("canAttack").set(UnitType.Hero_Artanis, true);
    fields.get("canMove").set(UnitType.Hero_Artanis, true);
    fields.get("flyer").set(UnitType.Hero_Artanis, true);
    fields.get("regeneratesHP").set(UnitType.Hero_Artanis, false);
    fields.get("spellcaster").set(UnitType.Hero_Artanis, false);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Artanis, false);
    fields.get("invincible").set(UnitType.Hero_Artanis, false);
    fields.get("organic").set(UnitType.Hero_Artanis, false);
    fields.get("mechanical").set(UnitType.Hero_Artanis, true);
    fields.get("robotic").set(UnitType.Hero_Artanis, false);
    fields.get("detector").set(UnitType.Hero_Artanis, false);
    fields.get("resourceContainer").set(UnitType.Hero_Artanis, false);
    fields.get("resourceDepot").set(UnitType.Hero_Artanis, false);
    fields.get("refinery").set(UnitType.Hero_Artanis, false);
    fields.get("worker").set(UnitType.Hero_Artanis, false);
    fields.get("requiresPsi").set(UnitType.Hero_Artanis, false);
    fields.get("requiresCreep").set(UnitType.Hero_Artanis, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Artanis, false);
    fields.get("burrowable").set(UnitType.Hero_Artanis, false);
    fields.get("cloakable").set(UnitType.Hero_Artanis, false);
    fields.get("building").set(UnitType.Hero_Artanis, false);
    fields.get("addon").set(UnitType.Hero_Artanis, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Artanis, false);
    fields.get("neutral").set(UnitType.Hero_Artanis, false);
    fields.get("hero").set(UnitType.Hero_Artanis, true);
    fields.get("powerup").set(UnitType.Hero_Artanis, false);
    fields.get("beacon").set(UnitType.Hero_Artanis, false);
    fields.get("flagBeacon").set(UnitType.Hero_Artanis, false);
    fields.get("specialBuilding").set(UnitType.Hero_Artanis, false);
    fields.get("spell").set(UnitType.Hero_Artanis, false);
    fields.get("producesCreep").set(UnitType.Hero_Artanis, false);
    fields.get("producesLarva").set(UnitType.Hero_Artanis, false);
    fields.get("mineralField").set(UnitType.Hero_Artanis, false);
    fields.get("critter").set(UnitType.Hero_Artanis, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Artanis, false);
    fields.get("researchesWhat").set(UnitType.Hero_Artanis, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Artanis, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Critter_Rhynadon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Critter_Rhynadon, 89);
    fields.get("race").set(UnitType.Critter_Rhynadon, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Critter_Rhynadon, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Critter_Rhynadon, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Critter_Rhynadon, toMap());
    fields.get("requiredTech").set(UnitType.Critter_Rhynadon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Critter_Rhynadon, TechType.None);
    fields.get("abilities").set(UnitType.Critter_Rhynadon, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Critter_Rhynadon, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Critter_Rhynadon, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Critter_Rhynadon, 60);
    fields.get("maxShields").set(UnitType.Critter_Rhynadon, 0);
    fields.get("maxEnergy").set(UnitType.Critter_Rhynadon, 0);
    fields.get("armor").set(UnitType.Critter_Rhynadon, 0);
    fields.get("mineralPrice").set(UnitType.Critter_Rhynadon, 1);
    fields.get("gasPrice").set(UnitType.Critter_Rhynadon, 1);
    fields.get("buildTime").set(UnitType.Critter_Rhynadon, 1);
    fields.get("supplyRequired").set(UnitType.Critter_Rhynadon, 0);
    fields.get("supplyProvided").set(UnitType.Critter_Rhynadon, 0);
    fields.get("spaceRequired").set(UnitType.Critter_Rhynadon, 255);
    fields.get("spaceProvided").set(UnitType.Critter_Rhynadon, 0);
    fields.get("buildScore").set(UnitType.Critter_Rhynadon, 0);
    fields.get("destroyScore").set(UnitType.Critter_Rhynadon, 10);
    fields.get("size").set(UnitType.Critter_Rhynadon, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Critter_Rhynadon, 1);
    fields.get("tileHeight").set(UnitType.Critter_Rhynadon, 1);
    fields.get("dimensionLeft").set(UnitType.Critter_Rhynadon, 16);
    fields.get("dimensionUp").set(UnitType.Critter_Rhynadon, 16);
    fields.get("dimensionRight").set(UnitType.Critter_Rhynadon, 15);
    fields.get("dimensionDown").set(UnitType.Critter_Rhynadon, 15);
    fields.get("width").set(UnitType.Critter_Rhynadon, 32);
    fields.get("height").set(UnitType.Critter_Rhynadon, 32);
    fields.get("seekRange").set(UnitType.Critter_Rhynadon, 0);
    fields.get("sightRange").set(UnitType.Critter_Rhynadon, 224);
    fields.get("groundWeapon").set(UnitType.Critter_Rhynadon, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Critter_Rhynadon, 0);
    fields.get("airWeapon").set(UnitType.Critter_Rhynadon, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Critter_Rhynadon, 0);
    fields.get("topSpeed").set(UnitType.Critter_Rhynadon, 3.125);
    fields.get("acceleration").set(UnitType.Critter_Rhynadon, 1);
    fields.get("haltDistance").set(UnitType.Critter_Rhynadon, 1);
    fields.get("turnRadius").set(UnitType.Critter_Rhynadon, 27);
    fields.get("canProduce").set(UnitType.Critter_Rhynadon, false);
    fields.get("canAttack").set(UnitType.Critter_Rhynadon, false);
    fields.get("canMove").set(UnitType.Critter_Rhynadon, true);
    fields.get("flyer").set(UnitType.Critter_Rhynadon, false);
    fields.get("regeneratesHP").set(UnitType.Critter_Rhynadon, false);
    fields.get("spellcaster").set(UnitType.Critter_Rhynadon, false);
    fields.get("hasPermanentCloak").set(UnitType.Critter_Rhynadon, false);
    fields.get("invincible").set(UnitType.Critter_Rhynadon, false);
    fields.get("organic").set(UnitType.Critter_Rhynadon, true);
    fields.get("mechanical").set(UnitType.Critter_Rhynadon, false);
    fields.get("robotic").set(UnitType.Critter_Rhynadon, false);
    fields.get("detector").set(UnitType.Critter_Rhynadon, false);
    fields.get("resourceContainer").set(UnitType.Critter_Rhynadon, false);
    fields.get("resourceDepot").set(UnitType.Critter_Rhynadon, false);
    fields.get("refinery").set(UnitType.Critter_Rhynadon, false);
    fields.get("worker").set(UnitType.Critter_Rhynadon, false);
    fields.get("requiresPsi").set(UnitType.Critter_Rhynadon, false);
    fields.get("requiresCreep").set(UnitType.Critter_Rhynadon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Critter_Rhynadon, false);
    fields.get("burrowable").set(UnitType.Critter_Rhynadon, false);
    fields.get("cloakable").set(UnitType.Critter_Rhynadon, false);
    fields.get("building").set(UnitType.Critter_Rhynadon, false);
    fields.get("addon").set(UnitType.Critter_Rhynadon, false);
    fields.get("flyingBuilding").set(UnitType.Critter_Rhynadon, false);
    fields.get("neutral").set(UnitType.Critter_Rhynadon, true);
    fields.get("hero").set(UnitType.Critter_Rhynadon, false);
    fields.get("powerup").set(UnitType.Critter_Rhynadon, false);
    fields.get("beacon").set(UnitType.Critter_Rhynadon, false);
    fields.get("flagBeacon").set(UnitType.Critter_Rhynadon, false);
    fields.get("specialBuilding").set(UnitType.Critter_Rhynadon, false);
    fields.get("spell").set(UnitType.Critter_Rhynadon, false);
    fields.get("producesCreep").set(UnitType.Critter_Rhynadon, false);
    fields.get("producesLarva").set(UnitType.Critter_Rhynadon, false);
    fields.get("mineralField").set(UnitType.Critter_Rhynadon, false);
    fields.get("critter").set(UnitType.Critter_Rhynadon, true);
    fields.get("canBuildAddon").set(UnitType.Critter_Rhynadon, false);
    fields.get("researchesWhat").set(UnitType.Critter_Rhynadon, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Critter_Rhynadon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Critter_Bengalaas() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Critter_Bengalaas, 90);
    fields.get("race").set(UnitType.Critter_Bengalaas, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Critter_Bengalaas, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Critter_Bengalaas, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Critter_Bengalaas, toMap());
    fields.get("requiredTech").set(UnitType.Critter_Bengalaas, TechType.None);
    fields.get("cloakingTech").set(UnitType.Critter_Bengalaas, TechType.None);
    fields.get("abilities").set(UnitType.Critter_Bengalaas, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Critter_Bengalaas, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Critter_Bengalaas, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Critter_Bengalaas, 60);
    fields.get("maxShields").set(UnitType.Critter_Bengalaas, 0);
    fields.get("maxEnergy").set(UnitType.Critter_Bengalaas, 0);
    fields.get("armor").set(UnitType.Critter_Bengalaas, 0);
    fields.get("mineralPrice").set(UnitType.Critter_Bengalaas, 1);
    fields.get("gasPrice").set(UnitType.Critter_Bengalaas, 1);
    fields.get("buildTime").set(UnitType.Critter_Bengalaas, 1);
    fields.get("supplyRequired").set(UnitType.Critter_Bengalaas, 0);
    fields.get("supplyProvided").set(UnitType.Critter_Bengalaas, 0);
    fields.get("spaceRequired").set(UnitType.Critter_Bengalaas, 255);
    fields.get("spaceProvided").set(UnitType.Critter_Bengalaas, 0);
    fields.get("buildScore").set(UnitType.Critter_Bengalaas, 0);
    fields.get("destroyScore").set(UnitType.Critter_Bengalaas, 10);
    fields.get("size").set(UnitType.Critter_Bengalaas, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Critter_Bengalaas, 1);
    fields.get("tileHeight").set(UnitType.Critter_Bengalaas, 1);
    fields.get("dimensionLeft").set(UnitType.Critter_Bengalaas, 16);
    fields.get("dimensionUp").set(UnitType.Critter_Bengalaas, 16);
    fields.get("dimensionRight").set(UnitType.Critter_Bengalaas, 15);
    fields.get("dimensionDown").set(UnitType.Critter_Bengalaas, 15);
    fields.get("width").set(UnitType.Critter_Bengalaas, 32);
    fields.get("height").set(UnitType.Critter_Bengalaas, 32);
    fields.get("seekRange").set(UnitType.Critter_Bengalaas, 0);
    fields.get("sightRange").set(UnitType.Critter_Bengalaas, 224);
    fields.get("groundWeapon").set(UnitType.Critter_Bengalaas, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Critter_Bengalaas, 0);
    fields.get("airWeapon").set(UnitType.Critter_Bengalaas, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Critter_Bengalaas, 0);
    fields.get("topSpeed").set(UnitType.Critter_Bengalaas, 3.125);
    fields.get("acceleration").set(UnitType.Critter_Bengalaas, 1);
    fields.get("haltDistance").set(UnitType.Critter_Bengalaas, 1);
    fields.get("turnRadius").set(UnitType.Critter_Bengalaas, 27);
    fields.get("canProduce").set(UnitType.Critter_Bengalaas, false);
    fields.get("canAttack").set(UnitType.Critter_Bengalaas, false);
    fields.get("canMove").set(UnitType.Critter_Bengalaas, true);
    fields.get("flyer").set(UnitType.Critter_Bengalaas, false);
    fields.get("regeneratesHP").set(UnitType.Critter_Bengalaas, false);
    fields.get("spellcaster").set(UnitType.Critter_Bengalaas, false);
    fields.get("hasPermanentCloak").set(UnitType.Critter_Bengalaas, false);
    fields.get("invincible").set(UnitType.Critter_Bengalaas, false);
    fields.get("organic").set(UnitType.Critter_Bengalaas, true);
    fields.get("mechanical").set(UnitType.Critter_Bengalaas, false);
    fields.get("robotic").set(UnitType.Critter_Bengalaas, false);
    fields.get("detector").set(UnitType.Critter_Bengalaas, false);
    fields.get("resourceContainer").set(UnitType.Critter_Bengalaas, false);
    fields.get("resourceDepot").set(UnitType.Critter_Bengalaas, false);
    fields.get("refinery").set(UnitType.Critter_Bengalaas, false);
    fields.get("worker").set(UnitType.Critter_Bengalaas, false);
    fields.get("requiresPsi").set(UnitType.Critter_Bengalaas, false);
    fields.get("requiresCreep").set(UnitType.Critter_Bengalaas, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Critter_Bengalaas, false);
    fields.get("burrowable").set(UnitType.Critter_Bengalaas, false);
    fields.get("cloakable").set(UnitType.Critter_Bengalaas, false);
    fields.get("building").set(UnitType.Critter_Bengalaas, false);
    fields.get("addon").set(UnitType.Critter_Bengalaas, false);
    fields.get("flyingBuilding").set(UnitType.Critter_Bengalaas, false);
    fields.get("neutral").set(UnitType.Critter_Bengalaas, true);
    fields.get("hero").set(UnitType.Critter_Bengalaas, false);
    fields.get("powerup").set(UnitType.Critter_Bengalaas, false);
    fields.get("beacon").set(UnitType.Critter_Bengalaas, false);
    fields.get("flagBeacon").set(UnitType.Critter_Bengalaas, false);
    fields.get("specialBuilding").set(UnitType.Critter_Bengalaas, false);
    fields.get("spell").set(UnitType.Critter_Bengalaas, false);
    fields.get("producesCreep").set(UnitType.Critter_Bengalaas, false);
    fields.get("producesLarva").set(UnitType.Critter_Bengalaas, false);
    fields.get("mineralField").set(UnitType.Critter_Bengalaas, false);
    fields.get("critter").set(UnitType.Critter_Bengalaas, true);
    fields.get("canBuildAddon").set(UnitType.Critter_Bengalaas, false);
    fields.get("researchesWhat").set(UnitType.Critter_Bengalaas, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Critter_Bengalaas, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Cargo_Ship() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Cargo_Ship, 91);
    fields.get("race").set(UnitType.Special_Cargo_Ship, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Cargo_Ship, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Cargo_Ship, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Cargo_Ship, toMap());
    fields.get("requiredTech").set(UnitType.Special_Cargo_Ship, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Cargo_Ship, TechType.None);
    fields.get("abilities").set(UnitType.Special_Cargo_Ship, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Cargo_Ship, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Cargo_Ship, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Cargo_Ship, 125);
    fields.get("maxShields").set(UnitType.Special_Cargo_Ship, 0);
    fields.get("maxEnergy").set(UnitType.Special_Cargo_Ship, 0);
    fields.get("armor").set(UnitType.Special_Cargo_Ship, 1);
    fields.get("mineralPrice").set(UnitType.Special_Cargo_Ship, 100);
    fields.get("gasPrice").set(UnitType.Special_Cargo_Ship, 100);
    fields.get("buildTime").set(UnitType.Special_Cargo_Ship, 600);
    fields.get("supplyRequired").set(UnitType.Special_Cargo_Ship, 0);
    fields.get("supplyProvided").set(UnitType.Special_Cargo_Ship, 0);
    fields.get("spaceRequired").set(UnitType.Special_Cargo_Ship, 255);
    fields.get("spaceProvided").set(UnitType.Special_Cargo_Ship, 0);
    fields.get("buildScore").set(UnitType.Special_Cargo_Ship, 0);
    fields.get("destroyScore").set(UnitType.Special_Cargo_Ship, 0);
    fields.get("size").set(UnitType.Special_Cargo_Ship, UnitSizeType.Medium);
    fields.get("tileWidth").set(UnitType.Special_Cargo_Ship, 1);
    fields.get("tileHeight").set(UnitType.Special_Cargo_Ship, 1);
    fields.get("dimensionLeft").set(UnitType.Special_Cargo_Ship, 15);
    fields.get("dimensionUp").set(UnitType.Special_Cargo_Ship, 15);
    fields.get("dimensionRight").set(UnitType.Special_Cargo_Ship, 16);
    fields.get("dimensionDown").set(UnitType.Special_Cargo_Ship, 16);
    fields.get("width").set(UnitType.Special_Cargo_Ship, 32);
    fields.get("height").set(UnitType.Special_Cargo_Ship, 32);
    fields.get("seekRange").set(UnitType.Special_Cargo_Ship, 256);
    fields.get("sightRange").set(UnitType.Special_Cargo_Ship, 256);
    fields.get("groundWeapon").set(UnitType.Special_Cargo_Ship, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Cargo_Ship, 0);
    fields.get("airWeapon").set(UnitType.Special_Cargo_Ship, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Cargo_Ship, 0);
    fields.get("topSpeed").set(UnitType.Special_Cargo_Ship, 0.0);
    fields.get("acceleration").set(UnitType.Special_Cargo_Ship, 0);
    fields.get("haltDistance").set(UnitType.Special_Cargo_Ship, 0);
    fields.get("turnRadius").set(UnitType.Special_Cargo_Ship, 0);
    fields.get("canProduce").set(UnitType.Special_Cargo_Ship, false);
    fields.get("canAttack").set(UnitType.Special_Cargo_Ship, false);
    fields.get("canMove").set(UnitType.Special_Cargo_Ship, false);
    fields.get("flyer").set(UnitType.Special_Cargo_Ship, false);
    fields.get("regeneratesHP").set(UnitType.Special_Cargo_Ship, false);
    fields.get("spellcaster").set(UnitType.Special_Cargo_Ship, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Cargo_Ship, false);
    fields.get("invincible").set(UnitType.Special_Cargo_Ship, false);
    fields.get("organic").set(UnitType.Special_Cargo_Ship, false);
    fields.get("mechanical").set(UnitType.Special_Cargo_Ship, false);
    fields.get("robotic").set(UnitType.Special_Cargo_Ship, false);
    fields.get("detector").set(UnitType.Special_Cargo_Ship, false);
    fields.get("resourceContainer").set(UnitType.Special_Cargo_Ship, false);
    fields.get("resourceDepot").set(UnitType.Special_Cargo_Ship, false);
    fields.get("refinery").set(UnitType.Special_Cargo_Ship, false);
    fields.get("worker").set(UnitType.Special_Cargo_Ship, false);
    fields.get("requiresPsi").set(UnitType.Special_Cargo_Ship, false);
    fields.get("requiresCreep").set(UnitType.Special_Cargo_Ship, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Cargo_Ship, false);
    fields.get("burrowable").set(UnitType.Special_Cargo_Ship, false);
    fields.get("cloakable").set(UnitType.Special_Cargo_Ship, false);
    fields.get("building").set(UnitType.Special_Cargo_Ship, false);
    fields.get("addon").set(UnitType.Special_Cargo_Ship, false);
    fields.get("flyingBuilding").set(UnitType.Special_Cargo_Ship, false);
    fields.get("neutral").set(UnitType.Special_Cargo_Ship, false);
    fields.get("hero").set(UnitType.Special_Cargo_Ship, false);
    fields.get("powerup").set(UnitType.Special_Cargo_Ship, false);
    fields.get("beacon").set(UnitType.Special_Cargo_Ship, false);
    fields.get("flagBeacon").set(UnitType.Special_Cargo_Ship, false);
    fields.get("specialBuilding").set(UnitType.Special_Cargo_Ship, false);
    fields.get("spell").set(UnitType.Special_Cargo_Ship, false);
    fields.get("producesCreep").set(UnitType.Special_Cargo_Ship, false);
    fields.get("producesLarva").set(UnitType.Special_Cargo_Ship, false);
    fields.get("mineralField").set(UnitType.Special_Cargo_Ship, false);
    fields.get("critter").set(UnitType.Special_Cargo_Ship, false);
    fields.get("canBuildAddon").set(UnitType.Special_Cargo_Ship, false);
    fields.get("researchesWhat").set(UnitType.Special_Cargo_Ship, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Cargo_Ship, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Mercenary_Gunship() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Mercenary_Gunship, 92);
    fields.get("race").set(UnitType.Special_Mercenary_Gunship, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Mercenary_Gunship, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Special_Mercenary_Gunship, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Mercenary_Gunship, toMap());
    fields.get("requiredTech").set(UnitType.Special_Mercenary_Gunship, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Mercenary_Gunship, TechType.None);
    fields.get("abilities").set(UnitType.Special_Mercenary_Gunship, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Mercenary_Gunship, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Mercenary_Gunship, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Mercenary_Gunship, 125);
    fields.get("maxShields").set(UnitType.Special_Mercenary_Gunship, 0);
    fields.get("maxEnergy").set(UnitType.Special_Mercenary_Gunship, 0);
    fields.get("armor").set(UnitType.Special_Mercenary_Gunship, 1);
    fields.get("mineralPrice").set(UnitType.Special_Mercenary_Gunship, 100);
    fields.get("gasPrice").set(UnitType.Special_Mercenary_Gunship, 100);
    fields.get("buildTime").set(UnitType.Special_Mercenary_Gunship, 600);
    fields.get("supplyRequired").set(UnitType.Special_Mercenary_Gunship, 0);
    fields.get("supplyProvided").set(UnitType.Special_Mercenary_Gunship, 0);
    fields.get("spaceRequired").set(UnitType.Special_Mercenary_Gunship, 255);
    fields.get("spaceProvided").set(UnitType.Special_Mercenary_Gunship, 0);
    fields.get("buildScore").set(UnitType.Special_Mercenary_Gunship, 0);
    fields.get("destroyScore").set(UnitType.Special_Mercenary_Gunship, 0);
    fields.get("size").set(UnitType.Special_Mercenary_Gunship, UnitSizeType.Medium);
    fields.get("tileWidth").set(UnitType.Special_Mercenary_Gunship, 1);
    fields.get("tileHeight").set(UnitType.Special_Mercenary_Gunship, 1);
    fields.get("dimensionLeft").set(UnitType.Special_Mercenary_Gunship, 15);
    fields.get("dimensionUp").set(UnitType.Special_Mercenary_Gunship, 15);
    fields.get("dimensionRight").set(UnitType.Special_Mercenary_Gunship, 16);
    fields.get("dimensionDown").set(UnitType.Special_Mercenary_Gunship, 16);
    fields.get("width").set(UnitType.Special_Mercenary_Gunship, 32);
    fields.get("height").set(UnitType.Special_Mercenary_Gunship, 32);
    fields.get("seekRange").set(UnitType.Special_Mercenary_Gunship, 128);
    fields.get("sightRange").set(UnitType.Special_Mercenary_Gunship, 224);
    fields.get("groundWeapon").set(UnitType.Special_Mercenary_Gunship, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Mercenary_Gunship, 0);
    fields.get("airWeapon").set(UnitType.Special_Mercenary_Gunship, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Mercenary_Gunship, 0);
    fields.get("topSpeed").set(UnitType.Special_Mercenary_Gunship, 0.0);
    fields.get("acceleration").set(UnitType.Special_Mercenary_Gunship, 0);
    fields.get("haltDistance").set(UnitType.Special_Mercenary_Gunship, 0);
    fields.get("turnRadius").set(UnitType.Special_Mercenary_Gunship, 0);
    fields.get("canProduce").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("canAttack").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("canMove").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("flyer").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("regeneratesHP").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("spellcaster").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("invincible").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("organic").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("mechanical").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("robotic").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("detector").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("resourceContainer").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("resourceDepot").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("refinery").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("worker").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("requiresPsi").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("requiresCreep").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("burrowable").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("cloakable").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("building").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("addon").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("flyingBuilding").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("neutral").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("hero").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("powerup").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("beacon").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("flagBeacon").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("specialBuilding").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("spell").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("producesCreep").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("producesLarva").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("mineralField").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("critter").set(UnitType.Special_Mercenary_Gunship, false);
    fields.get("canBuildAddon").set(UnitType.Special_Mercenary_Gunship, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Mercenary_Gunship, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Mercenary_Gunship, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Critter_Scantid() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Critter_Scantid, 93);
    fields.get("race").set(UnitType.Critter_Scantid, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Critter_Scantid, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Critter_Scantid, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Critter_Scantid, toMap());
    fields.get("requiredTech").set(UnitType.Critter_Scantid, TechType.None);
    fields.get("cloakingTech").set(UnitType.Critter_Scantid, TechType.None);
    fields.get("abilities").set(UnitType.Critter_Scantid, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Critter_Scantid, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Critter_Scantid, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Critter_Scantid, 60);
    fields.get("maxShields").set(UnitType.Critter_Scantid, 0);
    fields.get("maxEnergy").set(UnitType.Critter_Scantid, 0);
    fields.get("armor").set(UnitType.Critter_Scantid, 0);
    fields.get("mineralPrice").set(UnitType.Critter_Scantid, 1);
    fields.get("gasPrice").set(UnitType.Critter_Scantid, 1);
    fields.get("buildTime").set(UnitType.Critter_Scantid, 1);
    fields.get("supplyRequired").set(UnitType.Critter_Scantid, 0);
    fields.get("supplyProvided").set(UnitType.Critter_Scantid, 0);
    fields.get("spaceRequired").set(UnitType.Critter_Scantid, 255);
    fields.get("spaceProvided").set(UnitType.Critter_Scantid, 0);
    fields.get("buildScore").set(UnitType.Critter_Scantid, 0);
    fields.get("destroyScore").set(UnitType.Critter_Scantid, 10);
    fields.get("size").set(UnitType.Critter_Scantid, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Critter_Scantid, 1);
    fields.get("tileHeight").set(UnitType.Critter_Scantid, 1);
    fields.get("dimensionLeft").set(UnitType.Critter_Scantid, 16);
    fields.get("dimensionUp").set(UnitType.Critter_Scantid, 16);
    fields.get("dimensionRight").set(UnitType.Critter_Scantid, 15);
    fields.get("dimensionDown").set(UnitType.Critter_Scantid, 15);
    fields.get("width").set(UnitType.Critter_Scantid, 32);
    fields.get("height").set(UnitType.Critter_Scantid, 32);
    fields.get("seekRange").set(UnitType.Critter_Scantid, 0);
    fields.get("sightRange").set(UnitType.Critter_Scantid, 224);
    fields.get("groundWeapon").set(UnitType.Critter_Scantid, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Critter_Scantid, 0);
    fields.get("airWeapon").set(UnitType.Critter_Scantid, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Critter_Scantid, 0);
    fields.get("topSpeed").set(UnitType.Critter_Scantid, 3.125);
    fields.get("acceleration").set(UnitType.Critter_Scantid, 1);
    fields.get("haltDistance").set(UnitType.Critter_Scantid, 1);
    fields.get("turnRadius").set(UnitType.Critter_Scantid, 27);
    fields.get("canProduce").set(UnitType.Critter_Scantid, false);
    fields.get("canAttack").set(UnitType.Critter_Scantid, false);
    fields.get("canMove").set(UnitType.Critter_Scantid, true);
    fields.get("flyer").set(UnitType.Critter_Scantid, false);
    fields.get("regeneratesHP").set(UnitType.Critter_Scantid, false);
    fields.get("spellcaster").set(UnitType.Critter_Scantid, false);
    fields.get("hasPermanentCloak").set(UnitType.Critter_Scantid, false);
    fields.get("invincible").set(UnitType.Critter_Scantid, false);
    fields.get("organic").set(UnitType.Critter_Scantid, true);
    fields.get("mechanical").set(UnitType.Critter_Scantid, false);
    fields.get("robotic").set(UnitType.Critter_Scantid, false);
    fields.get("detector").set(UnitType.Critter_Scantid, false);
    fields.get("resourceContainer").set(UnitType.Critter_Scantid, false);
    fields.get("resourceDepot").set(UnitType.Critter_Scantid, false);
    fields.get("refinery").set(UnitType.Critter_Scantid, false);
    fields.get("worker").set(UnitType.Critter_Scantid, false);
    fields.get("requiresPsi").set(UnitType.Critter_Scantid, false);
    fields.get("requiresCreep").set(UnitType.Critter_Scantid, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Critter_Scantid, false);
    fields.get("burrowable").set(UnitType.Critter_Scantid, false);
    fields.get("cloakable").set(UnitType.Critter_Scantid, false);
    fields.get("building").set(UnitType.Critter_Scantid, false);
    fields.get("addon").set(UnitType.Critter_Scantid, false);
    fields.get("flyingBuilding").set(UnitType.Critter_Scantid, false);
    fields.get("neutral").set(UnitType.Critter_Scantid, true);
    fields.get("hero").set(UnitType.Critter_Scantid, false);
    fields.get("powerup").set(UnitType.Critter_Scantid, false);
    fields.get("beacon").set(UnitType.Critter_Scantid, false);
    fields.get("flagBeacon").set(UnitType.Critter_Scantid, false);
    fields.get("specialBuilding").set(UnitType.Critter_Scantid, false);
    fields.get("spell").set(UnitType.Critter_Scantid, false);
    fields.get("producesCreep").set(UnitType.Critter_Scantid, false);
    fields.get("producesLarva").set(UnitType.Critter_Scantid, false);
    fields.get("mineralField").set(UnitType.Critter_Scantid, false);
    fields.get("critter").set(UnitType.Critter_Scantid, true);
    fields.get("canBuildAddon").set(UnitType.Critter_Scantid, false);
    fields.get("researchesWhat").set(UnitType.Critter_Scantid, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Critter_Scantid, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Critter_Kakaru() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Critter_Kakaru, 94);
    fields.get("race").set(UnitType.Critter_Kakaru, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Critter_Kakaru, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Critter_Kakaru, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Critter_Kakaru, toMap());
    fields.get("requiredTech").set(UnitType.Critter_Kakaru, TechType.None);
    fields.get("cloakingTech").set(UnitType.Critter_Kakaru, TechType.None);
    fields.get("abilities").set(UnitType.Critter_Kakaru, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Critter_Kakaru, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Critter_Kakaru, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Critter_Kakaru, 60);
    fields.get("maxShields").set(UnitType.Critter_Kakaru, 0);
    fields.get("maxEnergy").set(UnitType.Critter_Kakaru, 0);
    fields.get("armor").set(UnitType.Critter_Kakaru, 0);
    fields.get("mineralPrice").set(UnitType.Critter_Kakaru, 1);
    fields.get("gasPrice").set(UnitType.Critter_Kakaru, 1);
    fields.get("buildTime").set(UnitType.Critter_Kakaru, 1);
    fields.get("supplyRequired").set(UnitType.Critter_Kakaru, 0);
    fields.get("supplyProvided").set(UnitType.Critter_Kakaru, 0);
    fields.get("spaceRequired").set(UnitType.Critter_Kakaru, 255);
    fields.get("spaceProvided").set(UnitType.Critter_Kakaru, 0);
    fields.get("buildScore").set(UnitType.Critter_Kakaru, 0);
    fields.get("destroyScore").set(UnitType.Critter_Kakaru, 10);
    fields.get("size").set(UnitType.Critter_Kakaru, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Critter_Kakaru, 1);
    fields.get("tileHeight").set(UnitType.Critter_Kakaru, 1);
    fields.get("dimensionLeft").set(UnitType.Critter_Kakaru, 16);
    fields.get("dimensionUp").set(UnitType.Critter_Kakaru, 16);
    fields.get("dimensionRight").set(UnitType.Critter_Kakaru, 15);
    fields.get("dimensionDown").set(UnitType.Critter_Kakaru, 15);
    fields.get("width").set(UnitType.Critter_Kakaru, 32);
    fields.get("height").set(UnitType.Critter_Kakaru, 32);
    fields.get("seekRange").set(UnitType.Critter_Kakaru, 0);
    fields.get("sightRange").set(UnitType.Critter_Kakaru, 224);
    fields.get("groundWeapon").set(UnitType.Critter_Kakaru, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Critter_Kakaru, 0);
    fields.get("airWeapon").set(UnitType.Critter_Kakaru, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Critter_Kakaru, 0);
    fields.get("topSpeed").set(UnitType.Critter_Kakaru, 3.90625);
    fields.get("acceleration").set(UnitType.Critter_Kakaru, 16);
    fields.get("haltDistance").set(UnitType.Critter_Kakaru, 51200);
    fields.get("turnRadius").set(UnitType.Critter_Kakaru, 14);
    fields.get("canProduce").set(UnitType.Critter_Kakaru, false);
    fields.get("canAttack").set(UnitType.Critter_Kakaru, false);
    fields.get("canMove").set(UnitType.Critter_Kakaru, true);
    fields.get("flyer").set(UnitType.Critter_Kakaru, true);
    fields.get("regeneratesHP").set(UnitType.Critter_Kakaru, false);
    fields.get("spellcaster").set(UnitType.Critter_Kakaru, false);
    fields.get("hasPermanentCloak").set(UnitType.Critter_Kakaru, false);
    fields.get("invincible").set(UnitType.Critter_Kakaru, false);
    fields.get("organic").set(UnitType.Critter_Kakaru, true);
    fields.get("mechanical").set(UnitType.Critter_Kakaru, false);
    fields.get("robotic").set(UnitType.Critter_Kakaru, false);
    fields.get("detector").set(UnitType.Critter_Kakaru, false);
    fields.get("resourceContainer").set(UnitType.Critter_Kakaru, false);
    fields.get("resourceDepot").set(UnitType.Critter_Kakaru, false);
    fields.get("refinery").set(UnitType.Critter_Kakaru, false);
    fields.get("worker").set(UnitType.Critter_Kakaru, false);
    fields.get("requiresPsi").set(UnitType.Critter_Kakaru, false);
    fields.get("requiresCreep").set(UnitType.Critter_Kakaru, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Critter_Kakaru, false);
    fields.get("burrowable").set(UnitType.Critter_Kakaru, false);
    fields.get("cloakable").set(UnitType.Critter_Kakaru, false);
    fields.get("building").set(UnitType.Critter_Kakaru, false);
    fields.get("addon").set(UnitType.Critter_Kakaru, false);
    fields.get("flyingBuilding").set(UnitType.Critter_Kakaru, false);
    fields.get("neutral").set(UnitType.Critter_Kakaru, true);
    fields.get("hero").set(UnitType.Critter_Kakaru, false);
    fields.get("powerup").set(UnitType.Critter_Kakaru, false);
    fields.get("beacon").set(UnitType.Critter_Kakaru, false);
    fields.get("flagBeacon").set(UnitType.Critter_Kakaru, false);
    fields.get("specialBuilding").set(UnitType.Critter_Kakaru, false);
    fields.get("spell").set(UnitType.Critter_Kakaru, false);
    fields.get("producesCreep").set(UnitType.Critter_Kakaru, false);
    fields.get("producesLarva").set(UnitType.Critter_Kakaru, false);
    fields.get("mineralField").set(UnitType.Critter_Kakaru, false);
    fields.get("critter").set(UnitType.Critter_Kakaru, true);
    fields.get("canBuildAddon").set(UnitType.Critter_Kakaru, false);
    fields.get("researchesWhat").set(UnitType.Critter_Kakaru, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Critter_Kakaru, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Critter_Ragnasaur() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Critter_Ragnasaur, 95);
    fields.get("race").set(UnitType.Critter_Ragnasaur, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Critter_Ragnasaur, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Critter_Ragnasaur, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Critter_Ragnasaur, toMap());
    fields.get("requiredTech").set(UnitType.Critter_Ragnasaur, TechType.None);
    fields.get("cloakingTech").set(UnitType.Critter_Ragnasaur, TechType.None);
    fields.get("abilities").set(UnitType.Critter_Ragnasaur, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Critter_Ragnasaur, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Critter_Ragnasaur, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Critter_Ragnasaur, 60);
    fields.get("maxShields").set(UnitType.Critter_Ragnasaur, 0);
    fields.get("maxEnergy").set(UnitType.Critter_Ragnasaur, 0);
    fields.get("armor").set(UnitType.Critter_Ragnasaur, 0);
    fields.get("mineralPrice").set(UnitType.Critter_Ragnasaur, 1);
    fields.get("gasPrice").set(UnitType.Critter_Ragnasaur, 1);
    fields.get("buildTime").set(UnitType.Critter_Ragnasaur, 1);
    fields.get("supplyRequired").set(UnitType.Critter_Ragnasaur, 0);
    fields.get("supplyProvided").set(UnitType.Critter_Ragnasaur, 0);
    fields.get("spaceRequired").set(UnitType.Critter_Ragnasaur, 255);
    fields.get("spaceProvided").set(UnitType.Critter_Ragnasaur, 0);
    fields.get("buildScore").set(UnitType.Critter_Ragnasaur, 0);
    fields.get("destroyScore").set(UnitType.Critter_Ragnasaur, 10);
    fields.get("size").set(UnitType.Critter_Ragnasaur, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Critter_Ragnasaur, 1);
    fields.get("tileHeight").set(UnitType.Critter_Ragnasaur, 1);
    fields.get("dimensionLeft").set(UnitType.Critter_Ragnasaur, 16);
    fields.get("dimensionUp").set(UnitType.Critter_Ragnasaur, 16);
    fields.get("dimensionRight").set(UnitType.Critter_Ragnasaur, 15);
    fields.get("dimensionDown").set(UnitType.Critter_Ragnasaur, 15);
    fields.get("width").set(UnitType.Critter_Ragnasaur, 32);
    fields.get("height").set(UnitType.Critter_Ragnasaur, 32);
    fields.get("seekRange").set(UnitType.Critter_Ragnasaur, 0);
    fields.get("sightRange").set(UnitType.Critter_Ragnasaur, 224);
    fields.get("groundWeapon").set(UnitType.Critter_Ragnasaur, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Critter_Ragnasaur, 0);
    fields.get("airWeapon").set(UnitType.Critter_Ragnasaur, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Critter_Ragnasaur, 0);
    fields.get("topSpeed").set(UnitType.Critter_Ragnasaur, 3.125);
    fields.get("acceleration").set(UnitType.Critter_Ragnasaur, 1);
    fields.get("haltDistance").set(UnitType.Critter_Ragnasaur, 1);
    fields.get("turnRadius").set(UnitType.Critter_Ragnasaur, 27);
    fields.get("canProduce").set(UnitType.Critter_Ragnasaur, false);
    fields.get("canAttack").set(UnitType.Critter_Ragnasaur, false);
    fields.get("canMove").set(UnitType.Critter_Ragnasaur, true);
    fields.get("flyer").set(UnitType.Critter_Ragnasaur, false);
    fields.get("regeneratesHP").set(UnitType.Critter_Ragnasaur, false);
    fields.get("spellcaster").set(UnitType.Critter_Ragnasaur, false);
    fields.get("hasPermanentCloak").set(UnitType.Critter_Ragnasaur, false);
    fields.get("invincible").set(UnitType.Critter_Ragnasaur, false);
    fields.get("organic").set(UnitType.Critter_Ragnasaur, true);
    fields.get("mechanical").set(UnitType.Critter_Ragnasaur, false);
    fields.get("robotic").set(UnitType.Critter_Ragnasaur, false);
    fields.get("detector").set(UnitType.Critter_Ragnasaur, false);
    fields.get("resourceContainer").set(UnitType.Critter_Ragnasaur, false);
    fields.get("resourceDepot").set(UnitType.Critter_Ragnasaur, false);
    fields.get("refinery").set(UnitType.Critter_Ragnasaur, false);
    fields.get("worker").set(UnitType.Critter_Ragnasaur, false);
    fields.get("requiresPsi").set(UnitType.Critter_Ragnasaur, false);
    fields.get("requiresCreep").set(UnitType.Critter_Ragnasaur, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Critter_Ragnasaur, false);
    fields.get("burrowable").set(UnitType.Critter_Ragnasaur, false);
    fields.get("cloakable").set(UnitType.Critter_Ragnasaur, false);
    fields.get("building").set(UnitType.Critter_Ragnasaur, false);
    fields.get("addon").set(UnitType.Critter_Ragnasaur, false);
    fields.get("flyingBuilding").set(UnitType.Critter_Ragnasaur, false);
    fields.get("neutral").set(UnitType.Critter_Ragnasaur, true);
    fields.get("hero").set(UnitType.Critter_Ragnasaur, false);
    fields.get("powerup").set(UnitType.Critter_Ragnasaur, false);
    fields.get("beacon").set(UnitType.Critter_Ragnasaur, false);
    fields.get("flagBeacon").set(UnitType.Critter_Ragnasaur, false);
    fields.get("specialBuilding").set(UnitType.Critter_Ragnasaur, false);
    fields.get("spell").set(UnitType.Critter_Ragnasaur, false);
    fields.get("producesCreep").set(UnitType.Critter_Ragnasaur, false);
    fields.get("producesLarva").set(UnitType.Critter_Ragnasaur, false);
    fields.get("mineralField").set(UnitType.Critter_Ragnasaur, false);
    fields.get("critter").set(UnitType.Critter_Ragnasaur, true);
    fields.get("canBuildAddon").set(UnitType.Critter_Ragnasaur, false);
    fields.get("researchesWhat").set(UnitType.Critter_Ragnasaur, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Critter_Ragnasaur, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Critter_Ursadon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Critter_Ursadon, 96);
    fields.get("race").set(UnitType.Critter_Ursadon, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Critter_Ursadon, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Critter_Ursadon, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Critter_Ursadon, toMap());
    fields.get("requiredTech").set(UnitType.Critter_Ursadon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Critter_Ursadon, TechType.None);
    fields.get("abilities").set(UnitType.Critter_Ursadon, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Critter_Ursadon, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Critter_Ursadon, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Critter_Ursadon, 60);
    fields.get("maxShields").set(UnitType.Critter_Ursadon, 0);
    fields.get("maxEnergy").set(UnitType.Critter_Ursadon, 0);
    fields.get("armor").set(UnitType.Critter_Ursadon, 0);
    fields.get("mineralPrice").set(UnitType.Critter_Ursadon, 1);
    fields.get("gasPrice").set(UnitType.Critter_Ursadon, 1);
    fields.get("buildTime").set(UnitType.Critter_Ursadon, 1);
    fields.get("supplyRequired").set(UnitType.Critter_Ursadon, 0);
    fields.get("supplyProvided").set(UnitType.Critter_Ursadon, 0);
    fields.get("spaceRequired").set(UnitType.Critter_Ursadon, 255);
    fields.get("spaceProvided").set(UnitType.Critter_Ursadon, 0);
    fields.get("buildScore").set(UnitType.Critter_Ursadon, 0);
    fields.get("destroyScore").set(UnitType.Critter_Ursadon, 10);
    fields.get("size").set(UnitType.Critter_Ursadon, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Critter_Ursadon, 1);
    fields.get("tileHeight").set(UnitType.Critter_Ursadon, 1);
    fields.get("dimensionLeft").set(UnitType.Critter_Ursadon, 16);
    fields.get("dimensionUp").set(UnitType.Critter_Ursadon, 16);
    fields.get("dimensionRight").set(UnitType.Critter_Ursadon, 15);
    fields.get("dimensionDown").set(UnitType.Critter_Ursadon, 15);
    fields.get("width").set(UnitType.Critter_Ursadon, 32);
    fields.get("height").set(UnitType.Critter_Ursadon, 32);
    fields.get("seekRange").set(UnitType.Critter_Ursadon, 0);
    fields.get("sightRange").set(UnitType.Critter_Ursadon, 224);
    fields.get("groundWeapon").set(UnitType.Critter_Ursadon, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Critter_Ursadon, 0);
    fields.get("airWeapon").set(UnitType.Critter_Ursadon, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Critter_Ursadon, 0);
    fields.get("topSpeed").set(UnitType.Critter_Ursadon, 3.125);
    fields.get("acceleration").set(UnitType.Critter_Ursadon, 1);
    fields.get("haltDistance").set(UnitType.Critter_Ursadon, 1);
    fields.get("turnRadius").set(UnitType.Critter_Ursadon, 27);
    fields.get("canProduce").set(UnitType.Critter_Ursadon, false);
    fields.get("canAttack").set(UnitType.Critter_Ursadon, false);
    fields.get("canMove").set(UnitType.Critter_Ursadon, true);
    fields.get("flyer").set(UnitType.Critter_Ursadon, false);
    fields.get("regeneratesHP").set(UnitType.Critter_Ursadon, false);
    fields.get("spellcaster").set(UnitType.Critter_Ursadon, false);
    fields.get("hasPermanentCloak").set(UnitType.Critter_Ursadon, false);
    fields.get("invincible").set(UnitType.Critter_Ursadon, false);
    fields.get("organic").set(UnitType.Critter_Ursadon, true);
    fields.get("mechanical").set(UnitType.Critter_Ursadon, false);
    fields.get("robotic").set(UnitType.Critter_Ursadon, false);
    fields.get("detector").set(UnitType.Critter_Ursadon, false);
    fields.get("resourceContainer").set(UnitType.Critter_Ursadon, false);
    fields.get("resourceDepot").set(UnitType.Critter_Ursadon, false);
    fields.get("refinery").set(UnitType.Critter_Ursadon, false);
    fields.get("worker").set(UnitType.Critter_Ursadon, false);
    fields.get("requiresPsi").set(UnitType.Critter_Ursadon, false);
    fields.get("requiresCreep").set(UnitType.Critter_Ursadon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Critter_Ursadon, false);
    fields.get("burrowable").set(UnitType.Critter_Ursadon, false);
    fields.get("cloakable").set(UnitType.Critter_Ursadon, false);
    fields.get("building").set(UnitType.Critter_Ursadon, false);
    fields.get("addon").set(UnitType.Critter_Ursadon, false);
    fields.get("flyingBuilding").set(UnitType.Critter_Ursadon, false);
    fields.get("neutral").set(UnitType.Critter_Ursadon, true);
    fields.get("hero").set(UnitType.Critter_Ursadon, false);
    fields.get("powerup").set(UnitType.Critter_Ursadon, false);
    fields.get("beacon").set(UnitType.Critter_Ursadon, false);
    fields.get("flagBeacon").set(UnitType.Critter_Ursadon, false);
    fields.get("specialBuilding").set(UnitType.Critter_Ursadon, false);
    fields.get("spell").set(UnitType.Critter_Ursadon, false);
    fields.get("producesCreep").set(UnitType.Critter_Ursadon, false);
    fields.get("producesLarva").set(UnitType.Critter_Ursadon, false);
    fields.get("mineralField").set(UnitType.Critter_Ursadon, false);
    fields.get("critter").set(UnitType.Critter_Ursadon, true);
    fields.get("canBuildAddon").set(UnitType.Critter_Ursadon, false);
    fields.get("researchesWhat").set(UnitType.Critter_Ursadon, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Critter_Ursadon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Lurker_Egg() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Lurker_Egg, 97);
    fields.get("race").set(UnitType.Zerg_Lurker_Egg, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Lurker_Egg, new UnitType.WhatBuilds(UnitType.Zerg_Hydralisk, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Lurker_Egg, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Zerg_Lurker_Egg, toMap(UnitType.Zerg_Hydralisk, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Lurker_Egg, TechType.Lurker_Aspect);
    fields.get("cloakingTech").set(UnitType.Zerg_Lurker_Egg, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Lurker_Egg, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Zerg_Lurker_Egg, new ArrayList(Arrays.asList(UpgradeType.Zerg_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Lurker_Egg, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Lurker_Egg, 200);
    fields.get("maxShields").set(UnitType.Zerg_Lurker_Egg, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Lurker_Egg, 0);
    fields.get("armor").set(UnitType.Zerg_Lurker_Egg, 10);
    fields.get("mineralPrice").set(UnitType.Zerg_Lurker_Egg, 1);
    fields.get("gasPrice").set(UnitType.Zerg_Lurker_Egg, 1);
    fields.get("buildTime").set(UnitType.Zerg_Lurker_Egg, 1);
    fields.get("supplyRequired").set(UnitType.Zerg_Lurker_Egg, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Lurker_Egg, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Lurker_Egg, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Lurker_Egg, 0);
    fields.get("buildScore").set(UnitType.Zerg_Lurker_Egg, 0);
    fields.get("destroyScore").set(UnitType.Zerg_Lurker_Egg, 500);
    fields.get("size").set(UnitType.Zerg_Lurker_Egg, UnitSizeType.Medium);
    fields.get("tileWidth").set(UnitType.Zerg_Lurker_Egg, 1);
    fields.get("tileHeight").set(UnitType.Zerg_Lurker_Egg, 1);
    fields.get("dimensionLeft").set(UnitType.Zerg_Lurker_Egg, 16);
    fields.get("dimensionUp").set(UnitType.Zerg_Lurker_Egg, 16);
    fields.get("dimensionRight").set(UnitType.Zerg_Lurker_Egg, 15);
    fields.get("dimensionDown").set(UnitType.Zerg_Lurker_Egg, 15);
    fields.get("width").set(UnitType.Zerg_Lurker_Egg, 32);
    fields.get("height").set(UnitType.Zerg_Lurker_Egg, 32);
    fields.get("seekRange").set(UnitType.Zerg_Lurker_Egg, 0);
    fields.get("sightRange").set(UnitType.Zerg_Lurker_Egg, 128);
    fields.get("groundWeapon").set(UnitType.Zerg_Lurker_Egg, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Lurker_Egg, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Lurker_Egg, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Lurker_Egg, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Lurker_Egg, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Lurker_Egg, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Lurker_Egg, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Lurker_Egg, 0);
    fields.get("canProduce").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("canAttack").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("canMove").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("flyer").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("spellcaster").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("invincible").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("organic").set(UnitType.Zerg_Lurker_Egg, true);
    fields.get("mechanical").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("robotic").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("detector").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("refinery").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("worker").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("burrowable").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("cloakable").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("building").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("addon").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("neutral").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("hero").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("powerup").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("beacon").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("spell").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("producesCreep").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("producesLarva").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("mineralField").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("critter").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Lurker_Egg, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Lurker_Egg, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Lurker_Egg, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Raszagal() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Raszagal, 98);
    fields.get("race").set(UnitType.Hero_Raszagal, Race.Protoss);
    fields.get("whatBuilds").set(UnitType.Hero_Raszagal, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Raszagal, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Raszagal, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Raszagal, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Raszagal, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Hero_Raszagal, new ArrayList(Arrays.asList(TechType.Disruption_Web)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Raszagal,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Plasma_Shields,
                    UpgradeType.Protoss_Air_Weapons,
                    UpgradeType.Protoss_Air_Armor)));
    fields.get("armorUpgrade").set(UnitType.Hero_Raszagal, UpgradeType.Protoss_Air_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Raszagal, 100);
    fields.get("maxShields").set(UnitType.Hero_Raszagal, 60);
    fields.get("maxEnergy").set(UnitType.Hero_Raszagal, 250);
    fields.get("armor").set(UnitType.Hero_Raszagal, 0);
    fields.get("mineralPrice").set(UnitType.Hero_Raszagal, 150);
    fields.get("gasPrice").set(UnitType.Hero_Raszagal, 100);
    fields.get("buildTime").set(UnitType.Hero_Raszagal, 750);
    fields.get("supplyRequired").set(UnitType.Hero_Raszagal, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Raszagal, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Raszagal, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Raszagal, 0);
    fields.get("buildScore").set(UnitType.Hero_Raszagal, 0);
    fields.get("destroyScore").set(UnitType.Hero_Raszagal, 1300);
    fields.get("size").set(UnitType.Hero_Raszagal, UnitSizeType.Medium);
    fields.get("tileWidth").set(UnitType.Hero_Raszagal, 1);
    fields.get("tileHeight").set(UnitType.Hero_Raszagal, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Raszagal, 18);
    fields.get("dimensionUp").set(UnitType.Hero_Raszagal, 16);
    fields.get("dimensionRight").set(UnitType.Hero_Raszagal, 17);
    fields.get("dimensionDown").set(UnitType.Hero_Raszagal, 15);
    fields.get("width").set(UnitType.Hero_Raszagal, 36);
    fields.get("height").set(UnitType.Hero_Raszagal, 32);
    fields.get("seekRange").set(UnitType.Hero_Raszagal, 288);
    fields.get("sightRange").set(UnitType.Hero_Raszagal, 288);
    fields.get("groundWeapon").set(UnitType.Hero_Raszagal, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Hero_Raszagal, 0);
    fields.get("airWeapon").set(UnitType.Hero_Raszagal, WeaponType.Neutron_Flare);
    fields.get("maxAirHits").set(UnitType.Hero_Raszagal, 1);
    fields.get("topSpeed").set(UnitType.Hero_Raszagal, 5.2109375);
    fields.get("acceleration").set(UnitType.Hero_Raszagal, 67);
    fields.get("haltDistance").set(UnitType.Hero_Raszagal, 17067);
    fields.get("turnRadius").set(UnitType.Hero_Raszagal, 30);
    fields.get("canProduce").set(UnitType.Hero_Raszagal, false);
    fields.get("canAttack").set(UnitType.Hero_Raszagal, true);
    fields.get("canMove").set(UnitType.Hero_Raszagal, true);
    fields.get("flyer").set(UnitType.Hero_Raszagal, true);
    fields.get("regeneratesHP").set(UnitType.Hero_Raszagal, false);
    fields.get("spellcaster").set(UnitType.Hero_Raszagal, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Raszagal, false);
    fields.get("invincible").set(UnitType.Hero_Raszagal, false);
    fields.get("organic").set(UnitType.Hero_Raszagal, false);
    fields.get("mechanical").set(UnitType.Hero_Raszagal, true);
    fields.get("robotic").set(UnitType.Hero_Raszagal, false);
    fields.get("detector").set(UnitType.Hero_Raszagal, false);
    fields.get("resourceContainer").set(UnitType.Hero_Raszagal, false);
    fields.get("resourceDepot").set(UnitType.Hero_Raszagal, false);
    fields.get("refinery").set(UnitType.Hero_Raszagal, false);
    fields.get("worker").set(UnitType.Hero_Raszagal, false);
    fields.get("requiresPsi").set(UnitType.Hero_Raszagal, false);
    fields.get("requiresCreep").set(UnitType.Hero_Raszagal, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Raszagal, false);
    fields.get("burrowable").set(UnitType.Hero_Raszagal, false);
    fields.get("cloakable").set(UnitType.Hero_Raszagal, false);
    fields.get("building").set(UnitType.Hero_Raszagal, false);
    fields.get("addon").set(UnitType.Hero_Raszagal, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Raszagal, false);
    fields.get("neutral").set(UnitType.Hero_Raszagal, false);
    fields.get("hero").set(UnitType.Hero_Raszagal, true);
    fields.get("powerup").set(UnitType.Hero_Raszagal, false);
    fields.get("beacon").set(UnitType.Hero_Raszagal, false);
    fields.get("flagBeacon").set(UnitType.Hero_Raszagal, false);
    fields.get("specialBuilding").set(UnitType.Hero_Raszagal, false);
    fields.get("spell").set(UnitType.Hero_Raszagal, false);
    fields.get("producesCreep").set(UnitType.Hero_Raszagal, false);
    fields.get("producesLarva").set(UnitType.Hero_Raszagal, false);
    fields.get("mineralField").set(UnitType.Hero_Raszagal, false);
    fields.get("critter").set(UnitType.Hero_Raszagal, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Raszagal, false);
    fields.get("researchesWhat").set(UnitType.Hero_Raszagal, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Raszagal, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Samir_Duran() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Samir_Duran, 99);
    fields.get("race").set(UnitType.Hero_Samir_Duran, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Samir_Duran, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Samir_Duran, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Samir_Duran, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Samir_Duran, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Samir_Duran, TechType.Personnel_Cloaking);
    fields
        .get("abilities")
        .set(
            UnitType.Hero_Samir_Duran,
            new ArrayList(Arrays.asList(TechType.Lockdown, TechType.Personnel_Cloaking)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Samir_Duran,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Hero_Samir_Duran, UpgradeType.Terran_Infantry_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Samir_Duran, 200);
    fields.get("maxShields").set(UnitType.Hero_Samir_Duran, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Samir_Duran, 250);
    fields.get("armor").set(UnitType.Hero_Samir_Duran, 2);
    fields.get("mineralPrice").set(UnitType.Hero_Samir_Duran, 200);
    fields.get("gasPrice").set(UnitType.Hero_Samir_Duran, 75);
    fields.get("buildTime").set(UnitType.Hero_Samir_Duran, 1500);
    fields.get("supplyRequired").set(UnitType.Hero_Samir_Duran, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Samir_Duran, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Samir_Duran, 1);
    fields.get("spaceProvided").set(UnitType.Hero_Samir_Duran, 0);
    fields.get("buildScore").set(UnitType.Hero_Samir_Duran, 0);
    fields.get("destroyScore").set(UnitType.Hero_Samir_Duran, 700);
    fields.get("size").set(UnitType.Hero_Samir_Duran, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Hero_Samir_Duran, 1);
    fields.get("tileHeight").set(UnitType.Hero_Samir_Duran, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Samir_Duran, 7);
    fields.get("dimensionUp").set(UnitType.Hero_Samir_Duran, 10);
    fields.get("dimensionRight").set(UnitType.Hero_Samir_Duran, 7);
    fields.get("dimensionDown").set(UnitType.Hero_Samir_Duran, 11);
    fields.get("width").set(UnitType.Hero_Samir_Duran, 15);
    fields.get("height").set(UnitType.Hero_Samir_Duran, 22);
    fields.get("seekRange").set(UnitType.Hero_Samir_Duran, 0);
    fields.get("sightRange").set(UnitType.Hero_Samir_Duran, 320);
    fields
        .get("groundWeapon")
        .set(UnitType.Hero_Samir_Duran, WeaponType.C_10_Canister_Rifle_Samir_Duran);
    fields.get("maxGroundHits").set(UnitType.Hero_Samir_Duran, 1);
    fields
        .get("airWeapon")
        .set(UnitType.Hero_Samir_Duran, WeaponType.C_10_Canister_Rifle_Samir_Duran);
    fields.get("maxAirHits").set(UnitType.Hero_Samir_Duran, 1);
    fields.get("topSpeed").set(UnitType.Hero_Samir_Duran, 3.125);
    fields.get("acceleration").set(UnitType.Hero_Samir_Duran, 1);
    fields.get("haltDistance").set(UnitType.Hero_Samir_Duran, 1);
    fields.get("turnRadius").set(UnitType.Hero_Samir_Duran, 40);
    fields.get("canProduce").set(UnitType.Hero_Samir_Duran, false);
    fields.get("canAttack").set(UnitType.Hero_Samir_Duran, true);
    fields.get("canMove").set(UnitType.Hero_Samir_Duran, true);
    fields.get("flyer").set(UnitType.Hero_Samir_Duran, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Samir_Duran, false);
    fields.get("spellcaster").set(UnitType.Hero_Samir_Duran, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Samir_Duran, false);
    fields.get("invincible").set(UnitType.Hero_Samir_Duran, false);
    fields.get("organic").set(UnitType.Hero_Samir_Duran, true);
    fields.get("mechanical").set(UnitType.Hero_Samir_Duran, false);
    fields.get("robotic").set(UnitType.Hero_Samir_Duran, false);
    fields.get("detector").set(UnitType.Hero_Samir_Duran, false);
    fields.get("resourceContainer").set(UnitType.Hero_Samir_Duran, false);
    fields.get("resourceDepot").set(UnitType.Hero_Samir_Duran, false);
    fields.get("refinery").set(UnitType.Hero_Samir_Duran, false);
    fields.get("worker").set(UnitType.Hero_Samir_Duran, false);
    fields.get("requiresPsi").set(UnitType.Hero_Samir_Duran, false);
    fields.get("requiresCreep").set(UnitType.Hero_Samir_Duran, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Samir_Duran, false);
    fields.get("burrowable").set(UnitType.Hero_Samir_Duran, false);
    fields.get("cloakable").set(UnitType.Hero_Samir_Duran, true);
    fields.get("building").set(UnitType.Hero_Samir_Duran, false);
    fields.get("addon").set(UnitType.Hero_Samir_Duran, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Samir_Duran, false);
    fields.get("neutral").set(UnitType.Hero_Samir_Duran, false);
    fields.get("hero").set(UnitType.Hero_Samir_Duran, true);
    fields.get("powerup").set(UnitType.Hero_Samir_Duran, false);
    fields.get("beacon").set(UnitType.Hero_Samir_Duran, false);
    fields.get("flagBeacon").set(UnitType.Hero_Samir_Duran, false);
    fields.get("specialBuilding").set(UnitType.Hero_Samir_Duran, false);
    fields.get("spell").set(UnitType.Hero_Samir_Duran, false);
    fields.get("producesCreep").set(UnitType.Hero_Samir_Duran, false);
    fields.get("producesLarva").set(UnitType.Hero_Samir_Duran, false);
    fields.get("mineralField").set(UnitType.Hero_Samir_Duran, false);
    fields.get("critter").set(UnitType.Hero_Samir_Duran, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Samir_Duran, false);
    fields.get("researchesWhat").set(UnitType.Hero_Samir_Duran, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Samir_Duran, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Alexei_Stukov() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Alexei_Stukov, 100);
    fields.get("race").set(UnitType.Hero_Alexei_Stukov, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Alexei_Stukov, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Alexei_Stukov, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Alexei_Stukov, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Alexei_Stukov, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Alexei_Stukov, TechType.Personnel_Cloaking);
    fields
        .get("abilities")
        .set(
            UnitType.Hero_Alexei_Stukov,
            new ArrayList(Arrays.asList(TechType.Lockdown, TechType.Personnel_Cloaking)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Alexei_Stukov,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Hero_Alexei_Stukov, UpgradeType.Terran_Infantry_Armor);
    fields.get("maxHitPoints").set(UnitType.Hero_Alexei_Stukov, 250);
    fields.get("maxShields").set(UnitType.Hero_Alexei_Stukov, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Alexei_Stukov, 250);
    fields.get("armor").set(UnitType.Hero_Alexei_Stukov, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Alexei_Stukov, 200);
    fields.get("gasPrice").set(UnitType.Hero_Alexei_Stukov, 75);
    fields.get("buildTime").set(UnitType.Hero_Alexei_Stukov, 1500);
    fields.get("supplyRequired").set(UnitType.Hero_Alexei_Stukov, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Alexei_Stukov, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Alexei_Stukov, 1);
    fields.get("spaceProvided").set(UnitType.Hero_Alexei_Stukov, 0);
    fields.get("buildScore").set(UnitType.Hero_Alexei_Stukov, 0);
    fields.get("destroyScore").set(UnitType.Hero_Alexei_Stukov, 700);
    fields.get("size").set(UnitType.Hero_Alexei_Stukov, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Hero_Alexei_Stukov, 1);
    fields.get("tileHeight").set(UnitType.Hero_Alexei_Stukov, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Alexei_Stukov, 7);
    fields.get("dimensionUp").set(UnitType.Hero_Alexei_Stukov, 10);
    fields.get("dimensionRight").set(UnitType.Hero_Alexei_Stukov, 7);
    fields.get("dimensionDown").set(UnitType.Hero_Alexei_Stukov, 11);
    fields.get("width").set(UnitType.Hero_Alexei_Stukov, 15);
    fields.get("height").set(UnitType.Hero_Alexei_Stukov, 22);
    fields.get("seekRange").set(UnitType.Hero_Alexei_Stukov, 0);
    fields.get("sightRange").set(UnitType.Hero_Alexei_Stukov, 352);
    fields
        .get("groundWeapon")
        .set(UnitType.Hero_Alexei_Stukov, WeaponType.C_10_Canister_Rifle_Alexei_Stukov);
    fields.get("maxGroundHits").set(UnitType.Hero_Alexei_Stukov, 1);
    fields
        .get("airWeapon")
        .set(UnitType.Hero_Alexei_Stukov, WeaponType.C_10_Canister_Rifle_Alexei_Stukov);
    fields.get("maxAirHits").set(UnitType.Hero_Alexei_Stukov, 1);
    fields.get("topSpeed").set(UnitType.Hero_Alexei_Stukov, 3.125);
    fields.get("acceleration").set(UnitType.Hero_Alexei_Stukov, 1);
    fields.get("haltDistance").set(UnitType.Hero_Alexei_Stukov, 1);
    fields.get("turnRadius").set(UnitType.Hero_Alexei_Stukov, 40);
    fields.get("canProduce").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("canAttack").set(UnitType.Hero_Alexei_Stukov, true);
    fields.get("canMove").set(UnitType.Hero_Alexei_Stukov, true);
    fields.get("flyer").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("spellcaster").set(UnitType.Hero_Alexei_Stukov, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("invincible").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("organic").set(UnitType.Hero_Alexei_Stukov, true);
    fields.get("mechanical").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("robotic").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("detector").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("resourceContainer").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("resourceDepot").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("refinery").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("worker").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("requiresPsi").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("requiresCreep").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("burrowable").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("cloakable").set(UnitType.Hero_Alexei_Stukov, true);
    fields.get("building").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("addon").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("neutral").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("hero").set(UnitType.Hero_Alexei_Stukov, true);
    fields.get("powerup").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("beacon").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("flagBeacon").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("specialBuilding").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("spell").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("producesCreep").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("producesLarva").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("mineralField").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("critter").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Alexei_Stukov, false);
    fields.get("researchesWhat").set(UnitType.Hero_Alexei_Stukov, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Alexei_Stukov, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Map_Revealer() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Map_Revealer, 101);
    fields.get("race").set(UnitType.Special_Map_Revealer, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Map_Revealer, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Map_Revealer, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Map_Revealer, toMap());
    fields.get("requiredTech").set(UnitType.Special_Map_Revealer, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Map_Revealer, TechType.None);
    fields.get("abilities").set(UnitType.Special_Map_Revealer, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Map_Revealer, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Map_Revealer, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Map_Revealer, 1);
    fields.get("maxShields").set(UnitType.Special_Map_Revealer, 0);
    fields.get("maxEnergy").set(UnitType.Special_Map_Revealer, 0);
    fields.get("armor").set(UnitType.Special_Map_Revealer, 0);
    fields.get("mineralPrice").set(UnitType.Special_Map_Revealer, 0);
    fields.get("gasPrice").set(UnitType.Special_Map_Revealer, 0);
    fields.get("buildTime").set(UnitType.Special_Map_Revealer, 1);
    fields.get("supplyRequired").set(UnitType.Special_Map_Revealer, 0);
    fields.get("supplyProvided").set(UnitType.Special_Map_Revealer, 0);
    fields.get("spaceRequired").set(UnitType.Special_Map_Revealer, 255);
    fields.get("spaceProvided").set(UnitType.Special_Map_Revealer, 0);
    fields.get("buildScore").set(UnitType.Special_Map_Revealer, 0);
    fields.get("destroyScore").set(UnitType.Special_Map_Revealer, 0);
    fields.get("size").set(UnitType.Special_Map_Revealer, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Special_Map_Revealer, 1);
    fields.get("tileHeight").set(UnitType.Special_Map_Revealer, 1);
    fields.get("dimensionLeft").set(UnitType.Special_Map_Revealer, 13);
    fields.get("dimensionUp").set(UnitType.Special_Map_Revealer, 13);
    fields.get("dimensionRight").set(UnitType.Special_Map_Revealer, 13);
    fields.get("dimensionDown").set(UnitType.Special_Map_Revealer, 17);
    fields.get("width").set(UnitType.Special_Map_Revealer, 27);
    fields.get("height").set(UnitType.Special_Map_Revealer, 31);
    fields.get("seekRange").set(UnitType.Special_Map_Revealer, 0);
    fields.get("sightRange").set(UnitType.Special_Map_Revealer, 320);
    fields.get("groundWeapon").set(UnitType.Special_Map_Revealer, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Map_Revealer, 0);
    fields.get("airWeapon").set(UnitType.Special_Map_Revealer, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Map_Revealer, 0);
    fields.get("topSpeed").set(UnitType.Special_Map_Revealer, 0.0);
    fields.get("acceleration").set(UnitType.Special_Map_Revealer, 0);
    fields.get("haltDistance").set(UnitType.Special_Map_Revealer, 0);
    fields.get("turnRadius").set(UnitType.Special_Map_Revealer, 0);
    fields.get("canProduce").set(UnitType.Special_Map_Revealer, false);
    fields.get("canAttack").set(UnitType.Special_Map_Revealer, false);
    fields.get("canMove").set(UnitType.Special_Map_Revealer, false);
    fields.get("flyer").set(UnitType.Special_Map_Revealer, true);
    fields.get("regeneratesHP").set(UnitType.Special_Map_Revealer, false);
    fields.get("spellcaster").set(UnitType.Special_Map_Revealer, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Map_Revealer, false);
    fields.get("invincible").set(UnitType.Special_Map_Revealer, false);
    fields.get("organic").set(UnitType.Special_Map_Revealer, false);
    fields.get("mechanical").set(UnitType.Special_Map_Revealer, false);
    fields.get("robotic").set(UnitType.Special_Map_Revealer, false);
    fields.get("detector").set(UnitType.Special_Map_Revealer, false);
    fields.get("resourceContainer").set(UnitType.Special_Map_Revealer, false);
    fields.get("resourceDepot").set(UnitType.Special_Map_Revealer, false);
    fields.get("refinery").set(UnitType.Special_Map_Revealer, false);
    fields.get("worker").set(UnitType.Special_Map_Revealer, false);
    fields.get("requiresPsi").set(UnitType.Special_Map_Revealer, false);
    fields.get("requiresCreep").set(UnitType.Special_Map_Revealer, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Map_Revealer, false);
    fields.get("burrowable").set(UnitType.Special_Map_Revealer, false);
    fields.get("cloakable").set(UnitType.Special_Map_Revealer, false);
    fields.get("building").set(UnitType.Special_Map_Revealer, false);
    fields.get("addon").set(UnitType.Special_Map_Revealer, false);
    fields.get("flyingBuilding").set(UnitType.Special_Map_Revealer, false);
    fields.get("neutral").set(UnitType.Special_Map_Revealer, false);
    fields.get("hero").set(UnitType.Special_Map_Revealer, false);
    fields.get("powerup").set(UnitType.Special_Map_Revealer, false);
    fields.get("beacon").set(UnitType.Special_Map_Revealer, false);
    fields.get("flagBeacon").set(UnitType.Special_Map_Revealer, false);
    fields.get("specialBuilding").set(UnitType.Special_Map_Revealer, false);
    fields.get("spell").set(UnitType.Special_Map_Revealer, false);
    fields.get("producesCreep").set(UnitType.Special_Map_Revealer, false);
    fields.get("producesLarva").set(UnitType.Special_Map_Revealer, false);
    fields.get("mineralField").set(UnitType.Special_Map_Revealer, false);
    fields.get("critter").set(UnitType.Special_Map_Revealer, false);
    fields.get("canBuildAddon").set(UnitType.Special_Map_Revealer, false);
    fields.get("researchesWhat").set(UnitType.Special_Map_Revealer, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Map_Revealer, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Gerard_DuGalle() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Gerard_DuGalle, 102);
    fields.get("race").set(UnitType.Hero_Gerard_DuGalle, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Gerard_DuGalle, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Gerard_DuGalle, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Gerard_DuGalle, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Gerard_DuGalle, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Gerard_DuGalle, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Hero_Gerard_DuGalle, new ArrayList(Arrays.asList(TechType.Yamato_Gun)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Gerard_DuGalle,
            new ArrayList(
                Arrays.asList(UpgradeType.Terran_Ship_Plating, UpgradeType.Terran_Ship_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Hero_Gerard_DuGalle, UpgradeType.Terran_Ship_Plating);
    fields.get("maxHitPoints").set(UnitType.Hero_Gerard_DuGalle, 700);
    fields.get("maxShields").set(UnitType.Hero_Gerard_DuGalle, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Gerard_DuGalle, 250);
    fields.get("armor").set(UnitType.Hero_Gerard_DuGalle, 4);
    fields.get("mineralPrice").set(UnitType.Hero_Gerard_DuGalle, 800);
    fields.get("gasPrice").set(UnitType.Hero_Gerard_DuGalle, 600);
    fields.get("buildTime").set(UnitType.Hero_Gerard_DuGalle, 4800);
    fields.get("supplyRequired").set(UnitType.Hero_Gerard_DuGalle, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Gerard_DuGalle, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Gerard_DuGalle, 255);
    fields.get("spaceProvided").set(UnitType.Hero_Gerard_DuGalle, 0);
    fields.get("buildScore").set(UnitType.Hero_Gerard_DuGalle, 0);
    fields.get("destroyScore").set(UnitType.Hero_Gerard_DuGalle, 4800);
    fields.get("size").set(UnitType.Hero_Gerard_DuGalle, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Hero_Gerard_DuGalle, 2);
    fields.get("tileHeight").set(UnitType.Hero_Gerard_DuGalle, 2);
    fields.get("dimensionLeft").set(UnitType.Hero_Gerard_DuGalle, 37);
    fields.get("dimensionUp").set(UnitType.Hero_Gerard_DuGalle, 29);
    fields.get("dimensionRight").set(UnitType.Hero_Gerard_DuGalle, 37);
    fields.get("dimensionDown").set(UnitType.Hero_Gerard_DuGalle, 29);
    fields.get("width").set(UnitType.Hero_Gerard_DuGalle, 75);
    fields.get("height").set(UnitType.Hero_Gerard_DuGalle, 59);
    fields.get("seekRange").set(UnitType.Hero_Gerard_DuGalle, 0);
    fields.get("sightRange").set(UnitType.Hero_Gerard_DuGalle, 352);
    fields.get("groundWeapon").set(UnitType.Hero_Gerard_DuGalle, WeaponType.ATS_Laser_Battery_Hero);
    fields.get("maxGroundHits").set(UnitType.Hero_Gerard_DuGalle, 1);
    fields.get("airWeapon").set(UnitType.Hero_Gerard_DuGalle, WeaponType.ATA_Laser_Battery_Hero);
    fields.get("maxAirHits").set(UnitType.Hero_Gerard_DuGalle, 1);
    fields.get("topSpeed").set(UnitType.Hero_Gerard_DuGalle, 1.953125);
    fields.get("acceleration").set(UnitType.Hero_Gerard_DuGalle, 27);
    fields.get("haltDistance").set(UnitType.Hero_Gerard_DuGalle, 7585);
    fields.get("turnRadius").set(UnitType.Hero_Gerard_DuGalle, 20);
    fields.get("canProduce").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("canAttack").set(UnitType.Hero_Gerard_DuGalle, true);
    fields.get("canMove").set(UnitType.Hero_Gerard_DuGalle, true);
    fields.get("flyer").set(UnitType.Hero_Gerard_DuGalle, true);
    fields.get("regeneratesHP").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("spellcaster").set(UnitType.Hero_Gerard_DuGalle, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("invincible").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("organic").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("mechanical").set(UnitType.Hero_Gerard_DuGalle, true);
    fields.get("robotic").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("detector").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("resourceContainer").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("resourceDepot").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("refinery").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("worker").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("requiresPsi").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("requiresCreep").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("burrowable").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("cloakable").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("building").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("addon").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("neutral").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("hero").set(UnitType.Hero_Gerard_DuGalle, true);
    fields.get("powerup").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("beacon").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("flagBeacon").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("specialBuilding").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("spell").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("producesCreep").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("producesLarva").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("mineralField").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("critter").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Gerard_DuGalle, false);
    fields.get("researchesWhat").set(UnitType.Hero_Gerard_DuGalle, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Gerard_DuGalle, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Lurker() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Lurker, 103);
    fields.get("race").set(UnitType.Zerg_Lurker, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Lurker, new UnitType.WhatBuilds(UnitType.Zerg_Hydralisk, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Lurker, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Zerg_Lurker, toMap(UnitType.Zerg_Hydralisk, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Lurker, TechType.Lurker_Aspect);
    fields.get("cloakingTech").set(UnitType.Zerg_Lurker, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Zerg_Lurker, new ArrayList(Arrays.asList(TechType.Burrowing)));
    fields
        .get("upgrades")
        .set(
            UnitType.Zerg_Lurker,
            new ArrayList(
                Arrays.asList(UpgradeType.Zerg_Missile_Attacks, UpgradeType.Zerg_Carapace)));
    fields.get("armorUpgrade").set(UnitType.Zerg_Lurker, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Zerg_Lurker, 125);
    fields.get("maxShields").set(UnitType.Zerg_Lurker, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Lurker, 0);
    fields.get("armor").set(UnitType.Zerg_Lurker, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Lurker, 50);
    fields.get("gasPrice").set(UnitType.Zerg_Lurker, 100);
    fields.get("buildTime").set(UnitType.Zerg_Lurker, 600);
    fields.get("supplyRequired").set(UnitType.Zerg_Lurker, 4);
    fields.get("supplyProvided").set(UnitType.Zerg_Lurker, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Lurker, 4);
    fields.get("spaceProvided").set(UnitType.Zerg_Lurker, 0);
    fields.get("buildScore").set(UnitType.Zerg_Lurker, 250);
    fields.get("destroyScore").set(UnitType.Zerg_Lurker, 500);
    fields.get("size").set(UnitType.Zerg_Lurker, UnitSizeType.Medium);
    fields.get("tileWidth").set(UnitType.Zerg_Lurker, 1);
    fields.get("tileHeight").set(UnitType.Zerg_Lurker, 1);
    fields.get("dimensionLeft").set(UnitType.Zerg_Lurker, 15);
    fields.get("dimensionUp").set(UnitType.Zerg_Lurker, 15);
    fields.get("dimensionRight").set(UnitType.Zerg_Lurker, 16);
    fields.get("dimensionDown").set(UnitType.Zerg_Lurker, 16);
    fields.get("width").set(UnitType.Zerg_Lurker, 32);
    fields.get("height").set(UnitType.Zerg_Lurker, 32);
    fields.get("seekRange").set(UnitType.Zerg_Lurker, 192);
    fields.get("sightRange").set(UnitType.Zerg_Lurker, 256);
    fields.get("groundWeapon").set(UnitType.Zerg_Lurker, WeaponType.Subterranean_Spines);
    fields.get("maxGroundHits").set(UnitType.Zerg_Lurker, 1);
    fields.get("airWeapon").set(UnitType.Zerg_Lurker, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Lurker, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Lurker, 4.546875);
    fields.get("acceleration").set(UnitType.Zerg_Lurker, 1);
    fields.get("haltDistance").set(UnitType.Zerg_Lurker, 1);
    fields.get("turnRadius").set(UnitType.Zerg_Lurker, 40);
    fields.get("canProduce").set(UnitType.Zerg_Lurker, false);
    fields.get("canAttack").set(UnitType.Zerg_Lurker, true);
    fields.get("canMove").set(UnitType.Zerg_Lurker, true);
    fields.get("flyer").set(UnitType.Zerg_Lurker, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Lurker, true);
    fields.get("spellcaster").set(UnitType.Zerg_Lurker, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Lurker, false);
    fields.get("invincible").set(UnitType.Zerg_Lurker, false);
    fields.get("organic").set(UnitType.Zerg_Lurker, true);
    fields.get("mechanical").set(UnitType.Zerg_Lurker, false);
    fields.get("robotic").set(UnitType.Zerg_Lurker, false);
    fields.get("detector").set(UnitType.Zerg_Lurker, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Lurker, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Lurker, false);
    fields.get("refinery").set(UnitType.Zerg_Lurker, false);
    fields.get("worker").set(UnitType.Zerg_Lurker, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Lurker, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Lurker, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Lurker, false);
    fields.get("burrowable").set(UnitType.Zerg_Lurker, true);
    fields.get("cloakable").set(UnitType.Zerg_Lurker, false);
    fields.get("building").set(UnitType.Zerg_Lurker, false);
    fields.get("addon").set(UnitType.Zerg_Lurker, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Lurker, false);
    fields.get("neutral").set(UnitType.Zerg_Lurker, false);
    fields.get("hero").set(UnitType.Zerg_Lurker, false);
    fields.get("powerup").set(UnitType.Zerg_Lurker, false);
    fields.get("beacon").set(UnitType.Zerg_Lurker, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Lurker, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Lurker, false);
    fields.get("spell").set(UnitType.Zerg_Lurker, false);
    fields.get("producesCreep").set(UnitType.Zerg_Lurker, false);
    fields.get("producesLarva").set(UnitType.Zerg_Lurker, false);
    fields.get("mineralField").set(UnitType.Zerg_Lurker, false);
    fields.get("critter").set(UnitType.Zerg_Lurker, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Lurker, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Lurker, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Lurker, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Hero_Infested_Duran() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Hero_Infested_Duran, 104);
    fields.get("race").set(UnitType.Hero_Infested_Duran, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Hero_Infested_Duran, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Hero_Infested_Duran, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Hero_Infested_Duran, toMap());
    fields.get("requiredTech").set(UnitType.Hero_Infested_Duran, TechType.None);
    fields.get("cloakingTech").set(UnitType.Hero_Infested_Duran, TechType.Personnel_Cloaking);
    fields
        .get("abilities")
        .set(
            UnitType.Hero_Infested_Duran,
            new ArrayList(
                Arrays.asList(TechType.Lockdown, TechType.Personnel_Cloaking, TechType.Consume)));
    fields
        .get("upgrades")
        .set(
            UnitType.Hero_Infested_Duran,
            new ArrayList(
                Arrays.asList(UpgradeType.Zerg_Carapace, UpgradeType.Terran_Infantry_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Hero_Infested_Duran, UpgradeType.Zerg_Carapace);
    fields.get("maxHitPoints").set(UnitType.Hero_Infested_Duran, 300);
    fields.get("maxShields").set(UnitType.Hero_Infested_Duran, 0);
    fields.get("maxEnergy").set(UnitType.Hero_Infested_Duran, 250);
    fields.get("armor").set(UnitType.Hero_Infested_Duran, 3);
    fields.get("mineralPrice").set(UnitType.Hero_Infested_Duran, 200);
    fields.get("gasPrice").set(UnitType.Hero_Infested_Duran, 75);
    fields.get("buildTime").set(UnitType.Hero_Infested_Duran, 1500);
    fields.get("supplyRequired").set(UnitType.Hero_Infested_Duran, 0);
    fields.get("supplyProvided").set(UnitType.Hero_Infested_Duran, 0);
    fields.get("spaceRequired").set(UnitType.Hero_Infested_Duran, 1);
    fields.get("spaceProvided").set(UnitType.Hero_Infested_Duran, 0);
    fields.get("buildScore").set(UnitType.Hero_Infested_Duran, 0);
    fields.get("destroyScore").set(UnitType.Hero_Infested_Duran, 700);
    fields.get("size").set(UnitType.Hero_Infested_Duran, UnitSizeType.Small);
    fields.get("tileWidth").set(UnitType.Hero_Infested_Duran, 1);
    fields.get("tileHeight").set(UnitType.Hero_Infested_Duran, 1);
    fields.get("dimensionLeft").set(UnitType.Hero_Infested_Duran, 7);
    fields.get("dimensionUp").set(UnitType.Hero_Infested_Duran, 10);
    fields.get("dimensionRight").set(UnitType.Hero_Infested_Duran, 7);
    fields.get("dimensionDown").set(UnitType.Hero_Infested_Duran, 11);
    fields.get("width").set(UnitType.Hero_Infested_Duran, 15);
    fields.get("height").set(UnitType.Hero_Infested_Duran, 22);
    fields.get("seekRange").set(UnitType.Hero_Infested_Duran, 0);
    fields.get("sightRange").set(UnitType.Hero_Infested_Duran, 352);
    fields
        .get("groundWeapon")
        .set(UnitType.Hero_Infested_Duran, WeaponType.C_10_Canister_Rifle_Infested_Duran);
    fields.get("maxGroundHits").set(UnitType.Hero_Infested_Duran, 1);
    fields
        .get("airWeapon")
        .set(UnitType.Hero_Infested_Duran, WeaponType.C_10_Canister_Rifle_Infested_Duran);
    fields.get("maxAirHits").set(UnitType.Hero_Infested_Duran, 1);
    fields.get("topSpeed").set(UnitType.Hero_Infested_Duran, 3.125);
    fields.get("acceleration").set(UnitType.Hero_Infested_Duran, 1);
    fields.get("haltDistance").set(UnitType.Hero_Infested_Duran, 1);
    fields.get("turnRadius").set(UnitType.Hero_Infested_Duran, 40);
    fields.get("canProduce").set(UnitType.Hero_Infested_Duran, false);
    fields.get("canAttack").set(UnitType.Hero_Infested_Duran, true);
    fields.get("canMove").set(UnitType.Hero_Infested_Duran, true);
    fields.get("flyer").set(UnitType.Hero_Infested_Duran, false);
    fields.get("regeneratesHP").set(UnitType.Hero_Infested_Duran, true);
    fields.get("spellcaster").set(UnitType.Hero_Infested_Duran, true);
    fields.get("hasPermanentCloak").set(UnitType.Hero_Infested_Duran, false);
    fields.get("invincible").set(UnitType.Hero_Infested_Duran, false);
    fields.get("organic").set(UnitType.Hero_Infested_Duran, true);
    fields.get("mechanical").set(UnitType.Hero_Infested_Duran, false);
    fields.get("robotic").set(UnitType.Hero_Infested_Duran, false);
    fields.get("detector").set(UnitType.Hero_Infested_Duran, false);
    fields.get("resourceContainer").set(UnitType.Hero_Infested_Duran, false);
    fields.get("resourceDepot").set(UnitType.Hero_Infested_Duran, false);
    fields.get("refinery").set(UnitType.Hero_Infested_Duran, false);
    fields.get("worker").set(UnitType.Hero_Infested_Duran, false);
    fields.get("requiresPsi").set(UnitType.Hero_Infested_Duran, false);
    fields.get("requiresCreep").set(UnitType.Hero_Infested_Duran, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Hero_Infested_Duran, false);
    fields.get("burrowable").set(UnitType.Hero_Infested_Duran, false);
    fields.get("cloakable").set(UnitType.Hero_Infested_Duran, true);
    fields.get("building").set(UnitType.Hero_Infested_Duran, false);
    fields.get("addon").set(UnitType.Hero_Infested_Duran, false);
    fields.get("flyingBuilding").set(UnitType.Hero_Infested_Duran, false);
    fields.get("neutral").set(UnitType.Hero_Infested_Duran, false);
    fields.get("hero").set(UnitType.Hero_Infested_Duran, true);
    fields.get("powerup").set(UnitType.Hero_Infested_Duran, false);
    fields.get("beacon").set(UnitType.Hero_Infested_Duran, false);
    fields.get("flagBeacon").set(UnitType.Hero_Infested_Duran, false);
    fields.get("specialBuilding").set(UnitType.Hero_Infested_Duran, false);
    fields.get("spell").set(UnitType.Hero_Infested_Duran, false);
    fields.get("producesCreep").set(UnitType.Hero_Infested_Duran, false);
    fields.get("producesLarva").set(UnitType.Hero_Infested_Duran, false);
    fields.get("mineralField").set(UnitType.Hero_Infested_Duran, false);
    fields.get("critter").set(UnitType.Hero_Infested_Duran, false);
    fields.get("canBuildAddon").set(UnitType.Hero_Infested_Duran, false);
    fields.get("researchesWhat").set(UnitType.Hero_Infested_Duran, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Hero_Infested_Duran, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Spell_Disruption_Web() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Spell_Disruption_Web, 105);
    fields.get("race").set(UnitType.Spell_Disruption_Web, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Spell_Disruption_Web, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Spell_Disruption_Web, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Spell_Disruption_Web, toMap());
    fields.get("requiredTech").set(UnitType.Spell_Disruption_Web, TechType.None);
    fields.get("cloakingTech").set(UnitType.Spell_Disruption_Web, TechType.None);
    fields.get("abilities").set(UnitType.Spell_Disruption_Web, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Spell_Disruption_Web, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Spell_Disruption_Web, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Spell_Disruption_Web, 800);
    fields.get("maxShields").set(UnitType.Spell_Disruption_Web, 0);
    fields.get("maxEnergy").set(UnitType.Spell_Disruption_Web, 0);
    fields.get("armor").set(UnitType.Spell_Disruption_Web, 0);
    fields.get("mineralPrice").set(UnitType.Spell_Disruption_Web, 250);
    fields.get("gasPrice").set(UnitType.Spell_Disruption_Web, 250);
    fields.get("buildTime").set(UnitType.Spell_Disruption_Web, 2400);
    fields.get("supplyRequired").set(UnitType.Spell_Disruption_Web, 0);
    fields.get("supplyProvided").set(UnitType.Spell_Disruption_Web, 0);
    fields.get("spaceRequired").set(UnitType.Spell_Disruption_Web, 255);
    fields.get("spaceProvided").set(UnitType.Spell_Disruption_Web, 0);
    fields.get("buildScore").set(UnitType.Spell_Disruption_Web, 0);
    fields.get("destroyScore").set(UnitType.Spell_Disruption_Web, 0);
    fields.get("size").set(UnitType.Spell_Disruption_Web, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Spell_Disruption_Web, 4);
    fields.get("tileHeight").set(UnitType.Spell_Disruption_Web, 3);
    fields.get("dimensionLeft").set(UnitType.Spell_Disruption_Web, 60);
    fields.get("dimensionUp").set(UnitType.Spell_Disruption_Web, 40);
    fields.get("dimensionRight").set(UnitType.Spell_Disruption_Web, 59);
    fields.get("dimensionDown").set(UnitType.Spell_Disruption_Web, 39);
    fields.get("width").set(UnitType.Spell_Disruption_Web, 120);
    fields.get("height").set(UnitType.Spell_Disruption_Web, 80);
    fields.get("seekRange").set(UnitType.Spell_Disruption_Web, 0);
    fields.get("sightRange").set(UnitType.Spell_Disruption_Web, 256);
    fields.get("groundWeapon").set(UnitType.Spell_Disruption_Web, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Spell_Disruption_Web, 0);
    fields.get("airWeapon").set(UnitType.Spell_Disruption_Web, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Spell_Disruption_Web, 0);
    fields.get("topSpeed").set(UnitType.Spell_Disruption_Web, 0.0);
    fields.get("acceleration").set(UnitType.Spell_Disruption_Web, 0);
    fields.get("haltDistance").set(UnitType.Spell_Disruption_Web, 0);
    fields.get("turnRadius").set(UnitType.Spell_Disruption_Web, 0);
    fields.get("canProduce").set(UnitType.Spell_Disruption_Web, false);
    fields.get("canAttack").set(UnitType.Spell_Disruption_Web, false);
    fields.get("canMove").set(UnitType.Spell_Disruption_Web, false);
    fields.get("flyer").set(UnitType.Spell_Disruption_Web, false);
    fields.get("regeneratesHP").set(UnitType.Spell_Disruption_Web, false);
    fields.get("spellcaster").set(UnitType.Spell_Disruption_Web, false);
    fields.get("hasPermanentCloak").set(UnitType.Spell_Disruption_Web, false);
    fields.get("invincible").set(UnitType.Spell_Disruption_Web, true);
    fields.get("organic").set(UnitType.Spell_Disruption_Web, false);
    fields.get("mechanical").set(UnitType.Spell_Disruption_Web, false);
    fields.get("robotic").set(UnitType.Spell_Disruption_Web, false);
    fields.get("detector").set(UnitType.Spell_Disruption_Web, false);
    fields.get("resourceContainer").set(UnitType.Spell_Disruption_Web, false);
    fields.get("resourceDepot").set(UnitType.Spell_Disruption_Web, false);
    fields.get("refinery").set(UnitType.Spell_Disruption_Web, false);
    fields.get("worker").set(UnitType.Spell_Disruption_Web, false);
    fields.get("requiresPsi").set(UnitType.Spell_Disruption_Web, false);
    fields.get("requiresCreep").set(UnitType.Spell_Disruption_Web, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Spell_Disruption_Web, false);
    fields.get("burrowable").set(UnitType.Spell_Disruption_Web, false);
    fields.get("cloakable").set(UnitType.Spell_Disruption_Web, false);
    fields.get("building").set(UnitType.Spell_Disruption_Web, false);
    fields.get("addon").set(UnitType.Spell_Disruption_Web, false);
    fields.get("flyingBuilding").set(UnitType.Spell_Disruption_Web, false);
    fields.get("neutral").set(UnitType.Spell_Disruption_Web, true);
    fields.get("hero").set(UnitType.Spell_Disruption_Web, false);
    fields.get("powerup").set(UnitType.Spell_Disruption_Web, false);
    fields.get("beacon").set(UnitType.Spell_Disruption_Web, false);
    fields.get("flagBeacon").set(UnitType.Spell_Disruption_Web, false);
    fields.get("specialBuilding").set(UnitType.Spell_Disruption_Web, false);
    fields.get("spell").set(UnitType.Spell_Disruption_Web, true);
    fields.get("producesCreep").set(UnitType.Spell_Disruption_Web, false);
    fields.get("producesLarva").set(UnitType.Spell_Disruption_Web, false);
    fields.get("mineralField").set(UnitType.Spell_Disruption_Web, false);
    fields.get("critter").set(UnitType.Spell_Disruption_Web, false);
    fields.get("canBuildAddon").set(UnitType.Spell_Disruption_Web, false);
    fields.get("researchesWhat").set(UnitType.Spell_Disruption_Web, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Spell_Disruption_Web, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Command_Center() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Command_Center, 106);
    fields.get("race").set(UnitType.Terran_Command_Center, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Command_Center, new UnitType.WhatBuilds(UnitType.Terran_SCV, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Terran_Command_Center,
            new ArrayList(
                Arrays.asList(
                    UnitType.Terran_SCV,
                    UnitType.Terran_Comsat_Station,
                    UnitType.Terran_Nuclear_Silo)));
    fields.get("requiredUnits").set(UnitType.Terran_Command_Center, toMap(UnitType.Terran_SCV, 1));
    fields.get("requiredTech").set(UnitType.Terran_Command_Center, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Command_Center, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Command_Center, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Command_Center, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Command_Center, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Command_Center, 1500);
    fields.get("maxShields").set(UnitType.Terran_Command_Center, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Command_Center, 0);
    fields.get("armor").set(UnitType.Terran_Command_Center, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Command_Center, 400);
    fields.get("gasPrice").set(UnitType.Terran_Command_Center, 0);
    fields.get("buildTime").set(UnitType.Terran_Command_Center, 1800);
    fields.get("supplyRequired").set(UnitType.Terran_Command_Center, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Command_Center, 20);
    fields.get("spaceRequired").set(UnitType.Terran_Command_Center, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Command_Center, 0);
    fields.get("buildScore").set(UnitType.Terran_Command_Center, 400);
    fields.get("destroyScore").set(UnitType.Terran_Command_Center, 1200);
    fields.get("size").set(UnitType.Terran_Command_Center, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Command_Center, 4);
    fields.get("tileHeight").set(UnitType.Terran_Command_Center, 3);
    fields.get("dimensionLeft").set(UnitType.Terran_Command_Center, 58);
    fields.get("dimensionUp").set(UnitType.Terran_Command_Center, 41);
    fields.get("dimensionRight").set(UnitType.Terran_Command_Center, 58);
    fields.get("dimensionDown").set(UnitType.Terran_Command_Center, 41);
    fields.get("width").set(UnitType.Terran_Command_Center, 117);
    fields.get("height").set(UnitType.Terran_Command_Center, 83);
    fields.get("seekRange").set(UnitType.Terran_Command_Center, 0);
    fields.get("sightRange").set(UnitType.Terran_Command_Center, 320);
    fields.get("groundWeapon").set(UnitType.Terran_Command_Center, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Command_Center, 0);
    fields.get("airWeapon").set(UnitType.Terran_Command_Center, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Command_Center, 0);
    fields.get("topSpeed").set(UnitType.Terran_Command_Center, 0.78125);
    fields.get("acceleration").set(UnitType.Terran_Command_Center, 33);
    fields.get("haltDistance").set(UnitType.Terran_Command_Center, 2763);
    fields.get("turnRadius").set(UnitType.Terran_Command_Center, 27);
    fields.get("canProduce").set(UnitType.Terran_Command_Center, true);
    fields.get("canAttack").set(UnitType.Terran_Command_Center, false);
    fields.get("canMove").set(UnitType.Terran_Command_Center, false);
    fields.get("flyer").set(UnitType.Terran_Command_Center, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Command_Center, false);
    fields.get("spellcaster").set(UnitType.Terran_Command_Center, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Command_Center, false);
    fields.get("invincible").set(UnitType.Terran_Command_Center, false);
    fields.get("organic").set(UnitType.Terran_Command_Center, false);
    fields.get("mechanical").set(UnitType.Terran_Command_Center, true);
    fields.get("robotic").set(UnitType.Terran_Command_Center, false);
    fields.get("detector").set(UnitType.Terran_Command_Center, false);
    fields.get("resourceContainer").set(UnitType.Terran_Command_Center, false);
    fields.get("resourceDepot").set(UnitType.Terran_Command_Center, true);
    fields.get("refinery").set(UnitType.Terran_Command_Center, false);
    fields.get("worker").set(UnitType.Terran_Command_Center, false);
    fields.get("requiresPsi").set(UnitType.Terran_Command_Center, false);
    fields.get("requiresCreep").set(UnitType.Terran_Command_Center, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Command_Center, false);
    fields.get("burrowable").set(UnitType.Terran_Command_Center, false);
    fields.get("cloakable").set(UnitType.Terran_Command_Center, false);
    fields.get("building").set(UnitType.Terran_Command_Center, true);
    fields.get("addon").set(UnitType.Terran_Command_Center, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Command_Center, true);
    fields.get("neutral").set(UnitType.Terran_Command_Center, false);
    fields.get("hero").set(UnitType.Terran_Command_Center, false);
    fields.get("powerup").set(UnitType.Terran_Command_Center, false);
    fields.get("beacon").set(UnitType.Terran_Command_Center, false);
    fields.get("flagBeacon").set(UnitType.Terran_Command_Center, false);
    fields.get("specialBuilding").set(UnitType.Terran_Command_Center, false);
    fields.get("spell").set(UnitType.Terran_Command_Center, false);
    fields.get("producesCreep").set(UnitType.Terran_Command_Center, false);
    fields.get("producesLarva").set(UnitType.Terran_Command_Center, false);
    fields.get("mineralField").set(UnitType.Terran_Command_Center, false);
    fields.get("critter").set(UnitType.Terran_Command_Center, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Command_Center, true);
    fields
        .get("researchesWhat")
        .set(UnitType.Terran_Command_Center, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Command_Center, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Comsat_Station() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Comsat_Station, 107);
    fields.get("race").set(UnitType.Terran_Comsat_Station, Race.Terran);
    fields
        .get("whatBuilds")
        .set(
            UnitType.Terran_Comsat_Station,
            new UnitType.WhatBuilds(UnitType.Terran_Command_Center, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Comsat_Station, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Terran_Comsat_Station,
            toMap(UnitType.Terran_Academy, 1, UnitType.Terran_Command_Center, 1));
    fields.get("requiredTech").set(UnitType.Terran_Comsat_Station, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Comsat_Station, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Terran_Comsat_Station, new ArrayList(Arrays.asList(TechType.Scanner_Sweep)));
    fields.get("upgrades").set(UnitType.Terran_Comsat_Station, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Comsat_Station, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Comsat_Station, 500);
    fields.get("maxShields").set(UnitType.Terran_Comsat_Station, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Comsat_Station, 200);
    fields.get("armor").set(UnitType.Terran_Comsat_Station, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Comsat_Station, 50);
    fields.get("gasPrice").set(UnitType.Terran_Comsat_Station, 50);
    fields.get("buildTime").set(UnitType.Terran_Comsat_Station, 600);
    fields.get("supplyRequired").set(UnitType.Terran_Comsat_Station, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Comsat_Station, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Comsat_Station, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Comsat_Station, 0);
    fields.get("buildScore").set(UnitType.Terran_Comsat_Station, 75);
    fields.get("destroyScore").set(UnitType.Terran_Comsat_Station, 225);
    fields.get("size").set(UnitType.Terran_Comsat_Station, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Comsat_Station, 2);
    fields.get("tileHeight").set(UnitType.Terran_Comsat_Station, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Comsat_Station, 37);
    fields.get("dimensionUp").set(UnitType.Terran_Comsat_Station, 16);
    fields.get("dimensionRight").set(UnitType.Terran_Comsat_Station, 31);
    fields.get("dimensionDown").set(UnitType.Terran_Comsat_Station, 25);
    fields.get("width").set(UnitType.Terran_Comsat_Station, 69);
    fields.get("height").set(UnitType.Terran_Comsat_Station, 42);
    fields.get("seekRange").set(UnitType.Terran_Comsat_Station, 0);
    fields.get("sightRange").set(UnitType.Terran_Comsat_Station, 320);
    fields.get("groundWeapon").set(UnitType.Terran_Comsat_Station, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Comsat_Station, 0);
    fields.get("airWeapon").set(UnitType.Terran_Comsat_Station, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Comsat_Station, 0);
    fields.get("topSpeed").set(UnitType.Terran_Comsat_Station, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Comsat_Station, 0);
    fields.get("haltDistance").set(UnitType.Terran_Comsat_Station, 0);
    fields.get("turnRadius").set(UnitType.Terran_Comsat_Station, 0);
    fields.get("canProduce").set(UnitType.Terran_Comsat_Station, false);
    fields.get("canAttack").set(UnitType.Terran_Comsat_Station, false);
    fields.get("canMove").set(UnitType.Terran_Comsat_Station, false);
    fields.get("flyer").set(UnitType.Terran_Comsat_Station, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Comsat_Station, false);
    fields.get("spellcaster").set(UnitType.Terran_Comsat_Station, true);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Comsat_Station, false);
    fields.get("invincible").set(UnitType.Terran_Comsat_Station, false);
    fields.get("organic").set(UnitType.Terran_Comsat_Station, false);
    fields.get("mechanical").set(UnitType.Terran_Comsat_Station, true);
    fields.get("robotic").set(UnitType.Terran_Comsat_Station, false);
    fields.get("detector").set(UnitType.Terran_Comsat_Station, false);
    fields.get("resourceContainer").set(UnitType.Terran_Comsat_Station, false);
    fields.get("resourceDepot").set(UnitType.Terran_Comsat_Station, false);
    fields.get("refinery").set(UnitType.Terran_Comsat_Station, false);
    fields.get("worker").set(UnitType.Terran_Comsat_Station, false);
    fields.get("requiresPsi").set(UnitType.Terran_Comsat_Station, false);
    fields.get("requiresCreep").set(UnitType.Terran_Comsat_Station, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Comsat_Station, false);
    fields.get("burrowable").set(UnitType.Terran_Comsat_Station, false);
    fields.get("cloakable").set(UnitType.Terran_Comsat_Station, false);
    fields.get("building").set(UnitType.Terran_Comsat_Station, true);
    fields.get("addon").set(UnitType.Terran_Comsat_Station, true);
    fields.get("flyingBuilding").set(UnitType.Terran_Comsat_Station, false);
    fields.get("neutral").set(UnitType.Terran_Comsat_Station, false);
    fields.get("hero").set(UnitType.Terran_Comsat_Station, false);
    fields.get("powerup").set(UnitType.Terran_Comsat_Station, false);
    fields.get("beacon").set(UnitType.Terran_Comsat_Station, false);
    fields.get("flagBeacon").set(UnitType.Terran_Comsat_Station, false);
    fields.get("specialBuilding").set(UnitType.Terran_Comsat_Station, false);
    fields.get("spell").set(UnitType.Terran_Comsat_Station, false);
    fields.get("producesCreep").set(UnitType.Terran_Comsat_Station, false);
    fields.get("producesLarva").set(UnitType.Terran_Comsat_Station, false);
    fields.get("mineralField").set(UnitType.Terran_Comsat_Station, false);
    fields.get("critter").set(UnitType.Terran_Comsat_Station, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Comsat_Station, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Terran_Comsat_Station, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Comsat_Station, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Nuclear_Silo() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Nuclear_Silo, 108);
    fields.get("race").set(UnitType.Terran_Nuclear_Silo, Race.Terran);
    fields
        .get("whatBuilds")
        .set(
            UnitType.Terran_Nuclear_Silo,
            new UnitType.WhatBuilds(UnitType.Terran_Command_Center, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Terran_Nuclear_Silo,
            new ArrayList(Arrays.asList(UnitType.Terran_Nuclear_Missile)));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Terran_Nuclear_Silo,
            toMap(
                UnitType.Terran_Command_Center,
                1,
                UnitType.Terran_Science_Facility,
                1,
                UnitType.Terran_Covert_Ops,
                1));
    fields.get("requiredTech").set(UnitType.Terran_Nuclear_Silo, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Nuclear_Silo, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Nuclear_Silo, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Nuclear_Silo, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Nuclear_Silo, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Nuclear_Silo, 600);
    fields.get("maxShields").set(UnitType.Terran_Nuclear_Silo, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Nuclear_Silo, 0);
    fields.get("armor").set(UnitType.Terran_Nuclear_Silo, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Nuclear_Silo, 100);
    fields.get("gasPrice").set(UnitType.Terran_Nuclear_Silo, 100);
    fields.get("buildTime").set(UnitType.Terran_Nuclear_Silo, 1200);
    fields.get("supplyRequired").set(UnitType.Terran_Nuclear_Silo, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Nuclear_Silo, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Nuclear_Silo, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Nuclear_Silo, 0);
    fields.get("buildScore").set(UnitType.Terran_Nuclear_Silo, 75);
    fields.get("destroyScore").set(UnitType.Terran_Nuclear_Silo, 225);
    fields.get("size").set(UnitType.Terran_Nuclear_Silo, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Nuclear_Silo, 2);
    fields.get("tileHeight").set(UnitType.Terran_Nuclear_Silo, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Nuclear_Silo, 37);
    fields.get("dimensionUp").set(UnitType.Terran_Nuclear_Silo, 16);
    fields.get("dimensionRight").set(UnitType.Terran_Nuclear_Silo, 31);
    fields.get("dimensionDown").set(UnitType.Terran_Nuclear_Silo, 25);
    fields.get("width").set(UnitType.Terran_Nuclear_Silo, 69);
    fields.get("height").set(UnitType.Terran_Nuclear_Silo, 42);
    fields.get("seekRange").set(UnitType.Terran_Nuclear_Silo, 0);
    fields.get("sightRange").set(UnitType.Terran_Nuclear_Silo, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Nuclear_Silo, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Nuclear_Silo, 0);
    fields.get("airWeapon").set(UnitType.Terran_Nuclear_Silo, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Nuclear_Silo, 0);
    fields.get("topSpeed").set(UnitType.Terran_Nuclear_Silo, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Nuclear_Silo, 0);
    fields.get("haltDistance").set(UnitType.Terran_Nuclear_Silo, 0);
    fields.get("turnRadius").set(UnitType.Terran_Nuclear_Silo, 0);
    fields.get("canProduce").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("canAttack").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("canMove").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("flyer").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("spellcaster").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("invincible").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("organic").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("mechanical").set(UnitType.Terran_Nuclear_Silo, true);
    fields.get("robotic").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("detector").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("resourceContainer").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("resourceDepot").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("refinery").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("worker").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("requiresPsi").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("requiresCreep").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("burrowable").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("cloakable").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("building").set(UnitType.Terran_Nuclear_Silo, true);
    fields.get("addon").set(UnitType.Terran_Nuclear_Silo, true);
    fields.get("flyingBuilding").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("neutral").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("hero").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("powerup").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("beacon").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("flagBeacon").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("specialBuilding").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("spell").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("producesCreep").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("producesLarva").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("mineralField").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("critter").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Nuclear_Silo, false);
    fields.get("researchesWhat").set(UnitType.Terran_Nuclear_Silo, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Nuclear_Silo, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Supply_Depot() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Supply_Depot, 109);
    fields.get("race").set(UnitType.Terran_Supply_Depot, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Supply_Depot, new UnitType.WhatBuilds(UnitType.Terran_SCV, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Supply_Depot, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Terran_Supply_Depot, toMap(UnitType.Terran_SCV, 1));
    fields.get("requiredTech").set(UnitType.Terran_Supply_Depot, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Supply_Depot, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Supply_Depot, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Supply_Depot, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Supply_Depot, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Supply_Depot, 500);
    fields.get("maxShields").set(UnitType.Terran_Supply_Depot, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Supply_Depot, 0);
    fields.get("armor").set(UnitType.Terran_Supply_Depot, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Supply_Depot, 100);
    fields.get("gasPrice").set(UnitType.Terran_Supply_Depot, 0);
    fields.get("buildTime").set(UnitType.Terran_Supply_Depot, 600);
    fields.get("supplyRequired").set(UnitType.Terran_Supply_Depot, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Supply_Depot, 16);
    fields.get("spaceRequired").set(UnitType.Terran_Supply_Depot, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Supply_Depot, 0);
    fields.get("buildScore").set(UnitType.Terran_Supply_Depot, 50);
    fields.get("destroyScore").set(UnitType.Terran_Supply_Depot, 150);
    fields.get("size").set(UnitType.Terran_Supply_Depot, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Supply_Depot, 3);
    fields.get("tileHeight").set(UnitType.Terran_Supply_Depot, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Supply_Depot, 38);
    fields.get("dimensionUp").set(UnitType.Terran_Supply_Depot, 22);
    fields.get("dimensionRight").set(UnitType.Terran_Supply_Depot, 38);
    fields.get("dimensionDown").set(UnitType.Terran_Supply_Depot, 26);
    fields.get("width").set(UnitType.Terran_Supply_Depot, 77);
    fields.get("height").set(UnitType.Terran_Supply_Depot, 49);
    fields.get("seekRange").set(UnitType.Terran_Supply_Depot, 0);
    fields.get("sightRange").set(UnitType.Terran_Supply_Depot, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Supply_Depot, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Supply_Depot, 0);
    fields.get("airWeapon").set(UnitType.Terran_Supply_Depot, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Supply_Depot, 0);
    fields.get("topSpeed").set(UnitType.Terran_Supply_Depot, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Supply_Depot, 0);
    fields.get("haltDistance").set(UnitType.Terran_Supply_Depot, 0);
    fields.get("turnRadius").set(UnitType.Terran_Supply_Depot, 0);
    fields.get("canProduce").set(UnitType.Terran_Supply_Depot, false);
    fields.get("canAttack").set(UnitType.Terran_Supply_Depot, false);
    fields.get("canMove").set(UnitType.Terran_Supply_Depot, false);
    fields.get("flyer").set(UnitType.Terran_Supply_Depot, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Supply_Depot, false);
    fields.get("spellcaster").set(UnitType.Terran_Supply_Depot, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Supply_Depot, false);
    fields.get("invincible").set(UnitType.Terran_Supply_Depot, false);
    fields.get("organic").set(UnitType.Terran_Supply_Depot, false);
    fields.get("mechanical").set(UnitType.Terran_Supply_Depot, true);
    fields.get("robotic").set(UnitType.Terran_Supply_Depot, false);
    fields.get("detector").set(UnitType.Terran_Supply_Depot, false);
    fields.get("resourceContainer").set(UnitType.Terran_Supply_Depot, false);
    fields.get("resourceDepot").set(UnitType.Terran_Supply_Depot, false);
    fields.get("refinery").set(UnitType.Terran_Supply_Depot, false);
    fields.get("worker").set(UnitType.Terran_Supply_Depot, false);
    fields.get("requiresPsi").set(UnitType.Terran_Supply_Depot, false);
    fields.get("requiresCreep").set(UnitType.Terran_Supply_Depot, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Supply_Depot, false);
    fields.get("burrowable").set(UnitType.Terran_Supply_Depot, false);
    fields.get("cloakable").set(UnitType.Terran_Supply_Depot, false);
    fields.get("building").set(UnitType.Terran_Supply_Depot, true);
    fields.get("addon").set(UnitType.Terran_Supply_Depot, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Supply_Depot, false);
    fields.get("neutral").set(UnitType.Terran_Supply_Depot, false);
    fields.get("hero").set(UnitType.Terran_Supply_Depot, false);
    fields.get("powerup").set(UnitType.Terran_Supply_Depot, false);
    fields.get("beacon").set(UnitType.Terran_Supply_Depot, false);
    fields.get("flagBeacon").set(UnitType.Terran_Supply_Depot, false);
    fields.get("specialBuilding").set(UnitType.Terran_Supply_Depot, false);
    fields.get("spell").set(UnitType.Terran_Supply_Depot, false);
    fields.get("producesCreep").set(UnitType.Terran_Supply_Depot, false);
    fields.get("producesLarva").set(UnitType.Terran_Supply_Depot, false);
    fields.get("mineralField").set(UnitType.Terran_Supply_Depot, false);
    fields.get("critter").set(UnitType.Terran_Supply_Depot, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Supply_Depot, false);
    fields.get("researchesWhat").set(UnitType.Terran_Supply_Depot, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Supply_Depot, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Refinery() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Refinery, 110);
    fields.get("race").set(UnitType.Terran_Refinery, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Refinery, new UnitType.WhatBuilds(UnitType.Terran_SCV, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Refinery, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Terran_Refinery, toMap(UnitType.Terran_SCV, 1));
    fields.get("requiredTech").set(UnitType.Terran_Refinery, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Refinery, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Refinery, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Refinery, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Refinery, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Refinery, 750);
    fields.get("maxShields").set(UnitType.Terran_Refinery, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Refinery, 0);
    fields.get("armor").set(UnitType.Terran_Refinery, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Refinery, 100);
    fields.get("gasPrice").set(UnitType.Terran_Refinery, 0);
    fields.get("buildTime").set(UnitType.Terran_Refinery, 600);
    fields.get("supplyRequired").set(UnitType.Terran_Refinery, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Refinery, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Refinery, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Refinery, 0);
    fields.get("buildScore").set(UnitType.Terran_Refinery, 50);
    fields.get("destroyScore").set(UnitType.Terran_Refinery, 150);
    fields.get("size").set(UnitType.Terran_Refinery, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Refinery, 4);
    fields.get("tileHeight").set(UnitType.Terran_Refinery, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Refinery, 56);
    fields.get("dimensionUp").set(UnitType.Terran_Refinery, 32);
    fields.get("dimensionRight").set(UnitType.Terran_Refinery, 56);
    fields.get("dimensionDown").set(UnitType.Terran_Refinery, 31);
    fields.get("width").set(UnitType.Terran_Refinery, 113);
    fields.get("height").set(UnitType.Terran_Refinery, 64);
    fields.get("seekRange").set(UnitType.Terran_Refinery, 0);
    fields.get("sightRange").set(UnitType.Terran_Refinery, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Refinery, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Refinery, 0);
    fields.get("airWeapon").set(UnitType.Terran_Refinery, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Refinery, 0);
    fields.get("topSpeed").set(UnitType.Terran_Refinery, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Refinery, 33);
    fields.get("haltDistance").set(UnitType.Terran_Refinery, 2763);
    fields.get("turnRadius").set(UnitType.Terran_Refinery, 27);
    fields.get("canProduce").set(UnitType.Terran_Refinery, false);
    fields.get("canAttack").set(UnitType.Terran_Refinery, false);
    fields.get("canMove").set(UnitType.Terran_Refinery, false);
    fields.get("flyer").set(UnitType.Terran_Refinery, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Refinery, false);
    fields.get("spellcaster").set(UnitType.Terran_Refinery, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Refinery, false);
    fields.get("invincible").set(UnitType.Terran_Refinery, false);
    fields.get("organic").set(UnitType.Terran_Refinery, false);
    fields.get("mechanical").set(UnitType.Terran_Refinery, true);
    fields.get("robotic").set(UnitType.Terran_Refinery, false);
    fields.get("detector").set(UnitType.Terran_Refinery, false);
    fields.get("resourceContainer").set(UnitType.Terran_Refinery, true);
    fields.get("resourceDepot").set(UnitType.Terran_Refinery, false);
    fields.get("refinery").set(UnitType.Terran_Refinery, true);
    fields.get("worker").set(UnitType.Terran_Refinery, false);
    fields.get("requiresPsi").set(UnitType.Terran_Refinery, false);
    fields.get("requiresCreep").set(UnitType.Terran_Refinery, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Refinery, false);
    fields.get("burrowable").set(UnitType.Terran_Refinery, false);
    fields.get("cloakable").set(UnitType.Terran_Refinery, false);
    fields.get("building").set(UnitType.Terran_Refinery, true);
    fields.get("addon").set(UnitType.Terran_Refinery, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Refinery, false);
    fields.get("neutral").set(UnitType.Terran_Refinery, false);
    fields.get("hero").set(UnitType.Terran_Refinery, false);
    fields.get("powerup").set(UnitType.Terran_Refinery, false);
    fields.get("beacon").set(UnitType.Terran_Refinery, false);
    fields.get("flagBeacon").set(UnitType.Terran_Refinery, false);
    fields.get("specialBuilding").set(UnitType.Terran_Refinery, false);
    fields.get("spell").set(UnitType.Terran_Refinery, false);
    fields.get("producesCreep").set(UnitType.Terran_Refinery, false);
    fields.get("producesLarva").set(UnitType.Terran_Refinery, false);
    fields.get("mineralField").set(UnitType.Terran_Refinery, false);
    fields.get("critter").set(UnitType.Terran_Refinery, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Refinery, false);
    fields.get("researchesWhat").set(UnitType.Terran_Refinery, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Refinery, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Barracks() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Barracks, 111);
    fields.get("race").set(UnitType.Terran_Barracks, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Barracks, new UnitType.WhatBuilds(UnitType.Terran_SCV, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Terran_Barracks,
            new ArrayList(
                Arrays.asList(
                    UnitType.Terran_Firebat,
                    UnitType.Terran_Marine,
                    UnitType.Terran_Medic,
                    UnitType.Terran_Ghost)));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Terran_Barracks,
            toMap(UnitType.Terran_Command_Center, 1, UnitType.Terran_SCV, 1));
    fields.get("requiredTech").set(UnitType.Terran_Barracks, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Barracks, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Barracks, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Barracks, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Barracks, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Barracks, 1000);
    fields.get("maxShields").set(UnitType.Terran_Barracks, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Barracks, 0);
    fields.get("armor").set(UnitType.Terran_Barracks, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Barracks, 150);
    fields.get("gasPrice").set(UnitType.Terran_Barracks, 0);
    fields.get("buildTime").set(UnitType.Terran_Barracks, 1200);
    fields.get("supplyRequired").set(UnitType.Terran_Barracks, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Barracks, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Barracks, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Barracks, 0);
    fields.get("buildScore").set(UnitType.Terran_Barracks, 75);
    fields.get("destroyScore").set(UnitType.Terran_Barracks, 225);
    fields.get("size").set(UnitType.Terran_Barracks, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Barracks, 4);
    fields.get("tileHeight").set(UnitType.Terran_Barracks, 3);
    fields.get("dimensionLeft").set(UnitType.Terran_Barracks, 48);
    fields.get("dimensionUp").set(UnitType.Terran_Barracks, 40);
    fields.get("dimensionRight").set(UnitType.Terran_Barracks, 56);
    fields.get("dimensionDown").set(UnitType.Terran_Barracks, 32);
    fields.get("width").set(UnitType.Terran_Barracks, 105);
    fields.get("height").set(UnitType.Terran_Barracks, 73);
    fields.get("seekRange").set(UnitType.Terran_Barracks, 0);
    fields.get("sightRange").set(UnitType.Terran_Barracks, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Barracks, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Barracks, 0);
    fields.get("airWeapon").set(UnitType.Terran_Barracks, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Barracks, 0);
    fields.get("topSpeed").set(UnitType.Terran_Barracks, 0.78125);
    fields.get("acceleration").set(UnitType.Terran_Barracks, 33);
    fields.get("haltDistance").set(UnitType.Terran_Barracks, 2763);
    fields.get("turnRadius").set(UnitType.Terran_Barracks, 27);
    fields.get("canProduce").set(UnitType.Terran_Barracks, true);
    fields.get("canAttack").set(UnitType.Terran_Barracks, false);
    fields.get("canMove").set(UnitType.Terran_Barracks, false);
    fields.get("flyer").set(UnitType.Terran_Barracks, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Barracks, false);
    fields.get("spellcaster").set(UnitType.Terran_Barracks, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Barracks, false);
    fields.get("invincible").set(UnitType.Terran_Barracks, false);
    fields.get("organic").set(UnitType.Terran_Barracks, false);
    fields.get("mechanical").set(UnitType.Terran_Barracks, true);
    fields.get("robotic").set(UnitType.Terran_Barracks, false);
    fields.get("detector").set(UnitType.Terran_Barracks, false);
    fields.get("resourceContainer").set(UnitType.Terran_Barracks, false);
    fields.get("resourceDepot").set(UnitType.Terran_Barracks, false);
    fields.get("refinery").set(UnitType.Terran_Barracks, false);
    fields.get("worker").set(UnitType.Terran_Barracks, false);
    fields.get("requiresPsi").set(UnitType.Terran_Barracks, false);
    fields.get("requiresCreep").set(UnitType.Terran_Barracks, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Barracks, false);
    fields.get("burrowable").set(UnitType.Terran_Barracks, false);
    fields.get("cloakable").set(UnitType.Terran_Barracks, false);
    fields.get("building").set(UnitType.Terran_Barracks, true);
    fields.get("addon").set(UnitType.Terran_Barracks, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Barracks, true);
    fields.get("neutral").set(UnitType.Terran_Barracks, false);
    fields.get("hero").set(UnitType.Terran_Barracks, false);
    fields.get("powerup").set(UnitType.Terran_Barracks, false);
    fields.get("beacon").set(UnitType.Terran_Barracks, false);
    fields.get("flagBeacon").set(UnitType.Terran_Barracks, false);
    fields.get("specialBuilding").set(UnitType.Terran_Barracks, false);
    fields.get("spell").set(UnitType.Terran_Barracks, false);
    fields.get("producesCreep").set(UnitType.Terran_Barracks, false);
    fields.get("producesLarva").set(UnitType.Terran_Barracks, false);
    fields.get("mineralField").set(UnitType.Terran_Barracks, false);
    fields.get("critter").set(UnitType.Terran_Barracks, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Barracks, false);
    fields.get("researchesWhat").set(UnitType.Terran_Barracks, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Barracks, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Academy() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Academy, 112);
    fields.get("race").set(UnitType.Terran_Academy, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Academy, new UnitType.WhatBuilds(UnitType.Terran_SCV, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Academy, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Terran_Academy, toMap(UnitType.Terran_Barracks, 1, UnitType.Terran_SCV, 1));
    fields.get("requiredTech").set(UnitType.Terran_Academy, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Academy, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Academy, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Academy, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Academy, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Academy, 600);
    fields.get("maxShields").set(UnitType.Terran_Academy, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Academy, 0);
    fields.get("armor").set(UnitType.Terran_Academy, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Academy, 150);
    fields.get("gasPrice").set(UnitType.Terran_Academy, 0);
    fields.get("buildTime").set(UnitType.Terran_Academy, 1200);
    fields.get("supplyRequired").set(UnitType.Terran_Academy, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Academy, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Academy, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Academy, 0);
    fields.get("buildScore").set(UnitType.Terran_Academy, 100);
    fields.get("destroyScore").set(UnitType.Terran_Academy, 300);
    fields.get("size").set(UnitType.Terran_Academy, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Academy, 3);
    fields.get("tileHeight").set(UnitType.Terran_Academy, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Academy, 40);
    fields.get("dimensionUp").set(UnitType.Terran_Academy, 32);
    fields.get("dimensionRight").set(UnitType.Terran_Academy, 44);
    fields.get("dimensionDown").set(UnitType.Terran_Academy, 24);
    fields.get("width").set(UnitType.Terran_Academy, 85);
    fields.get("height").set(UnitType.Terran_Academy, 57);
    fields.get("seekRange").set(UnitType.Terran_Academy, 0);
    fields.get("sightRange").set(UnitType.Terran_Academy, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Academy, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Academy, 0);
    fields.get("airWeapon").set(UnitType.Terran_Academy, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Academy, 0);
    fields.get("topSpeed").set(UnitType.Terran_Academy, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Academy, 0);
    fields.get("haltDistance").set(UnitType.Terran_Academy, 0);
    fields.get("turnRadius").set(UnitType.Terran_Academy, 0);
    fields.get("canProduce").set(UnitType.Terran_Academy, false);
    fields.get("canAttack").set(UnitType.Terran_Academy, false);
    fields.get("canMove").set(UnitType.Terran_Academy, false);
    fields.get("flyer").set(UnitType.Terran_Academy, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Academy, false);
    fields.get("spellcaster").set(UnitType.Terran_Academy, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Academy, false);
    fields.get("invincible").set(UnitType.Terran_Academy, false);
    fields.get("organic").set(UnitType.Terran_Academy, false);
    fields.get("mechanical").set(UnitType.Terran_Academy, true);
    fields.get("robotic").set(UnitType.Terran_Academy, false);
    fields.get("detector").set(UnitType.Terran_Academy, false);
    fields.get("resourceContainer").set(UnitType.Terran_Academy, false);
    fields.get("resourceDepot").set(UnitType.Terran_Academy, false);
    fields.get("refinery").set(UnitType.Terran_Academy, false);
    fields.get("worker").set(UnitType.Terran_Academy, false);
    fields.get("requiresPsi").set(UnitType.Terran_Academy, false);
    fields.get("requiresCreep").set(UnitType.Terran_Academy, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Academy, false);
    fields.get("burrowable").set(UnitType.Terran_Academy, false);
    fields.get("cloakable").set(UnitType.Terran_Academy, false);
    fields.get("building").set(UnitType.Terran_Academy, true);
    fields.get("addon").set(UnitType.Terran_Academy, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Academy, false);
    fields.get("neutral").set(UnitType.Terran_Academy, false);
    fields.get("hero").set(UnitType.Terran_Academy, false);
    fields.get("powerup").set(UnitType.Terran_Academy, false);
    fields.get("beacon").set(UnitType.Terran_Academy, false);
    fields.get("flagBeacon").set(UnitType.Terran_Academy, false);
    fields.get("specialBuilding").set(UnitType.Terran_Academy, false);
    fields.get("spell").set(UnitType.Terran_Academy, false);
    fields.get("producesCreep").set(UnitType.Terran_Academy, false);
    fields.get("producesLarva").set(UnitType.Terran_Academy, false);
    fields.get("mineralField").set(UnitType.Terran_Academy, false);
    fields.get("critter").set(UnitType.Terran_Academy, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Academy, false);
    fields
        .get("researchesWhat")
        .set(
            UnitType.Terran_Academy,
            new ArrayList(
                Arrays.asList(TechType.Restoration, TechType.Stim_Packs, TechType.Optical_Flare)));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Terran_Academy,
            new ArrayList(Arrays.asList(UpgradeType.U_238_Shells, UpgradeType.Caduceus_Reactor)));
  }

  private static void initializeUnitType_Terran_Factory() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Factory, 113);
    fields.get("race").set(UnitType.Terran_Factory, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Factory, new UnitType.WhatBuilds(UnitType.Terran_SCV, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Terran_Factory,
            new ArrayList(
                Arrays.asList(
                    UnitType.Terran_Vulture,
                    UnitType.Terran_Siege_Tank_Tank_Mode,
                    UnitType.Terran_Goliath,
                    UnitType.Terran_Machine_Shop)));
    fields
        .get("requiredUnits")
        .set(UnitType.Terran_Factory, toMap(UnitType.Terran_Barracks, 1, UnitType.Terran_SCV, 1));
    fields.get("requiredTech").set(UnitType.Terran_Factory, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Factory, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Factory, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Factory, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Factory, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Factory, 1250);
    fields.get("maxShields").set(UnitType.Terran_Factory, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Factory, 0);
    fields.get("armor").set(UnitType.Terran_Factory, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Factory, 200);
    fields.get("gasPrice").set(UnitType.Terran_Factory, 100);
    fields.get("buildTime").set(UnitType.Terran_Factory, 1200);
    fields.get("supplyRequired").set(UnitType.Terran_Factory, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Factory, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Factory, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Factory, 0);
    fields.get("buildScore").set(UnitType.Terran_Factory, 200);
    fields.get("destroyScore").set(UnitType.Terran_Factory, 600);
    fields.get("size").set(UnitType.Terran_Factory, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Factory, 4);
    fields.get("tileHeight").set(UnitType.Terran_Factory, 3);
    fields.get("dimensionLeft").set(UnitType.Terran_Factory, 56);
    fields.get("dimensionUp").set(UnitType.Terran_Factory, 40);
    fields.get("dimensionRight").set(UnitType.Terran_Factory, 56);
    fields.get("dimensionDown").set(UnitType.Terran_Factory, 40);
    fields.get("width").set(UnitType.Terran_Factory, 113);
    fields.get("height").set(UnitType.Terran_Factory, 81);
    fields.get("seekRange").set(UnitType.Terran_Factory, 0);
    fields.get("sightRange").set(UnitType.Terran_Factory, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Factory, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Factory, 0);
    fields.get("airWeapon").set(UnitType.Terran_Factory, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Factory, 0);
    fields.get("topSpeed").set(UnitType.Terran_Factory, 0.78125);
    fields.get("acceleration").set(UnitType.Terran_Factory, 33);
    fields.get("haltDistance").set(UnitType.Terran_Factory, 2763);
    fields.get("turnRadius").set(UnitType.Terran_Factory, 27);
    fields.get("canProduce").set(UnitType.Terran_Factory, true);
    fields.get("canAttack").set(UnitType.Terran_Factory, false);
    fields.get("canMove").set(UnitType.Terran_Factory, false);
    fields.get("flyer").set(UnitType.Terran_Factory, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Factory, false);
    fields.get("spellcaster").set(UnitType.Terran_Factory, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Factory, false);
    fields.get("invincible").set(UnitType.Terran_Factory, false);
    fields.get("organic").set(UnitType.Terran_Factory, false);
    fields.get("mechanical").set(UnitType.Terran_Factory, true);
    fields.get("robotic").set(UnitType.Terran_Factory, false);
    fields.get("detector").set(UnitType.Terran_Factory, false);
    fields.get("resourceContainer").set(UnitType.Terran_Factory, false);
    fields.get("resourceDepot").set(UnitType.Terran_Factory, false);
    fields.get("refinery").set(UnitType.Terran_Factory, false);
    fields.get("worker").set(UnitType.Terran_Factory, false);
    fields.get("requiresPsi").set(UnitType.Terran_Factory, false);
    fields.get("requiresCreep").set(UnitType.Terran_Factory, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Factory, false);
    fields.get("burrowable").set(UnitType.Terran_Factory, false);
    fields.get("cloakable").set(UnitType.Terran_Factory, false);
    fields.get("building").set(UnitType.Terran_Factory, true);
    fields.get("addon").set(UnitType.Terran_Factory, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Factory, true);
    fields.get("neutral").set(UnitType.Terran_Factory, false);
    fields.get("hero").set(UnitType.Terran_Factory, false);
    fields.get("powerup").set(UnitType.Terran_Factory, false);
    fields.get("beacon").set(UnitType.Terran_Factory, false);
    fields.get("flagBeacon").set(UnitType.Terran_Factory, false);
    fields.get("specialBuilding").set(UnitType.Terran_Factory, false);
    fields.get("spell").set(UnitType.Terran_Factory, false);
    fields.get("producesCreep").set(UnitType.Terran_Factory, false);
    fields.get("producesLarva").set(UnitType.Terran_Factory, false);
    fields.get("mineralField").set(UnitType.Terran_Factory, false);
    fields.get("critter").set(UnitType.Terran_Factory, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Factory, true);
    fields.get("researchesWhat").set(UnitType.Terran_Factory, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Factory, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Starport() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Starport, 114);
    fields.get("race").set(UnitType.Terran_Starport, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Starport, new UnitType.WhatBuilds(UnitType.Terran_SCV, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Terran_Starport,
            new ArrayList(
                Arrays.asList(
                    UnitType.Terran_Wraith,
                    UnitType.Terran_Control_Tower,
                    UnitType.Terran_Dropship,
                    UnitType.Terran_Science_Vessel,
                    UnitType.Terran_Battlecruiser,
                    UnitType.Terran_Valkyrie)));
    fields
        .get("requiredUnits")
        .set(UnitType.Terran_Starport, toMap(UnitType.Terran_SCV, 1, UnitType.Terran_Factory, 1));
    fields.get("requiredTech").set(UnitType.Terran_Starport, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Starport, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Starport, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Starport, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Starport, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Starport, 1300);
    fields.get("maxShields").set(UnitType.Terran_Starport, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Starport, 0);
    fields.get("armor").set(UnitType.Terran_Starport, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Starport, 150);
    fields.get("gasPrice").set(UnitType.Terran_Starport, 100);
    fields.get("buildTime").set(UnitType.Terran_Starport, 1050);
    fields.get("supplyRequired").set(UnitType.Terran_Starport, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Starport, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Starport, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Starport, 0);
    fields.get("buildScore").set(UnitType.Terran_Starport, 200);
    fields.get("destroyScore").set(UnitType.Terran_Starport, 600);
    fields.get("size").set(UnitType.Terran_Starport, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Starport, 4);
    fields.get("tileHeight").set(UnitType.Terran_Starport, 3);
    fields.get("dimensionLeft").set(UnitType.Terran_Starport, 48);
    fields.get("dimensionUp").set(UnitType.Terran_Starport, 40);
    fields.get("dimensionRight").set(UnitType.Terran_Starport, 48);
    fields.get("dimensionDown").set(UnitType.Terran_Starport, 38);
    fields.get("width").set(UnitType.Terran_Starport, 97);
    fields.get("height").set(UnitType.Terran_Starport, 79);
    fields.get("seekRange").set(UnitType.Terran_Starport, 0);
    fields.get("sightRange").set(UnitType.Terran_Starport, 320);
    fields.get("groundWeapon").set(UnitType.Terran_Starport, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Starport, 0);
    fields.get("airWeapon").set(UnitType.Terran_Starport, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Starport, 0);
    fields.get("topSpeed").set(UnitType.Terran_Starport, 0.78125);
    fields.get("acceleration").set(UnitType.Terran_Starport, 33);
    fields.get("haltDistance").set(UnitType.Terran_Starport, 2763);
    fields.get("turnRadius").set(UnitType.Terran_Starport, 27);
    fields.get("canProduce").set(UnitType.Terran_Starport, true);
    fields.get("canAttack").set(UnitType.Terran_Starport, false);
    fields.get("canMove").set(UnitType.Terran_Starport, false);
    fields.get("flyer").set(UnitType.Terran_Starport, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Starport, false);
    fields.get("spellcaster").set(UnitType.Terran_Starport, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Starport, false);
    fields.get("invincible").set(UnitType.Terran_Starport, false);
    fields.get("organic").set(UnitType.Terran_Starport, false);
    fields.get("mechanical").set(UnitType.Terran_Starport, true);
    fields.get("robotic").set(UnitType.Terran_Starport, false);
    fields.get("detector").set(UnitType.Terran_Starport, false);
    fields.get("resourceContainer").set(UnitType.Terran_Starport, false);
    fields.get("resourceDepot").set(UnitType.Terran_Starport, false);
    fields.get("refinery").set(UnitType.Terran_Starport, false);
    fields.get("worker").set(UnitType.Terran_Starport, false);
    fields.get("requiresPsi").set(UnitType.Terran_Starport, false);
    fields.get("requiresCreep").set(UnitType.Terran_Starport, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Starport, false);
    fields.get("burrowable").set(UnitType.Terran_Starport, false);
    fields.get("cloakable").set(UnitType.Terran_Starport, false);
    fields.get("building").set(UnitType.Terran_Starport, true);
    fields.get("addon").set(UnitType.Terran_Starport, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Starport, true);
    fields.get("neutral").set(UnitType.Terran_Starport, false);
    fields.get("hero").set(UnitType.Terran_Starport, false);
    fields.get("powerup").set(UnitType.Terran_Starport, false);
    fields.get("beacon").set(UnitType.Terran_Starport, false);
    fields.get("flagBeacon").set(UnitType.Terran_Starport, false);
    fields.get("specialBuilding").set(UnitType.Terran_Starport, false);
    fields.get("spell").set(UnitType.Terran_Starport, false);
    fields.get("producesCreep").set(UnitType.Terran_Starport, false);
    fields.get("producesLarva").set(UnitType.Terran_Starport, false);
    fields.get("mineralField").set(UnitType.Terran_Starport, false);
    fields.get("critter").set(UnitType.Terran_Starport, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Starport, true);
    fields.get("researchesWhat").set(UnitType.Terran_Starport, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Starport, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Control_Tower() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Control_Tower, 115);
    fields.get("race").set(UnitType.Terran_Control_Tower, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Control_Tower, new UnitType.WhatBuilds(UnitType.Terran_Starport, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Control_Tower, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Terran_Control_Tower, toMap(UnitType.Terran_Starport, 1));
    fields.get("requiredTech").set(UnitType.Terran_Control_Tower, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Control_Tower, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Control_Tower, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Control_Tower, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Control_Tower, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Control_Tower, 500);
    fields.get("maxShields").set(UnitType.Terran_Control_Tower, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Control_Tower, 0);
    fields.get("armor").set(UnitType.Terran_Control_Tower, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Control_Tower, 50);
    fields.get("gasPrice").set(UnitType.Terran_Control_Tower, 50);
    fields.get("buildTime").set(UnitType.Terran_Control_Tower, 600);
    fields.get("supplyRequired").set(UnitType.Terran_Control_Tower, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Control_Tower, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Control_Tower, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Control_Tower, 0);
    fields.get("buildScore").set(UnitType.Terran_Control_Tower, 100);
    fields.get("destroyScore").set(UnitType.Terran_Control_Tower, 300);
    fields.get("size").set(UnitType.Terran_Control_Tower, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Control_Tower, 2);
    fields.get("tileHeight").set(UnitType.Terran_Control_Tower, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Control_Tower, 47);
    fields.get("dimensionUp").set(UnitType.Terran_Control_Tower, 24);
    fields.get("dimensionRight").set(UnitType.Terran_Control_Tower, 28);
    fields.get("dimensionDown").set(UnitType.Terran_Control_Tower, 22);
    fields.get("width").set(UnitType.Terran_Control_Tower, 76);
    fields.get("height").set(UnitType.Terran_Control_Tower, 47);
    fields.get("seekRange").set(UnitType.Terran_Control_Tower, 0);
    fields.get("sightRange").set(UnitType.Terran_Control_Tower, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Control_Tower, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Control_Tower, 0);
    fields.get("airWeapon").set(UnitType.Terran_Control_Tower, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Control_Tower, 0);
    fields.get("topSpeed").set(UnitType.Terran_Control_Tower, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Control_Tower, 0);
    fields.get("haltDistance").set(UnitType.Terran_Control_Tower, 0);
    fields.get("turnRadius").set(UnitType.Terran_Control_Tower, 0);
    fields.get("canProduce").set(UnitType.Terran_Control_Tower, false);
    fields.get("canAttack").set(UnitType.Terran_Control_Tower, false);
    fields.get("canMove").set(UnitType.Terran_Control_Tower, false);
    fields.get("flyer").set(UnitType.Terran_Control_Tower, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Control_Tower, false);
    fields.get("spellcaster").set(UnitType.Terran_Control_Tower, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Control_Tower, false);
    fields.get("invincible").set(UnitType.Terran_Control_Tower, false);
    fields.get("organic").set(UnitType.Terran_Control_Tower, false);
    fields.get("mechanical").set(UnitType.Terran_Control_Tower, true);
    fields.get("robotic").set(UnitType.Terran_Control_Tower, false);
    fields.get("detector").set(UnitType.Terran_Control_Tower, false);
    fields.get("resourceContainer").set(UnitType.Terran_Control_Tower, false);
    fields.get("resourceDepot").set(UnitType.Terran_Control_Tower, false);
    fields.get("refinery").set(UnitType.Terran_Control_Tower, false);
    fields.get("worker").set(UnitType.Terran_Control_Tower, false);
    fields.get("requiresPsi").set(UnitType.Terran_Control_Tower, false);
    fields.get("requiresCreep").set(UnitType.Terran_Control_Tower, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Control_Tower, false);
    fields.get("burrowable").set(UnitType.Terran_Control_Tower, false);
    fields.get("cloakable").set(UnitType.Terran_Control_Tower, false);
    fields.get("building").set(UnitType.Terran_Control_Tower, true);
    fields.get("addon").set(UnitType.Terran_Control_Tower, true);
    fields.get("flyingBuilding").set(UnitType.Terran_Control_Tower, false);
    fields.get("neutral").set(UnitType.Terran_Control_Tower, false);
    fields.get("hero").set(UnitType.Terran_Control_Tower, false);
    fields.get("powerup").set(UnitType.Terran_Control_Tower, false);
    fields.get("beacon").set(UnitType.Terran_Control_Tower, false);
    fields.get("flagBeacon").set(UnitType.Terran_Control_Tower, false);
    fields.get("specialBuilding").set(UnitType.Terran_Control_Tower, false);
    fields.get("spell").set(UnitType.Terran_Control_Tower, false);
    fields.get("producesCreep").set(UnitType.Terran_Control_Tower, false);
    fields.get("producesLarva").set(UnitType.Terran_Control_Tower, false);
    fields.get("mineralField").set(UnitType.Terran_Control_Tower, false);
    fields.get("critter").set(UnitType.Terran_Control_Tower, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Control_Tower, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Terran_Control_Tower, new ArrayList(Arrays.asList(TechType.Cloaking_Field)));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Terran_Control_Tower,
            new ArrayList(Arrays.asList(UpgradeType.Apollo_Reactor)));
  }

  private static void initializeUnitType_Terran_Science_Facility() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Science_Facility, 116);
    fields.get("race").set(UnitType.Terran_Science_Facility, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Science_Facility, new UnitType.WhatBuilds(UnitType.Terran_SCV, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Terran_Science_Facility,
            new ArrayList(Arrays.asList(UnitType.Terran_Covert_Ops, UnitType.Terran_Physics_Lab)));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Terran_Science_Facility,
            toMap(UnitType.Terran_Starport, 1, UnitType.Terran_SCV, 1));
    fields.get("requiredTech").set(UnitType.Terran_Science_Facility, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Science_Facility, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Science_Facility, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Science_Facility, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Science_Facility, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Science_Facility, 850);
    fields.get("maxShields").set(UnitType.Terran_Science_Facility, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Science_Facility, 0);
    fields.get("armor").set(UnitType.Terran_Science_Facility, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Science_Facility, 100);
    fields.get("gasPrice").set(UnitType.Terran_Science_Facility, 150);
    fields.get("buildTime").set(UnitType.Terran_Science_Facility, 900);
    fields.get("supplyRequired").set(UnitType.Terran_Science_Facility, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Science_Facility, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Science_Facility, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Science_Facility, 0);
    fields.get("buildScore").set(UnitType.Terran_Science_Facility, 275);
    fields.get("destroyScore").set(UnitType.Terran_Science_Facility, 825);
    fields.get("size").set(UnitType.Terran_Science_Facility, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Science_Facility, 4);
    fields.get("tileHeight").set(UnitType.Terran_Science_Facility, 3);
    fields.get("dimensionLeft").set(UnitType.Terran_Science_Facility, 48);
    fields.get("dimensionUp").set(UnitType.Terran_Science_Facility, 38);
    fields.get("dimensionRight").set(UnitType.Terran_Science_Facility, 48);
    fields.get("dimensionDown").set(UnitType.Terran_Science_Facility, 38);
    fields.get("width").set(UnitType.Terran_Science_Facility, 97);
    fields.get("height").set(UnitType.Terran_Science_Facility, 77);
    fields.get("seekRange").set(UnitType.Terran_Science_Facility, 0);
    fields.get("sightRange").set(UnitType.Terran_Science_Facility, 320);
    fields.get("groundWeapon").set(UnitType.Terran_Science_Facility, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Science_Facility, 0);
    fields.get("airWeapon").set(UnitType.Terran_Science_Facility, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Science_Facility, 0);
    fields.get("topSpeed").set(UnitType.Terran_Science_Facility, 0.78125);
    fields.get("acceleration").set(UnitType.Terran_Science_Facility, 33);
    fields.get("haltDistance").set(UnitType.Terran_Science_Facility, 2763);
    fields.get("turnRadius").set(UnitType.Terran_Science_Facility, 27);
    fields.get("canProduce").set(UnitType.Terran_Science_Facility, false);
    fields.get("canAttack").set(UnitType.Terran_Science_Facility, false);
    fields.get("canMove").set(UnitType.Terran_Science_Facility, false);
    fields.get("flyer").set(UnitType.Terran_Science_Facility, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Science_Facility, false);
    fields.get("spellcaster").set(UnitType.Terran_Science_Facility, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Science_Facility, false);
    fields.get("invincible").set(UnitType.Terran_Science_Facility, false);
    fields.get("organic").set(UnitType.Terran_Science_Facility, false);
    fields.get("mechanical").set(UnitType.Terran_Science_Facility, true);
    fields.get("robotic").set(UnitType.Terran_Science_Facility, false);
    fields.get("detector").set(UnitType.Terran_Science_Facility, false);
    fields.get("resourceContainer").set(UnitType.Terran_Science_Facility, false);
    fields.get("resourceDepot").set(UnitType.Terran_Science_Facility, false);
    fields.get("refinery").set(UnitType.Terran_Science_Facility, false);
    fields.get("worker").set(UnitType.Terran_Science_Facility, false);
    fields.get("requiresPsi").set(UnitType.Terran_Science_Facility, false);
    fields.get("requiresCreep").set(UnitType.Terran_Science_Facility, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Science_Facility, false);
    fields.get("burrowable").set(UnitType.Terran_Science_Facility, false);
    fields.get("cloakable").set(UnitType.Terran_Science_Facility, false);
    fields.get("building").set(UnitType.Terran_Science_Facility, true);
    fields.get("addon").set(UnitType.Terran_Science_Facility, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Science_Facility, true);
    fields.get("neutral").set(UnitType.Terran_Science_Facility, false);
    fields.get("hero").set(UnitType.Terran_Science_Facility, false);
    fields.get("powerup").set(UnitType.Terran_Science_Facility, false);
    fields.get("beacon").set(UnitType.Terran_Science_Facility, false);
    fields.get("flagBeacon").set(UnitType.Terran_Science_Facility, false);
    fields.get("specialBuilding").set(UnitType.Terran_Science_Facility, false);
    fields.get("spell").set(UnitType.Terran_Science_Facility, false);
    fields.get("producesCreep").set(UnitType.Terran_Science_Facility, false);
    fields.get("producesLarva").set(UnitType.Terran_Science_Facility, false);
    fields.get("mineralField").set(UnitType.Terran_Science_Facility, false);
    fields.get("critter").set(UnitType.Terran_Science_Facility, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Science_Facility, true);
    fields
        .get("researchesWhat")
        .set(
            UnitType.Terran_Science_Facility,
            new ArrayList(Arrays.asList(TechType.EMP_Shockwave, TechType.Irradiate)));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Terran_Science_Facility,
            new ArrayList(Arrays.asList(UpgradeType.Titan_Reactor)));
  }

  private static void initializeUnitType_Terran_Covert_Ops() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Covert_Ops, 117);
    fields.get("race").set(UnitType.Terran_Covert_Ops, Race.Terran);
    fields
        .get("whatBuilds")
        .set(
            UnitType.Terran_Covert_Ops,
            new UnitType.WhatBuilds(UnitType.Terran_Science_Facility, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Covert_Ops, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Terran_Covert_Ops, toMap(UnitType.Terran_Science_Facility, 1));
    fields.get("requiredTech").set(UnitType.Terran_Covert_Ops, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Covert_Ops, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Covert_Ops, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Covert_Ops, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Covert_Ops, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Covert_Ops, 750);
    fields.get("maxShields").set(UnitType.Terran_Covert_Ops, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Covert_Ops, 0);
    fields.get("armor").set(UnitType.Terran_Covert_Ops, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Covert_Ops, 50);
    fields.get("gasPrice").set(UnitType.Terran_Covert_Ops, 50);
    fields.get("buildTime").set(UnitType.Terran_Covert_Ops, 600);
    fields.get("supplyRequired").set(UnitType.Terran_Covert_Ops, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Covert_Ops, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Covert_Ops, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Covert_Ops, 0);
    fields.get("buildScore").set(UnitType.Terran_Covert_Ops, 75);
    fields.get("destroyScore").set(UnitType.Terran_Covert_Ops, 225);
    fields.get("size").set(UnitType.Terran_Covert_Ops, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Covert_Ops, 2);
    fields.get("tileHeight").set(UnitType.Terran_Covert_Ops, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Covert_Ops, 47);
    fields.get("dimensionUp").set(UnitType.Terran_Covert_Ops, 24);
    fields.get("dimensionRight").set(UnitType.Terran_Covert_Ops, 28);
    fields.get("dimensionDown").set(UnitType.Terran_Covert_Ops, 22);
    fields.get("width").set(UnitType.Terran_Covert_Ops, 76);
    fields.get("height").set(UnitType.Terran_Covert_Ops, 47);
    fields.get("seekRange").set(UnitType.Terran_Covert_Ops, 0);
    fields.get("sightRange").set(UnitType.Terran_Covert_Ops, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Covert_Ops, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Covert_Ops, 0);
    fields.get("airWeapon").set(UnitType.Terran_Covert_Ops, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Covert_Ops, 0);
    fields.get("topSpeed").set(UnitType.Terran_Covert_Ops, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Covert_Ops, 0);
    fields.get("haltDistance").set(UnitType.Terran_Covert_Ops, 0);
    fields.get("turnRadius").set(UnitType.Terran_Covert_Ops, 0);
    fields.get("canProduce").set(UnitType.Terran_Covert_Ops, false);
    fields.get("canAttack").set(UnitType.Terran_Covert_Ops, false);
    fields.get("canMove").set(UnitType.Terran_Covert_Ops, false);
    fields.get("flyer").set(UnitType.Terran_Covert_Ops, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Covert_Ops, false);
    fields.get("spellcaster").set(UnitType.Terran_Covert_Ops, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Covert_Ops, false);
    fields.get("invincible").set(UnitType.Terran_Covert_Ops, false);
    fields.get("organic").set(UnitType.Terran_Covert_Ops, false);
    fields.get("mechanical").set(UnitType.Terran_Covert_Ops, true);
    fields.get("robotic").set(UnitType.Terran_Covert_Ops, false);
    fields.get("detector").set(UnitType.Terran_Covert_Ops, false);
    fields.get("resourceContainer").set(UnitType.Terran_Covert_Ops, false);
    fields.get("resourceDepot").set(UnitType.Terran_Covert_Ops, false);
    fields.get("refinery").set(UnitType.Terran_Covert_Ops, false);
    fields.get("worker").set(UnitType.Terran_Covert_Ops, false);
    fields.get("requiresPsi").set(UnitType.Terran_Covert_Ops, false);
    fields.get("requiresCreep").set(UnitType.Terran_Covert_Ops, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Covert_Ops, false);
    fields.get("burrowable").set(UnitType.Terran_Covert_Ops, false);
    fields.get("cloakable").set(UnitType.Terran_Covert_Ops, false);
    fields.get("building").set(UnitType.Terran_Covert_Ops, true);
    fields.get("addon").set(UnitType.Terran_Covert_Ops, true);
    fields.get("flyingBuilding").set(UnitType.Terran_Covert_Ops, false);
    fields.get("neutral").set(UnitType.Terran_Covert_Ops, false);
    fields.get("hero").set(UnitType.Terran_Covert_Ops, false);
    fields.get("powerup").set(UnitType.Terran_Covert_Ops, false);
    fields.get("beacon").set(UnitType.Terran_Covert_Ops, false);
    fields.get("flagBeacon").set(UnitType.Terran_Covert_Ops, false);
    fields.get("specialBuilding").set(UnitType.Terran_Covert_Ops, false);
    fields.get("spell").set(UnitType.Terran_Covert_Ops, false);
    fields.get("producesCreep").set(UnitType.Terran_Covert_Ops, false);
    fields.get("producesLarva").set(UnitType.Terran_Covert_Ops, false);
    fields.get("mineralField").set(UnitType.Terran_Covert_Ops, false);
    fields.get("critter").set(UnitType.Terran_Covert_Ops, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Covert_Ops, false);
    fields
        .get("researchesWhat")
        .set(
            UnitType.Terran_Covert_Ops,
            new ArrayList(Arrays.asList(TechType.Personnel_Cloaking, TechType.Lockdown)));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Terran_Covert_Ops,
            new ArrayList(Arrays.asList(UpgradeType.Ocular_Implants, UpgradeType.Moebius_Reactor)));
  }

  private static void initializeUnitType_Terran_Physics_Lab() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Physics_Lab, 118);
    fields.get("race").set(UnitType.Terran_Physics_Lab, Race.Terran);
    fields
        .get("whatBuilds")
        .set(
            UnitType.Terran_Physics_Lab,
            new UnitType.WhatBuilds(UnitType.Terran_Science_Facility, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Physics_Lab, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Terran_Physics_Lab, toMap(UnitType.Terran_Science_Facility, 1));
    fields.get("requiredTech").set(UnitType.Terran_Physics_Lab, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Physics_Lab, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Physics_Lab, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Physics_Lab, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Physics_Lab, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Physics_Lab, 600);
    fields.get("maxShields").set(UnitType.Terran_Physics_Lab, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Physics_Lab, 0);
    fields.get("armor").set(UnitType.Terran_Physics_Lab, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Physics_Lab, 50);
    fields.get("gasPrice").set(UnitType.Terran_Physics_Lab, 50);
    fields.get("buildTime").set(UnitType.Terran_Physics_Lab, 600);
    fields.get("supplyRequired").set(UnitType.Terran_Physics_Lab, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Physics_Lab, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Physics_Lab, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Physics_Lab, 0);
    fields.get("buildScore").set(UnitType.Terran_Physics_Lab, 75);
    fields.get("destroyScore").set(UnitType.Terran_Physics_Lab, 225);
    fields.get("size").set(UnitType.Terran_Physics_Lab, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Physics_Lab, 2);
    fields.get("tileHeight").set(UnitType.Terran_Physics_Lab, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Physics_Lab, 47);
    fields.get("dimensionUp").set(UnitType.Terran_Physics_Lab, 24);
    fields.get("dimensionRight").set(UnitType.Terran_Physics_Lab, 28);
    fields.get("dimensionDown").set(UnitType.Terran_Physics_Lab, 22);
    fields.get("width").set(UnitType.Terran_Physics_Lab, 76);
    fields.get("height").set(UnitType.Terran_Physics_Lab, 47);
    fields.get("seekRange").set(UnitType.Terran_Physics_Lab, 0);
    fields.get("sightRange").set(UnitType.Terran_Physics_Lab, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Physics_Lab, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Physics_Lab, 0);
    fields.get("airWeapon").set(UnitType.Terran_Physics_Lab, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Physics_Lab, 0);
    fields.get("topSpeed").set(UnitType.Terran_Physics_Lab, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Physics_Lab, 0);
    fields.get("haltDistance").set(UnitType.Terran_Physics_Lab, 0);
    fields.get("turnRadius").set(UnitType.Terran_Physics_Lab, 0);
    fields.get("canProduce").set(UnitType.Terran_Physics_Lab, false);
    fields.get("canAttack").set(UnitType.Terran_Physics_Lab, false);
    fields.get("canMove").set(UnitType.Terran_Physics_Lab, false);
    fields.get("flyer").set(UnitType.Terran_Physics_Lab, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Physics_Lab, false);
    fields.get("spellcaster").set(UnitType.Terran_Physics_Lab, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Physics_Lab, false);
    fields.get("invincible").set(UnitType.Terran_Physics_Lab, false);
    fields.get("organic").set(UnitType.Terran_Physics_Lab, false);
    fields.get("mechanical").set(UnitType.Terran_Physics_Lab, true);
    fields.get("robotic").set(UnitType.Terran_Physics_Lab, false);
    fields.get("detector").set(UnitType.Terran_Physics_Lab, false);
    fields.get("resourceContainer").set(UnitType.Terran_Physics_Lab, false);
    fields.get("resourceDepot").set(UnitType.Terran_Physics_Lab, false);
    fields.get("refinery").set(UnitType.Terran_Physics_Lab, false);
    fields.get("worker").set(UnitType.Terran_Physics_Lab, false);
    fields.get("requiresPsi").set(UnitType.Terran_Physics_Lab, false);
    fields.get("requiresCreep").set(UnitType.Terran_Physics_Lab, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Physics_Lab, false);
    fields.get("burrowable").set(UnitType.Terran_Physics_Lab, false);
    fields.get("cloakable").set(UnitType.Terran_Physics_Lab, false);
    fields.get("building").set(UnitType.Terran_Physics_Lab, true);
    fields.get("addon").set(UnitType.Terran_Physics_Lab, true);
    fields.get("flyingBuilding").set(UnitType.Terran_Physics_Lab, false);
    fields.get("neutral").set(UnitType.Terran_Physics_Lab, false);
    fields.get("hero").set(UnitType.Terran_Physics_Lab, false);
    fields.get("powerup").set(UnitType.Terran_Physics_Lab, false);
    fields.get("beacon").set(UnitType.Terran_Physics_Lab, false);
    fields.get("flagBeacon").set(UnitType.Terran_Physics_Lab, false);
    fields.get("specialBuilding").set(UnitType.Terran_Physics_Lab, false);
    fields.get("spell").set(UnitType.Terran_Physics_Lab, false);
    fields.get("producesCreep").set(UnitType.Terran_Physics_Lab, false);
    fields.get("producesLarva").set(UnitType.Terran_Physics_Lab, false);
    fields.get("mineralField").set(UnitType.Terran_Physics_Lab, false);
    fields.get("critter").set(UnitType.Terran_Physics_Lab, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Physics_Lab, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Terran_Physics_Lab, new ArrayList(Arrays.asList(TechType.Yamato_Gun)));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Terran_Physics_Lab,
            new ArrayList(Arrays.asList(UpgradeType.Colossus_Reactor)));
  }

  private static void initializeUnitType_Unused_Terran1() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Terran1, 119);
    fields.get("race").set(UnitType.Unused_Terran1, null);
    fields.get("whatBuilds").set(UnitType.Unused_Terran1, null);
    fields.get("buildsWhat").set(UnitType.Unused_Terran1, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Terran1, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Terran1, null);
    fields.get("cloakingTech").set(UnitType.Unused_Terran1, null);
    fields.get("abilities").set(UnitType.Unused_Terran1, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Unused_Terran1, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Terran1, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Terran1, 0);
    fields.get("maxShields").set(UnitType.Unused_Terran1, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Terran1, 0);
    fields.get("armor").set(UnitType.Unused_Terran1, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Terran1, 0);
    fields.get("gasPrice").set(UnitType.Unused_Terran1, 0);
    fields.get("buildTime").set(UnitType.Unused_Terran1, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Terran1, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Terran1, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Terran1, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Terran1, 0);
    fields.get("buildScore").set(UnitType.Unused_Terran1, 0);
    fields.get("destroyScore").set(UnitType.Unused_Terran1, 0);
    fields.get("size").set(UnitType.Unused_Terran1, null);
    fields.get("tileWidth").set(UnitType.Unused_Terran1, 0);
    fields.get("tileHeight").set(UnitType.Unused_Terran1, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Terran1, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Terran1, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Terran1, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Terran1, 0);
    fields.get("width").set(UnitType.Unused_Terran1, 0);
    fields.get("height").set(UnitType.Unused_Terran1, 0);
    fields.get("seekRange").set(UnitType.Unused_Terran1, 0);
    fields.get("sightRange").set(UnitType.Unused_Terran1, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Terran1, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Terran1, 0);
    fields.get("airWeapon").set(UnitType.Unused_Terran1, null);
    fields.get("maxAirHits").set(UnitType.Unused_Terran1, 0);
    fields.get("topSpeed").set(UnitType.Unused_Terran1, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Terran1, 0);
    fields.get("haltDistance").set(UnitType.Unused_Terran1, 0);
    fields.get("turnRadius").set(UnitType.Unused_Terran1, 0);
    fields.get("canProduce").set(UnitType.Unused_Terran1, false);
    fields.get("canAttack").set(UnitType.Unused_Terran1, false);
    fields.get("canMove").set(UnitType.Unused_Terran1, false);
    fields.get("flyer").set(UnitType.Unused_Terran1, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Terran1, false);
    fields.get("spellcaster").set(UnitType.Unused_Terran1, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Terran1, false);
    fields.get("invincible").set(UnitType.Unused_Terran1, false);
    fields.get("organic").set(UnitType.Unused_Terran1, false);
    fields.get("mechanical").set(UnitType.Unused_Terran1, false);
    fields.get("robotic").set(UnitType.Unused_Terran1, false);
    fields.get("detector").set(UnitType.Unused_Terran1, false);
    fields.get("resourceContainer").set(UnitType.Unused_Terran1, false);
    fields.get("resourceDepot").set(UnitType.Unused_Terran1, false);
    fields.get("refinery").set(UnitType.Unused_Terran1, false);
    fields.get("worker").set(UnitType.Unused_Terran1, false);
    fields.get("requiresPsi").set(UnitType.Unused_Terran1, false);
    fields.get("requiresCreep").set(UnitType.Unused_Terran1, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Terran1, false);
    fields.get("burrowable").set(UnitType.Unused_Terran1, false);
    fields.get("cloakable").set(UnitType.Unused_Terran1, false);
    fields.get("building").set(UnitType.Unused_Terran1, false);
    fields.get("addon").set(UnitType.Unused_Terran1, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Terran1, false);
    fields.get("neutral").set(UnitType.Unused_Terran1, false);
    fields.get("hero").set(UnitType.Unused_Terran1, false);
    fields.get("powerup").set(UnitType.Unused_Terran1, false);
    fields.get("beacon").set(UnitType.Unused_Terran1, false);
    fields.get("flagBeacon").set(UnitType.Unused_Terran1, false);
    fields.get("specialBuilding").set(UnitType.Unused_Terran1, false);
    fields.get("spell").set(UnitType.Unused_Terran1, false);
    fields.get("producesCreep").set(UnitType.Unused_Terran1, false);
    fields.get("producesLarva").set(UnitType.Unused_Terran1, false);
    fields.get("mineralField").set(UnitType.Unused_Terran1, false);
    fields.get("critter").set(UnitType.Unused_Terran1, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Terran1, false);
    fields.get("researchesWhat").set(UnitType.Unused_Terran1, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Unused_Terran1, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Machine_Shop() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Machine_Shop, 120);
    fields.get("race").set(UnitType.Terran_Machine_Shop, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Machine_Shop, new UnitType.WhatBuilds(UnitType.Terran_Factory, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Machine_Shop, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Terran_Machine_Shop, toMap(UnitType.Terran_Factory, 1));
    fields.get("requiredTech").set(UnitType.Terran_Machine_Shop, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Machine_Shop, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Machine_Shop, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Machine_Shop, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Machine_Shop, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Machine_Shop, 750);
    fields.get("maxShields").set(UnitType.Terran_Machine_Shop, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Machine_Shop, 0);
    fields.get("armor").set(UnitType.Terran_Machine_Shop, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Machine_Shop, 50);
    fields.get("gasPrice").set(UnitType.Terran_Machine_Shop, 50);
    fields.get("buildTime").set(UnitType.Terran_Machine_Shop, 600);
    fields.get("supplyRequired").set(UnitType.Terran_Machine_Shop, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Machine_Shop, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Machine_Shop, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Machine_Shop, 0);
    fields.get("buildScore").set(UnitType.Terran_Machine_Shop, 75);
    fields.get("destroyScore").set(UnitType.Terran_Machine_Shop, 225);
    fields.get("size").set(UnitType.Terran_Machine_Shop, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Machine_Shop, 2);
    fields.get("tileHeight").set(UnitType.Terran_Machine_Shop, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Machine_Shop, 39);
    fields.get("dimensionUp").set(UnitType.Terran_Machine_Shop, 24);
    fields.get("dimensionRight").set(UnitType.Terran_Machine_Shop, 31);
    fields.get("dimensionDown").set(UnitType.Terran_Machine_Shop, 24);
    fields.get("width").set(UnitType.Terran_Machine_Shop, 71);
    fields.get("height").set(UnitType.Terran_Machine_Shop, 49);
    fields.get("seekRange").set(UnitType.Terran_Machine_Shop, 0);
    fields.get("sightRange").set(UnitType.Terran_Machine_Shop, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Machine_Shop, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Machine_Shop, 0);
    fields.get("airWeapon").set(UnitType.Terran_Machine_Shop, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Machine_Shop, 0);
    fields.get("topSpeed").set(UnitType.Terran_Machine_Shop, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Machine_Shop, 0);
    fields.get("haltDistance").set(UnitType.Terran_Machine_Shop, 0);
    fields.get("turnRadius").set(UnitType.Terran_Machine_Shop, 0);
    fields.get("canProduce").set(UnitType.Terran_Machine_Shop, false);
    fields.get("canAttack").set(UnitType.Terran_Machine_Shop, false);
    fields.get("canMove").set(UnitType.Terran_Machine_Shop, false);
    fields.get("flyer").set(UnitType.Terran_Machine_Shop, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Machine_Shop, false);
    fields.get("spellcaster").set(UnitType.Terran_Machine_Shop, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Machine_Shop, false);
    fields.get("invincible").set(UnitType.Terran_Machine_Shop, false);
    fields.get("organic").set(UnitType.Terran_Machine_Shop, false);
    fields.get("mechanical").set(UnitType.Terran_Machine_Shop, true);
    fields.get("robotic").set(UnitType.Terran_Machine_Shop, false);
    fields.get("detector").set(UnitType.Terran_Machine_Shop, false);
    fields.get("resourceContainer").set(UnitType.Terran_Machine_Shop, false);
    fields.get("resourceDepot").set(UnitType.Terran_Machine_Shop, false);
    fields.get("refinery").set(UnitType.Terran_Machine_Shop, false);
    fields.get("worker").set(UnitType.Terran_Machine_Shop, false);
    fields.get("requiresPsi").set(UnitType.Terran_Machine_Shop, false);
    fields.get("requiresCreep").set(UnitType.Terran_Machine_Shop, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Machine_Shop, false);
    fields.get("burrowable").set(UnitType.Terran_Machine_Shop, false);
    fields.get("cloakable").set(UnitType.Terran_Machine_Shop, false);
    fields.get("building").set(UnitType.Terran_Machine_Shop, true);
    fields.get("addon").set(UnitType.Terran_Machine_Shop, true);
    fields.get("flyingBuilding").set(UnitType.Terran_Machine_Shop, false);
    fields.get("neutral").set(UnitType.Terran_Machine_Shop, false);
    fields.get("hero").set(UnitType.Terran_Machine_Shop, false);
    fields.get("powerup").set(UnitType.Terran_Machine_Shop, false);
    fields.get("beacon").set(UnitType.Terran_Machine_Shop, false);
    fields.get("flagBeacon").set(UnitType.Terran_Machine_Shop, false);
    fields.get("specialBuilding").set(UnitType.Terran_Machine_Shop, false);
    fields.get("spell").set(UnitType.Terran_Machine_Shop, false);
    fields.get("producesCreep").set(UnitType.Terran_Machine_Shop, false);
    fields.get("producesLarva").set(UnitType.Terran_Machine_Shop, false);
    fields.get("mineralField").set(UnitType.Terran_Machine_Shop, false);
    fields.get("critter").set(UnitType.Terran_Machine_Shop, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Machine_Shop, false);
    fields
        .get("researchesWhat")
        .set(
            UnitType.Terran_Machine_Shop,
            new ArrayList(Arrays.asList(TechType.Tank_Siege_Mode, TechType.Spider_Mines)));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Terran_Machine_Shop,
            new ArrayList(Arrays.asList(UpgradeType.Ion_Thrusters, UpgradeType.Charon_Boosters)));
  }

  private static void initializeUnitType_Unused_Terran2() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Terran2, 121);
    fields.get("race").set(UnitType.Unused_Terran2, null);
    fields.get("whatBuilds").set(UnitType.Unused_Terran2, null);
    fields.get("buildsWhat").set(UnitType.Unused_Terran2, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Terran2, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Terran2, null);
    fields.get("cloakingTech").set(UnitType.Unused_Terran2, null);
    fields.get("abilities").set(UnitType.Unused_Terran2, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Unused_Terran2, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Terran2, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Terran2, 0);
    fields.get("maxShields").set(UnitType.Unused_Terran2, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Terran2, 0);
    fields.get("armor").set(UnitType.Unused_Terran2, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Terran2, 0);
    fields.get("gasPrice").set(UnitType.Unused_Terran2, 0);
    fields.get("buildTime").set(UnitType.Unused_Terran2, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Terran2, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Terran2, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Terran2, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Terran2, 0);
    fields.get("buildScore").set(UnitType.Unused_Terran2, 0);
    fields.get("destroyScore").set(UnitType.Unused_Terran2, 0);
    fields.get("size").set(UnitType.Unused_Terran2, null);
    fields.get("tileWidth").set(UnitType.Unused_Terran2, 0);
    fields.get("tileHeight").set(UnitType.Unused_Terran2, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Terran2, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Terran2, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Terran2, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Terran2, 0);
    fields.get("width").set(UnitType.Unused_Terran2, 0);
    fields.get("height").set(UnitType.Unused_Terran2, 0);
    fields.get("seekRange").set(UnitType.Unused_Terran2, 0);
    fields.get("sightRange").set(UnitType.Unused_Terran2, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Terran2, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Terran2, 0);
    fields.get("airWeapon").set(UnitType.Unused_Terran2, null);
    fields.get("maxAirHits").set(UnitType.Unused_Terran2, 0);
    fields.get("topSpeed").set(UnitType.Unused_Terran2, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Terran2, 0);
    fields.get("haltDistance").set(UnitType.Unused_Terran2, 0);
    fields.get("turnRadius").set(UnitType.Unused_Terran2, 0);
    fields.get("canProduce").set(UnitType.Unused_Terran2, false);
    fields.get("canAttack").set(UnitType.Unused_Terran2, false);
    fields.get("canMove").set(UnitType.Unused_Terran2, false);
    fields.get("flyer").set(UnitType.Unused_Terran2, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Terran2, false);
    fields.get("spellcaster").set(UnitType.Unused_Terran2, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Terran2, false);
    fields.get("invincible").set(UnitType.Unused_Terran2, false);
    fields.get("organic").set(UnitType.Unused_Terran2, false);
    fields.get("mechanical").set(UnitType.Unused_Terran2, false);
    fields.get("robotic").set(UnitType.Unused_Terran2, false);
    fields.get("detector").set(UnitType.Unused_Terran2, false);
    fields.get("resourceContainer").set(UnitType.Unused_Terran2, false);
    fields.get("resourceDepot").set(UnitType.Unused_Terran2, false);
    fields.get("refinery").set(UnitType.Unused_Terran2, false);
    fields.get("worker").set(UnitType.Unused_Terran2, false);
    fields.get("requiresPsi").set(UnitType.Unused_Terran2, false);
    fields.get("requiresCreep").set(UnitType.Unused_Terran2, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Terran2, false);
    fields.get("burrowable").set(UnitType.Unused_Terran2, false);
    fields.get("cloakable").set(UnitType.Unused_Terran2, false);
    fields.get("building").set(UnitType.Unused_Terran2, false);
    fields.get("addon").set(UnitType.Unused_Terran2, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Terran2, false);
    fields.get("neutral").set(UnitType.Unused_Terran2, false);
    fields.get("hero").set(UnitType.Unused_Terran2, false);
    fields.get("powerup").set(UnitType.Unused_Terran2, false);
    fields.get("beacon").set(UnitType.Unused_Terran2, false);
    fields.get("flagBeacon").set(UnitType.Unused_Terran2, false);
    fields.get("specialBuilding").set(UnitType.Unused_Terran2, false);
    fields.get("spell").set(UnitType.Unused_Terran2, false);
    fields.get("producesCreep").set(UnitType.Unused_Terran2, false);
    fields.get("producesLarva").set(UnitType.Unused_Terran2, false);
    fields.get("mineralField").set(UnitType.Unused_Terran2, false);
    fields.get("critter").set(UnitType.Unused_Terran2, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Terran2, false);
    fields.get("researchesWhat").set(UnitType.Unused_Terran2, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Unused_Terran2, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Engineering_Bay() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Engineering_Bay, 122);
    fields.get("race").set(UnitType.Terran_Engineering_Bay, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Engineering_Bay, new UnitType.WhatBuilds(UnitType.Terran_SCV, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Engineering_Bay, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Terran_Engineering_Bay,
            toMap(UnitType.Terran_Command_Center, 1, UnitType.Terran_SCV, 1));
    fields.get("requiredTech").set(UnitType.Terran_Engineering_Bay, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Engineering_Bay, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Engineering_Bay, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Engineering_Bay, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Engineering_Bay, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Engineering_Bay, 850);
    fields.get("maxShields").set(UnitType.Terran_Engineering_Bay, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Engineering_Bay, 0);
    fields.get("armor").set(UnitType.Terran_Engineering_Bay, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Engineering_Bay, 125);
    fields.get("gasPrice").set(UnitType.Terran_Engineering_Bay, 0);
    fields.get("buildTime").set(UnitType.Terran_Engineering_Bay, 900);
    fields.get("supplyRequired").set(UnitType.Terran_Engineering_Bay, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Engineering_Bay, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Engineering_Bay, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Engineering_Bay, 0);
    fields.get("buildScore").set(UnitType.Terran_Engineering_Bay, 65);
    fields.get("destroyScore").set(UnitType.Terran_Engineering_Bay, 195);
    fields.get("size").set(UnitType.Terran_Engineering_Bay, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Engineering_Bay, 4);
    fields.get("tileHeight").set(UnitType.Terran_Engineering_Bay, 3);
    fields.get("dimensionLeft").set(UnitType.Terran_Engineering_Bay, 48);
    fields.get("dimensionUp").set(UnitType.Terran_Engineering_Bay, 32);
    fields.get("dimensionRight").set(UnitType.Terran_Engineering_Bay, 48);
    fields.get("dimensionDown").set(UnitType.Terran_Engineering_Bay, 28);
    fields.get("width").set(UnitType.Terran_Engineering_Bay, 97);
    fields.get("height").set(UnitType.Terran_Engineering_Bay, 61);
    fields.get("seekRange").set(UnitType.Terran_Engineering_Bay, 0);
    fields.get("sightRange").set(UnitType.Terran_Engineering_Bay, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Engineering_Bay, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Engineering_Bay, 0);
    fields.get("airWeapon").set(UnitType.Terran_Engineering_Bay, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Engineering_Bay, 0);
    fields.get("topSpeed").set(UnitType.Terran_Engineering_Bay, 0.78125);
    fields.get("acceleration").set(UnitType.Terran_Engineering_Bay, 33);
    fields.get("haltDistance").set(UnitType.Terran_Engineering_Bay, 2763);
    fields.get("turnRadius").set(UnitType.Terran_Engineering_Bay, 27);
    fields.get("canProduce").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("canAttack").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("canMove").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("flyer").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("spellcaster").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("invincible").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("organic").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("mechanical").set(UnitType.Terran_Engineering_Bay, true);
    fields.get("robotic").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("detector").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("resourceContainer").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("resourceDepot").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("refinery").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("worker").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("requiresPsi").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("requiresCreep").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("burrowable").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("cloakable").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("building").set(UnitType.Terran_Engineering_Bay, true);
    fields.get("addon").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Engineering_Bay, true);
    fields.get("neutral").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("hero").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("powerup").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("beacon").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("flagBeacon").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("specialBuilding").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("spell").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("producesCreep").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("producesLarva").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("mineralField").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("critter").set(UnitType.Terran_Engineering_Bay, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Engineering_Bay, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Terran_Engineering_Bay, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Terran_Engineering_Bay,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Infantry_Armor, UpgradeType.Terran_Infantry_Weapons)));
  }

  private static void initializeUnitType_Terran_Armory() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Armory, 123);
    fields.get("race").set(UnitType.Terran_Armory, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Armory, new UnitType.WhatBuilds(UnitType.Terran_SCV, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Armory, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Terran_Armory, toMap(UnitType.Terran_SCV, 1, UnitType.Terran_Factory, 1));
    fields.get("requiredTech").set(UnitType.Terran_Armory, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Armory, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Armory, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Armory, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Armory, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Armory, 750);
    fields.get("maxShields").set(UnitType.Terran_Armory, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Armory, 0);
    fields.get("armor").set(UnitType.Terran_Armory, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Armory, 100);
    fields.get("gasPrice").set(UnitType.Terran_Armory, 50);
    fields.get("buildTime").set(UnitType.Terran_Armory, 1200);
    fields.get("supplyRequired").set(UnitType.Terran_Armory, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Armory, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Armory, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Armory, 0);
    fields.get("buildScore").set(UnitType.Terran_Armory, 100);
    fields.get("destroyScore").set(UnitType.Terran_Armory, 300);
    fields.get("size").set(UnitType.Terran_Armory, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Armory, 3);
    fields.get("tileHeight").set(UnitType.Terran_Armory, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Armory, 48);
    fields.get("dimensionUp").set(UnitType.Terran_Armory, 32);
    fields.get("dimensionRight").set(UnitType.Terran_Armory, 47);
    fields.get("dimensionDown").set(UnitType.Terran_Armory, 22);
    fields.get("width").set(UnitType.Terran_Armory, 96);
    fields.get("height").set(UnitType.Terran_Armory, 55);
    fields.get("seekRange").set(UnitType.Terran_Armory, 0);
    fields.get("sightRange").set(UnitType.Terran_Armory, 256);
    fields.get("groundWeapon").set(UnitType.Terran_Armory, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Armory, 0);
    fields.get("airWeapon").set(UnitType.Terran_Armory, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Armory, 0);
    fields.get("topSpeed").set(UnitType.Terran_Armory, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Armory, 0);
    fields.get("haltDistance").set(UnitType.Terran_Armory, 0);
    fields.get("turnRadius").set(UnitType.Terran_Armory, 0);
    fields.get("canProduce").set(UnitType.Terran_Armory, false);
    fields.get("canAttack").set(UnitType.Terran_Armory, false);
    fields.get("canMove").set(UnitType.Terran_Armory, false);
    fields.get("flyer").set(UnitType.Terran_Armory, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Armory, false);
    fields.get("spellcaster").set(UnitType.Terran_Armory, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Armory, false);
    fields.get("invincible").set(UnitType.Terran_Armory, false);
    fields.get("organic").set(UnitType.Terran_Armory, false);
    fields.get("mechanical").set(UnitType.Terran_Armory, true);
    fields.get("robotic").set(UnitType.Terran_Armory, false);
    fields.get("detector").set(UnitType.Terran_Armory, false);
    fields.get("resourceContainer").set(UnitType.Terran_Armory, false);
    fields.get("resourceDepot").set(UnitType.Terran_Armory, false);
    fields.get("refinery").set(UnitType.Terran_Armory, false);
    fields.get("worker").set(UnitType.Terran_Armory, false);
    fields.get("requiresPsi").set(UnitType.Terran_Armory, false);
    fields.get("requiresCreep").set(UnitType.Terran_Armory, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Armory, false);
    fields.get("burrowable").set(UnitType.Terran_Armory, false);
    fields.get("cloakable").set(UnitType.Terran_Armory, false);
    fields.get("building").set(UnitType.Terran_Armory, true);
    fields.get("addon").set(UnitType.Terran_Armory, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Armory, false);
    fields.get("neutral").set(UnitType.Terran_Armory, false);
    fields.get("hero").set(UnitType.Terran_Armory, false);
    fields.get("powerup").set(UnitType.Terran_Armory, false);
    fields.get("beacon").set(UnitType.Terran_Armory, false);
    fields.get("flagBeacon").set(UnitType.Terran_Armory, false);
    fields.get("specialBuilding").set(UnitType.Terran_Armory, false);
    fields.get("spell").set(UnitType.Terran_Armory, false);
    fields.get("producesCreep").set(UnitType.Terran_Armory, false);
    fields.get("producesLarva").set(UnitType.Terran_Armory, false);
    fields.get("mineralField").set(UnitType.Terran_Armory, false);
    fields.get("critter").set(UnitType.Terran_Armory, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Armory, false);
    fields.get("researchesWhat").set(UnitType.Terran_Armory, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Terran_Armory,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Terran_Ship_Weapons,
                    UpgradeType.Terran_Vehicle_Plating,
                    UpgradeType.Terran_Vehicle_Weapons,
                    UpgradeType.Terran_Ship_Plating)));
  }

  private static void initializeUnitType_Terran_Missile_Turret() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Missile_Turret, 124);
    fields.get("race").set(UnitType.Terran_Missile_Turret, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Missile_Turret, new UnitType.WhatBuilds(UnitType.Terran_SCV, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Missile_Turret, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Terran_Missile_Turret,
            toMap(UnitType.Terran_Engineering_Bay, 1, UnitType.Terran_SCV, 1));
    fields.get("requiredTech").set(UnitType.Terran_Missile_Turret, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Missile_Turret, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Missile_Turret, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Missile_Turret, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Missile_Turret, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Missile_Turret, 200);
    fields.get("maxShields").set(UnitType.Terran_Missile_Turret, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Missile_Turret, 0);
    fields.get("armor").set(UnitType.Terran_Missile_Turret, 0);
    fields.get("mineralPrice").set(UnitType.Terran_Missile_Turret, 75);
    fields.get("gasPrice").set(UnitType.Terran_Missile_Turret, 0);
    fields.get("buildTime").set(UnitType.Terran_Missile_Turret, 450);
    fields.get("supplyRequired").set(UnitType.Terran_Missile_Turret, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Missile_Turret, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Missile_Turret, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Missile_Turret, 0);
    fields.get("buildScore").set(UnitType.Terran_Missile_Turret, 50);
    fields.get("destroyScore").set(UnitType.Terran_Missile_Turret, 150);
    fields.get("size").set(UnitType.Terran_Missile_Turret, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Missile_Turret, 2);
    fields.get("tileHeight").set(UnitType.Terran_Missile_Turret, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Missile_Turret, 16);
    fields.get("dimensionUp").set(UnitType.Terran_Missile_Turret, 32);
    fields.get("dimensionRight").set(UnitType.Terran_Missile_Turret, 16);
    fields.get("dimensionDown").set(UnitType.Terran_Missile_Turret, 16);
    fields.get("width").set(UnitType.Terran_Missile_Turret, 33);
    fields.get("height").set(UnitType.Terran_Missile_Turret, 49);
    fields.get("seekRange").set(UnitType.Terran_Missile_Turret, 0);
    fields.get("sightRange").set(UnitType.Terran_Missile_Turret, 352);
    fields.get("groundWeapon").set(UnitType.Terran_Missile_Turret, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Missile_Turret, 0);
    fields.get("airWeapon").set(UnitType.Terran_Missile_Turret, WeaponType.Longbolt_Missile);
    fields.get("maxAirHits").set(UnitType.Terran_Missile_Turret, 1);
    fields.get("topSpeed").set(UnitType.Terran_Missile_Turret, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Missile_Turret, 0);
    fields.get("haltDistance").set(UnitType.Terran_Missile_Turret, 0);
    fields.get("turnRadius").set(UnitType.Terran_Missile_Turret, 40);
    fields.get("canProduce").set(UnitType.Terran_Missile_Turret, false);
    fields.get("canAttack").set(UnitType.Terran_Missile_Turret, true);
    fields.get("canMove").set(UnitType.Terran_Missile_Turret, false);
    fields.get("flyer").set(UnitType.Terran_Missile_Turret, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Missile_Turret, false);
    fields.get("spellcaster").set(UnitType.Terran_Missile_Turret, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Missile_Turret, false);
    fields.get("invincible").set(UnitType.Terran_Missile_Turret, false);
    fields.get("organic").set(UnitType.Terran_Missile_Turret, false);
    fields.get("mechanical").set(UnitType.Terran_Missile_Turret, true);
    fields.get("robotic").set(UnitType.Terran_Missile_Turret, false);
    fields.get("detector").set(UnitType.Terran_Missile_Turret, true);
    fields.get("resourceContainer").set(UnitType.Terran_Missile_Turret, false);
    fields.get("resourceDepot").set(UnitType.Terran_Missile_Turret, false);
    fields.get("refinery").set(UnitType.Terran_Missile_Turret, false);
    fields.get("worker").set(UnitType.Terran_Missile_Turret, false);
    fields.get("requiresPsi").set(UnitType.Terran_Missile_Turret, false);
    fields.get("requiresCreep").set(UnitType.Terran_Missile_Turret, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Missile_Turret, false);
    fields.get("burrowable").set(UnitType.Terran_Missile_Turret, false);
    fields.get("cloakable").set(UnitType.Terran_Missile_Turret, false);
    fields.get("building").set(UnitType.Terran_Missile_Turret, true);
    fields.get("addon").set(UnitType.Terran_Missile_Turret, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Missile_Turret, false);
    fields.get("neutral").set(UnitType.Terran_Missile_Turret, false);
    fields.get("hero").set(UnitType.Terran_Missile_Turret, false);
    fields.get("powerup").set(UnitType.Terran_Missile_Turret, false);
    fields.get("beacon").set(UnitType.Terran_Missile_Turret, false);
    fields.get("flagBeacon").set(UnitType.Terran_Missile_Turret, false);
    fields.get("specialBuilding").set(UnitType.Terran_Missile_Turret, false);
    fields.get("spell").set(UnitType.Terran_Missile_Turret, false);
    fields.get("producesCreep").set(UnitType.Terran_Missile_Turret, false);
    fields.get("producesLarva").set(UnitType.Terran_Missile_Turret, false);
    fields.get("mineralField").set(UnitType.Terran_Missile_Turret, false);
    fields.get("critter").set(UnitType.Terran_Missile_Turret, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Missile_Turret, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Terran_Missile_Turret, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Missile_Turret, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Terran_Bunker() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Terran_Bunker, 125);
    fields.get("race").set(UnitType.Terran_Bunker, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Terran_Bunker, new UnitType.WhatBuilds(UnitType.Terran_SCV, 1));
    fields.get("buildsWhat").set(UnitType.Terran_Bunker, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Terran_Bunker, toMap(UnitType.Terran_Barracks, 1, UnitType.Terran_SCV, 1));
    fields.get("requiredTech").set(UnitType.Terran_Bunker, TechType.None);
    fields.get("cloakingTech").set(UnitType.Terran_Bunker, TechType.None);
    fields.get("abilities").set(UnitType.Terran_Bunker, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Terran_Bunker, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Terran_Bunker, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Terran_Bunker, 350);
    fields.get("maxShields").set(UnitType.Terran_Bunker, 0);
    fields.get("maxEnergy").set(UnitType.Terran_Bunker, 0);
    fields.get("armor").set(UnitType.Terran_Bunker, 1);
    fields.get("mineralPrice").set(UnitType.Terran_Bunker, 100);
    fields.get("gasPrice").set(UnitType.Terran_Bunker, 0);
    fields.get("buildTime").set(UnitType.Terran_Bunker, 450);
    fields.get("supplyRequired").set(UnitType.Terran_Bunker, 0);
    fields.get("supplyProvided").set(UnitType.Terran_Bunker, 0);
    fields.get("spaceRequired").set(UnitType.Terran_Bunker, 255);
    fields.get("spaceProvided").set(UnitType.Terran_Bunker, 4);
    fields.get("buildScore").set(UnitType.Terran_Bunker, 50);
    fields.get("destroyScore").set(UnitType.Terran_Bunker, 150);
    fields.get("size").set(UnitType.Terran_Bunker, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Terran_Bunker, 3);
    fields.get("tileHeight").set(UnitType.Terran_Bunker, 2);
    fields.get("dimensionLeft").set(UnitType.Terran_Bunker, 32);
    fields.get("dimensionUp").set(UnitType.Terran_Bunker, 24);
    fields.get("dimensionRight").set(UnitType.Terran_Bunker, 32);
    fields.get("dimensionDown").set(UnitType.Terran_Bunker, 16);
    fields.get("width").set(UnitType.Terran_Bunker, 65);
    fields.get("height").set(UnitType.Terran_Bunker, 41);
    fields.get("seekRange").set(UnitType.Terran_Bunker, 0);
    fields.get("sightRange").set(UnitType.Terran_Bunker, 320);
    fields.get("groundWeapon").set(UnitType.Terran_Bunker, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Terran_Bunker, 0);
    fields.get("airWeapon").set(UnitType.Terran_Bunker, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Terran_Bunker, 0);
    fields.get("topSpeed").set(UnitType.Terran_Bunker, 0.0);
    fields.get("acceleration").set(UnitType.Terran_Bunker, 33);
    fields.get("haltDistance").set(UnitType.Terran_Bunker, 2763);
    fields.get("turnRadius").set(UnitType.Terran_Bunker, 27);
    fields.get("canProduce").set(UnitType.Terran_Bunker, false);
    fields.get("canAttack").set(UnitType.Terran_Bunker, false);
    fields.get("canMove").set(UnitType.Terran_Bunker, false);
    fields.get("flyer").set(UnitType.Terran_Bunker, false);
    fields.get("regeneratesHP").set(UnitType.Terran_Bunker, false);
    fields.get("spellcaster").set(UnitType.Terran_Bunker, false);
    fields.get("hasPermanentCloak").set(UnitType.Terran_Bunker, false);
    fields.get("invincible").set(UnitType.Terran_Bunker, false);
    fields.get("organic").set(UnitType.Terran_Bunker, false);
    fields.get("mechanical").set(UnitType.Terran_Bunker, true);
    fields.get("robotic").set(UnitType.Terran_Bunker, false);
    fields.get("detector").set(UnitType.Terran_Bunker, false);
    fields.get("resourceContainer").set(UnitType.Terran_Bunker, false);
    fields.get("resourceDepot").set(UnitType.Terran_Bunker, false);
    fields.get("refinery").set(UnitType.Terran_Bunker, false);
    fields.get("worker").set(UnitType.Terran_Bunker, false);
    fields.get("requiresPsi").set(UnitType.Terran_Bunker, false);
    fields.get("requiresCreep").set(UnitType.Terran_Bunker, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Terran_Bunker, false);
    fields.get("burrowable").set(UnitType.Terran_Bunker, false);
    fields.get("cloakable").set(UnitType.Terran_Bunker, false);
    fields.get("building").set(UnitType.Terran_Bunker, true);
    fields.get("addon").set(UnitType.Terran_Bunker, false);
    fields.get("flyingBuilding").set(UnitType.Terran_Bunker, false);
    fields.get("neutral").set(UnitType.Terran_Bunker, false);
    fields.get("hero").set(UnitType.Terran_Bunker, false);
    fields.get("powerup").set(UnitType.Terran_Bunker, false);
    fields.get("beacon").set(UnitType.Terran_Bunker, false);
    fields.get("flagBeacon").set(UnitType.Terran_Bunker, false);
    fields.get("specialBuilding").set(UnitType.Terran_Bunker, false);
    fields.get("spell").set(UnitType.Terran_Bunker, false);
    fields.get("producesCreep").set(UnitType.Terran_Bunker, false);
    fields.get("producesLarva").set(UnitType.Terran_Bunker, false);
    fields.get("mineralField").set(UnitType.Terran_Bunker, false);
    fields.get("critter").set(UnitType.Terran_Bunker, false);
    fields.get("canBuildAddon").set(UnitType.Terran_Bunker, false);
    fields.get("researchesWhat").set(UnitType.Terran_Bunker, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Terran_Bunker, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Crashed_Norad_II() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Crashed_Norad_II, 126);
    fields.get("race").set(UnitType.Special_Crashed_Norad_II, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Crashed_Norad_II, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Crashed_Norad_II, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Crashed_Norad_II, toMap());
    fields.get("requiredTech").set(UnitType.Special_Crashed_Norad_II, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Crashed_Norad_II, TechType.None);
    fields.get("abilities").set(UnitType.Special_Crashed_Norad_II, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Crashed_Norad_II, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Crashed_Norad_II, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Crashed_Norad_II, 700);
    fields.get("maxShields").set(UnitType.Special_Crashed_Norad_II, 0);
    fields.get("maxEnergy").set(UnitType.Special_Crashed_Norad_II, 0);
    fields.get("armor").set(UnitType.Special_Crashed_Norad_II, 1);
    fields.get("mineralPrice").set(UnitType.Special_Crashed_Norad_II, 800);
    fields.get("gasPrice").set(UnitType.Special_Crashed_Norad_II, 600);
    fields.get("buildTime").set(UnitType.Special_Crashed_Norad_II, 4800);
    fields.get("supplyRequired").set(UnitType.Special_Crashed_Norad_II, 0);
    fields.get("supplyProvided").set(UnitType.Special_Crashed_Norad_II, 0);
    fields.get("spaceRequired").set(UnitType.Special_Crashed_Norad_II, 255);
    fields.get("spaceProvided").set(UnitType.Special_Crashed_Norad_II, 0);
    fields.get("buildScore").set(UnitType.Special_Crashed_Norad_II, 0);
    fields.get("destroyScore").set(UnitType.Special_Crashed_Norad_II, 5000);
    fields.get("size").set(UnitType.Special_Crashed_Norad_II, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Crashed_Norad_II, 3);
    fields.get("tileHeight").set(UnitType.Special_Crashed_Norad_II, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Crashed_Norad_II, 48);
    fields.get("dimensionUp").set(UnitType.Special_Crashed_Norad_II, 32);
    fields.get("dimensionRight").set(UnitType.Special_Crashed_Norad_II, 47);
    fields.get("dimensionDown").set(UnitType.Special_Crashed_Norad_II, 31);
    fields.get("width").set(UnitType.Special_Crashed_Norad_II, 96);
    fields.get("height").set(UnitType.Special_Crashed_Norad_II, 64);
    fields.get("seekRange").set(UnitType.Special_Crashed_Norad_II, 0);
    fields.get("sightRange").set(UnitType.Special_Crashed_Norad_II, 320);
    fields.get("groundWeapon").set(UnitType.Special_Crashed_Norad_II, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Crashed_Norad_II, 0);
    fields.get("airWeapon").set(UnitType.Special_Crashed_Norad_II, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Crashed_Norad_II, 0);
    fields.get("topSpeed").set(UnitType.Special_Crashed_Norad_II, 0.0);
    fields.get("acceleration").set(UnitType.Special_Crashed_Norad_II, 0);
    fields.get("haltDistance").set(UnitType.Special_Crashed_Norad_II, 0);
    fields.get("turnRadius").set(UnitType.Special_Crashed_Norad_II, 0);
    fields.get("canProduce").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("canAttack").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("canMove").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("flyer").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("regeneratesHP").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("spellcaster").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("invincible").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("organic").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("mechanical").set(UnitType.Special_Crashed_Norad_II, true);
    fields.get("robotic").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("detector").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("resourceContainer").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("resourceDepot").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("refinery").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("worker").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("requiresPsi").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("requiresCreep").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("burrowable").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("cloakable").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("building").set(UnitType.Special_Crashed_Norad_II, true);
    fields.get("addon").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("flyingBuilding").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("neutral").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("hero").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("powerup").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("beacon").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("flagBeacon").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("specialBuilding").set(UnitType.Special_Crashed_Norad_II, true);
    fields.get("spell").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("producesCreep").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("producesLarva").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("mineralField").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("critter").set(UnitType.Special_Crashed_Norad_II, false);
    fields.get("canBuildAddon").set(UnitType.Special_Crashed_Norad_II, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Crashed_Norad_II, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Crashed_Norad_II, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Ion_Cannon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Ion_Cannon, 127);
    fields.get("race").set(UnitType.Special_Ion_Cannon, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Ion_Cannon, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Ion_Cannon, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Ion_Cannon, toMap());
    fields.get("requiredTech").set(UnitType.Special_Ion_Cannon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Ion_Cannon, TechType.None);
    fields.get("abilities").set(UnitType.Special_Ion_Cannon, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Ion_Cannon, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Ion_Cannon, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Ion_Cannon, 2000);
    fields.get("maxShields").set(UnitType.Special_Ion_Cannon, 0);
    fields.get("maxEnergy").set(UnitType.Special_Ion_Cannon, 0);
    fields.get("armor").set(UnitType.Special_Ion_Cannon, 1);
    fields.get("mineralPrice").set(UnitType.Special_Ion_Cannon, 200);
    fields.get("gasPrice").set(UnitType.Special_Ion_Cannon, 0);
    fields.get("buildTime").set(UnitType.Special_Ion_Cannon, 900);
    fields.get("supplyRequired").set(UnitType.Special_Ion_Cannon, 0);
    fields.get("supplyProvided").set(UnitType.Special_Ion_Cannon, 0);
    fields.get("spaceRequired").set(UnitType.Special_Ion_Cannon, 255);
    fields.get("spaceProvided").set(UnitType.Special_Ion_Cannon, 0);
    fields.get("buildScore").set(UnitType.Special_Ion_Cannon, 0);
    fields.get("destroyScore").set(UnitType.Special_Ion_Cannon, 5000);
    fields.get("size").set(UnitType.Special_Ion_Cannon, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Ion_Cannon, 3);
    fields.get("tileHeight").set(UnitType.Special_Ion_Cannon, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Ion_Cannon, 48);
    fields.get("dimensionUp").set(UnitType.Special_Ion_Cannon, 32);
    fields.get("dimensionRight").set(UnitType.Special_Ion_Cannon, 47);
    fields.get("dimensionDown").set(UnitType.Special_Ion_Cannon, 31);
    fields.get("width").set(UnitType.Special_Ion_Cannon, 96);
    fields.get("height").set(UnitType.Special_Ion_Cannon, 64);
    fields.get("seekRange").set(UnitType.Special_Ion_Cannon, 0);
    fields.get("sightRange").set(UnitType.Special_Ion_Cannon, 256);
    fields.get("groundWeapon").set(UnitType.Special_Ion_Cannon, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Ion_Cannon, 0);
    fields.get("airWeapon").set(UnitType.Special_Ion_Cannon, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Ion_Cannon, 0);
    fields.get("topSpeed").set(UnitType.Special_Ion_Cannon, 0.0);
    fields.get("acceleration").set(UnitType.Special_Ion_Cannon, 0);
    fields.get("haltDistance").set(UnitType.Special_Ion_Cannon, 0);
    fields.get("turnRadius").set(UnitType.Special_Ion_Cannon, 0);
    fields.get("canProduce").set(UnitType.Special_Ion_Cannon, false);
    fields.get("canAttack").set(UnitType.Special_Ion_Cannon, false);
    fields.get("canMove").set(UnitType.Special_Ion_Cannon, false);
    fields.get("flyer").set(UnitType.Special_Ion_Cannon, false);
    fields.get("regeneratesHP").set(UnitType.Special_Ion_Cannon, false);
    fields.get("spellcaster").set(UnitType.Special_Ion_Cannon, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Ion_Cannon, false);
    fields.get("invincible").set(UnitType.Special_Ion_Cannon, false);
    fields.get("organic").set(UnitType.Special_Ion_Cannon, false);
    fields.get("mechanical").set(UnitType.Special_Ion_Cannon, true);
    fields.get("robotic").set(UnitType.Special_Ion_Cannon, false);
    fields.get("detector").set(UnitType.Special_Ion_Cannon, false);
    fields.get("resourceContainer").set(UnitType.Special_Ion_Cannon, false);
    fields.get("resourceDepot").set(UnitType.Special_Ion_Cannon, false);
    fields.get("refinery").set(UnitType.Special_Ion_Cannon, false);
    fields.get("worker").set(UnitType.Special_Ion_Cannon, false);
    fields.get("requiresPsi").set(UnitType.Special_Ion_Cannon, false);
    fields.get("requiresCreep").set(UnitType.Special_Ion_Cannon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Ion_Cannon, false);
    fields.get("burrowable").set(UnitType.Special_Ion_Cannon, false);
    fields.get("cloakable").set(UnitType.Special_Ion_Cannon, false);
    fields.get("building").set(UnitType.Special_Ion_Cannon, true);
    fields.get("addon").set(UnitType.Special_Ion_Cannon, false);
    fields.get("flyingBuilding").set(UnitType.Special_Ion_Cannon, false);
    fields.get("neutral").set(UnitType.Special_Ion_Cannon, false);
    fields.get("hero").set(UnitType.Special_Ion_Cannon, false);
    fields.get("powerup").set(UnitType.Special_Ion_Cannon, false);
    fields.get("beacon").set(UnitType.Special_Ion_Cannon, false);
    fields.get("flagBeacon").set(UnitType.Special_Ion_Cannon, false);
    fields.get("specialBuilding").set(UnitType.Special_Ion_Cannon, true);
    fields.get("spell").set(UnitType.Special_Ion_Cannon, false);
    fields.get("producesCreep").set(UnitType.Special_Ion_Cannon, false);
    fields.get("producesLarva").set(UnitType.Special_Ion_Cannon, false);
    fields.get("mineralField").set(UnitType.Special_Ion_Cannon, false);
    fields.get("critter").set(UnitType.Special_Ion_Cannon, false);
    fields.get("canBuildAddon").set(UnitType.Special_Ion_Cannon, false);
    fields.get("researchesWhat").set(UnitType.Special_Ion_Cannon, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Ion_Cannon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Powerup_Uraj_Crystal() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Powerup_Uraj_Crystal, 128);
    fields.get("race").set(UnitType.Powerup_Uraj_Crystal, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Powerup_Uraj_Crystal, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Powerup_Uraj_Crystal, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Powerup_Uraj_Crystal, toMap());
    fields.get("requiredTech").set(UnitType.Powerup_Uraj_Crystal, TechType.None);
    fields.get("cloakingTech").set(UnitType.Powerup_Uraj_Crystal, TechType.None);
    fields.get("abilities").set(UnitType.Powerup_Uraj_Crystal, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Powerup_Uraj_Crystal, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Powerup_Uraj_Crystal, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Powerup_Uraj_Crystal, 10000);
    fields.get("maxShields").set(UnitType.Powerup_Uraj_Crystal, 0);
    fields.get("maxEnergy").set(UnitType.Powerup_Uraj_Crystal, 0);
    fields.get("armor").set(UnitType.Powerup_Uraj_Crystal, 0);
    fields.get("mineralPrice").set(UnitType.Powerup_Uraj_Crystal, 1);
    fields.get("gasPrice").set(UnitType.Powerup_Uraj_Crystal, 1);
    fields.get("buildTime").set(UnitType.Powerup_Uraj_Crystal, 1);
    fields.get("supplyRequired").set(UnitType.Powerup_Uraj_Crystal, 0);
    fields.get("supplyProvided").set(UnitType.Powerup_Uraj_Crystal, 0);
    fields.get("spaceRequired").set(UnitType.Powerup_Uraj_Crystal, 255);
    fields.get("spaceProvided").set(UnitType.Powerup_Uraj_Crystal, 0);
    fields.get("buildScore").set(UnitType.Powerup_Uraj_Crystal, 0);
    fields.get("destroyScore").set(UnitType.Powerup_Uraj_Crystal, 0);
    fields.get("size").set(UnitType.Powerup_Uraj_Crystal, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Powerup_Uraj_Crystal, 1);
    fields.get("tileHeight").set(UnitType.Powerup_Uraj_Crystal, 1);
    fields.get("dimensionLeft").set(UnitType.Powerup_Uraj_Crystal, 16);
    fields.get("dimensionUp").set(UnitType.Powerup_Uraj_Crystal, 16);
    fields.get("dimensionRight").set(UnitType.Powerup_Uraj_Crystal, 15);
    fields.get("dimensionDown").set(UnitType.Powerup_Uraj_Crystal, 15);
    fields.get("width").set(UnitType.Powerup_Uraj_Crystal, 32);
    fields.get("height").set(UnitType.Powerup_Uraj_Crystal, 32);
    fields.get("seekRange").set(UnitType.Powerup_Uraj_Crystal, 0);
    fields.get("sightRange").set(UnitType.Powerup_Uraj_Crystal, 160);
    fields.get("groundWeapon").set(UnitType.Powerup_Uraj_Crystal, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Powerup_Uraj_Crystal, 0);
    fields.get("airWeapon").set(UnitType.Powerup_Uraj_Crystal, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Powerup_Uraj_Crystal, 0);
    fields.get("topSpeed").set(UnitType.Powerup_Uraj_Crystal, 0.0);
    fields.get("acceleration").set(UnitType.Powerup_Uraj_Crystal, 0);
    fields.get("haltDistance").set(UnitType.Powerup_Uraj_Crystal, 0);
    fields.get("turnRadius").set(UnitType.Powerup_Uraj_Crystal, 0);
    fields.get("canProduce").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("canAttack").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("canMove").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("flyer").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("regeneratesHP").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("spellcaster").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("hasPermanentCloak").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("invincible").set(UnitType.Powerup_Uraj_Crystal, true);
    fields.get("organic").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("mechanical").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("robotic").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("detector").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("resourceContainer").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("resourceDepot").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("refinery").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("worker").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("requiresPsi").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("requiresCreep").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("burrowable").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("cloakable").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("building").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("addon").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("flyingBuilding").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("neutral").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("hero").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("powerup").set(UnitType.Powerup_Uraj_Crystal, true);
    fields.get("beacon").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("flagBeacon").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("specialBuilding").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("spell").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("producesCreep").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("producesLarva").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("mineralField").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("critter").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("canBuildAddon").set(UnitType.Powerup_Uraj_Crystal, false);
    fields.get("researchesWhat").set(UnitType.Powerup_Uraj_Crystal, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Powerup_Uraj_Crystal, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Powerup_Khalis_Crystal() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Powerup_Khalis_Crystal, 129);
    fields.get("race").set(UnitType.Powerup_Khalis_Crystal, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Powerup_Khalis_Crystal, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Powerup_Khalis_Crystal, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Powerup_Khalis_Crystal, toMap());
    fields.get("requiredTech").set(UnitType.Powerup_Khalis_Crystal, TechType.None);
    fields.get("cloakingTech").set(UnitType.Powerup_Khalis_Crystal, TechType.None);
    fields.get("abilities").set(UnitType.Powerup_Khalis_Crystal, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Powerup_Khalis_Crystal, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Powerup_Khalis_Crystal, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Powerup_Khalis_Crystal, 10000);
    fields.get("maxShields").set(UnitType.Powerup_Khalis_Crystal, 0);
    fields.get("maxEnergy").set(UnitType.Powerup_Khalis_Crystal, 0);
    fields.get("armor").set(UnitType.Powerup_Khalis_Crystal, 0);
    fields.get("mineralPrice").set(UnitType.Powerup_Khalis_Crystal, 1);
    fields.get("gasPrice").set(UnitType.Powerup_Khalis_Crystal, 1);
    fields.get("buildTime").set(UnitType.Powerup_Khalis_Crystal, 1);
    fields.get("supplyRequired").set(UnitType.Powerup_Khalis_Crystal, 0);
    fields.get("supplyProvided").set(UnitType.Powerup_Khalis_Crystal, 0);
    fields.get("spaceRequired").set(UnitType.Powerup_Khalis_Crystal, 255);
    fields.get("spaceProvided").set(UnitType.Powerup_Khalis_Crystal, 0);
    fields.get("buildScore").set(UnitType.Powerup_Khalis_Crystal, 0);
    fields.get("destroyScore").set(UnitType.Powerup_Khalis_Crystal, 0);
    fields.get("size").set(UnitType.Powerup_Khalis_Crystal, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Powerup_Khalis_Crystal, 1);
    fields.get("tileHeight").set(UnitType.Powerup_Khalis_Crystal, 1);
    fields.get("dimensionLeft").set(UnitType.Powerup_Khalis_Crystal, 16);
    fields.get("dimensionUp").set(UnitType.Powerup_Khalis_Crystal, 16);
    fields.get("dimensionRight").set(UnitType.Powerup_Khalis_Crystal, 15);
    fields.get("dimensionDown").set(UnitType.Powerup_Khalis_Crystal, 15);
    fields.get("width").set(UnitType.Powerup_Khalis_Crystal, 32);
    fields.get("height").set(UnitType.Powerup_Khalis_Crystal, 32);
    fields.get("seekRange").set(UnitType.Powerup_Khalis_Crystal, 0);
    fields.get("sightRange").set(UnitType.Powerup_Khalis_Crystal, 160);
    fields.get("groundWeapon").set(UnitType.Powerup_Khalis_Crystal, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Powerup_Khalis_Crystal, 0);
    fields.get("airWeapon").set(UnitType.Powerup_Khalis_Crystal, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Powerup_Khalis_Crystal, 0);
    fields.get("topSpeed").set(UnitType.Powerup_Khalis_Crystal, 0.0);
    fields.get("acceleration").set(UnitType.Powerup_Khalis_Crystal, 0);
    fields.get("haltDistance").set(UnitType.Powerup_Khalis_Crystal, 0);
    fields.get("turnRadius").set(UnitType.Powerup_Khalis_Crystal, 0);
    fields.get("canProduce").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("canAttack").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("canMove").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("flyer").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("regeneratesHP").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("spellcaster").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("hasPermanentCloak").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("invincible").set(UnitType.Powerup_Khalis_Crystal, true);
    fields.get("organic").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("mechanical").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("robotic").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("detector").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("resourceContainer").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("resourceDepot").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("refinery").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("worker").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("requiresPsi").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("requiresCreep").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("burrowable").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("cloakable").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("building").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("addon").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("flyingBuilding").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("neutral").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("hero").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("powerup").set(UnitType.Powerup_Khalis_Crystal, true);
    fields.get("beacon").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("flagBeacon").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("specialBuilding").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("spell").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("producesCreep").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("producesLarva").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("mineralField").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("critter").set(UnitType.Powerup_Khalis_Crystal, false);
    fields.get("canBuildAddon").set(UnitType.Powerup_Khalis_Crystal, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Powerup_Khalis_Crystal, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Powerup_Khalis_Crystal, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Infested_Command_Center() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Infested_Command_Center, 130);
    fields.get("race").set(UnitType.Zerg_Infested_Command_Center, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Infested_Command_Center, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Zerg_Infested_Command_Center,
            new ArrayList(Arrays.asList(UnitType.Zerg_Infested_Terran)));
    fields.get("requiredUnits").set(UnitType.Zerg_Infested_Command_Center, toMap());
    fields.get("requiredTech").set(UnitType.Zerg_Infested_Command_Center, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Infested_Command_Center, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Zerg_Infested_Command_Center, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Zerg_Infested_Command_Center, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Infested_Command_Center, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Infested_Command_Center, 1500);
    fields.get("maxShields").set(UnitType.Zerg_Infested_Command_Center, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Infested_Command_Center, 0);
    fields.get("armor").set(UnitType.Zerg_Infested_Command_Center, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Infested_Command_Center, 1);
    fields.get("gasPrice").set(UnitType.Zerg_Infested_Command_Center, 1);
    fields.get("buildTime").set(UnitType.Zerg_Infested_Command_Center, 1800);
    fields.get("supplyRequired").set(UnitType.Zerg_Infested_Command_Center, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Infested_Command_Center, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Infested_Command_Center, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Infested_Command_Center, 0);
    fields.get("buildScore").set(UnitType.Zerg_Infested_Command_Center, 300);
    fields.get("destroyScore").set(UnitType.Zerg_Infested_Command_Center, 900);
    fields.get("size").set(UnitType.Zerg_Infested_Command_Center, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Infested_Command_Center, 4);
    fields.get("tileHeight").set(UnitType.Zerg_Infested_Command_Center, 3);
    fields.get("dimensionLeft").set(UnitType.Zerg_Infested_Command_Center, 58);
    fields.get("dimensionUp").set(UnitType.Zerg_Infested_Command_Center, 41);
    fields.get("dimensionRight").set(UnitType.Zerg_Infested_Command_Center, 58);
    fields.get("dimensionDown").set(UnitType.Zerg_Infested_Command_Center, 41);
    fields.get("width").set(UnitType.Zerg_Infested_Command_Center, 117);
    fields.get("height").set(UnitType.Zerg_Infested_Command_Center, 83);
    fields.get("seekRange").set(UnitType.Zerg_Infested_Command_Center, 0);
    fields.get("sightRange").set(UnitType.Zerg_Infested_Command_Center, 320);
    fields.get("groundWeapon").set(UnitType.Zerg_Infested_Command_Center, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Infested_Command_Center, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Infested_Command_Center, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Infested_Command_Center, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Infested_Command_Center, 0.78125);
    fields.get("acceleration").set(UnitType.Zerg_Infested_Command_Center, 33);
    fields.get("haltDistance").set(UnitType.Zerg_Infested_Command_Center, 2763);
    fields.get("turnRadius").set(UnitType.Zerg_Infested_Command_Center, 27);
    fields.get("canProduce").set(UnitType.Zerg_Infested_Command_Center, true);
    fields.get("canAttack").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("canMove").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("flyer").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Infested_Command_Center, true);
    fields.get("spellcaster").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("invincible").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("organic").set(UnitType.Zerg_Infested_Command_Center, true);
    fields.get("mechanical").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("robotic").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("detector").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("refinery").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("worker").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("burrowable").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("cloakable").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("building").set(UnitType.Zerg_Infested_Command_Center, true);
    fields.get("addon").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Infested_Command_Center, true);
    fields.get("neutral").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("hero").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("powerup").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("beacon").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("spell").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("producesCreep").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("producesLarva").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("mineralField").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("critter").set(UnitType.Zerg_Infested_Command_Center, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Infested_Command_Center, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Zerg_Infested_Command_Center, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Zerg_Infested_Command_Center, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Hatchery() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Hatchery, 131);
    fields.get("race").set(UnitType.Zerg_Hatchery, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Hatchery, new UnitType.WhatBuilds(UnitType.Zerg_Drone, 1));
    fields
        .get("buildsWhat")
        .set(UnitType.Zerg_Hatchery, new ArrayList(Arrays.asList(UnitType.Zerg_Lair)));
    fields.get("requiredUnits").set(UnitType.Zerg_Hatchery, toMap(UnitType.Zerg_Drone, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Hatchery, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Hatchery, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Hatchery, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Hatchery, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Hatchery, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Hatchery, 1250);
    fields.get("maxShields").set(UnitType.Zerg_Hatchery, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Hatchery, 0);
    fields.get("armor").set(UnitType.Zerg_Hatchery, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Hatchery, 300);
    fields.get("gasPrice").set(UnitType.Zerg_Hatchery, 0);
    fields.get("buildTime").set(UnitType.Zerg_Hatchery, 1800);
    fields.get("supplyRequired").set(UnitType.Zerg_Hatchery, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Hatchery, 2);
    fields.get("spaceRequired").set(UnitType.Zerg_Hatchery, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Hatchery, 0);
    fields.get("buildScore").set(UnitType.Zerg_Hatchery, 300);
    fields.get("destroyScore").set(UnitType.Zerg_Hatchery, 900);
    fields.get("size").set(UnitType.Zerg_Hatchery, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Hatchery, 4);
    fields.get("tileHeight").set(UnitType.Zerg_Hatchery, 3);
    fields.get("dimensionLeft").set(UnitType.Zerg_Hatchery, 49);
    fields.get("dimensionUp").set(UnitType.Zerg_Hatchery, 32);
    fields.get("dimensionRight").set(UnitType.Zerg_Hatchery, 49);
    fields.get("dimensionDown").set(UnitType.Zerg_Hatchery, 32);
    fields.get("width").set(UnitType.Zerg_Hatchery, 99);
    fields.get("height").set(UnitType.Zerg_Hatchery, 65);
    fields.get("seekRange").set(UnitType.Zerg_Hatchery, 0);
    fields.get("sightRange").set(UnitType.Zerg_Hatchery, 288);
    fields.get("groundWeapon").set(UnitType.Zerg_Hatchery, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Hatchery, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Hatchery, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Hatchery, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Hatchery, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Hatchery, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Hatchery, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Hatchery, 0);
    fields.get("canProduce").set(UnitType.Zerg_Hatchery, true);
    fields.get("canAttack").set(UnitType.Zerg_Hatchery, false);
    fields.get("canMove").set(UnitType.Zerg_Hatchery, false);
    fields.get("flyer").set(UnitType.Zerg_Hatchery, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Hatchery, true);
    fields.get("spellcaster").set(UnitType.Zerg_Hatchery, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Hatchery, false);
    fields.get("invincible").set(UnitType.Zerg_Hatchery, false);
    fields.get("organic").set(UnitType.Zerg_Hatchery, true);
    fields.get("mechanical").set(UnitType.Zerg_Hatchery, false);
    fields.get("robotic").set(UnitType.Zerg_Hatchery, false);
    fields.get("detector").set(UnitType.Zerg_Hatchery, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Hatchery, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Hatchery, true);
    fields.get("refinery").set(UnitType.Zerg_Hatchery, false);
    fields.get("worker").set(UnitType.Zerg_Hatchery, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Hatchery, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Hatchery, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Hatchery, false);
    fields.get("burrowable").set(UnitType.Zerg_Hatchery, false);
    fields.get("cloakable").set(UnitType.Zerg_Hatchery, false);
    fields.get("building").set(UnitType.Zerg_Hatchery, true);
    fields.get("addon").set(UnitType.Zerg_Hatchery, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Hatchery, false);
    fields.get("neutral").set(UnitType.Zerg_Hatchery, false);
    fields.get("hero").set(UnitType.Zerg_Hatchery, false);
    fields.get("powerup").set(UnitType.Zerg_Hatchery, false);
    fields.get("beacon").set(UnitType.Zerg_Hatchery, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Hatchery, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Hatchery, false);
    fields.get("spell").set(UnitType.Zerg_Hatchery, false);
    fields.get("producesCreep").set(UnitType.Zerg_Hatchery, true);
    fields.get("producesLarva").set(UnitType.Zerg_Hatchery, true);
    fields.get("mineralField").set(UnitType.Zerg_Hatchery, false);
    fields.get("critter").set(UnitType.Zerg_Hatchery, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Hatchery, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Zerg_Hatchery, new ArrayList(Arrays.asList(TechType.Burrowing)));
    fields.get("upgradesWhat").set(UnitType.Zerg_Hatchery, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Lair() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Lair, 132);
    fields.get("race").set(UnitType.Zerg_Lair, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Lair, new UnitType.WhatBuilds(UnitType.Zerg_Hatchery, 1));
    fields
        .get("buildsWhat")
        .set(UnitType.Zerg_Lair, new ArrayList(Arrays.asList(UnitType.Zerg_Hive)));
    fields
        .get("requiredUnits")
        .set(UnitType.Zerg_Lair, toMap(UnitType.Zerg_Hatchery, 1, UnitType.Zerg_Spawning_Pool, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Lair, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Lair, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Lair, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Lair, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Lair, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Lair, 1800);
    fields.get("maxShields").set(UnitType.Zerg_Lair, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Lair, 0);
    fields.get("armor").set(UnitType.Zerg_Lair, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Lair, 150);
    fields.get("gasPrice").set(UnitType.Zerg_Lair, 100);
    fields.get("buildTime").set(UnitType.Zerg_Lair, 1500);
    fields.get("supplyRequired").set(UnitType.Zerg_Lair, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Lair, 2);
    fields.get("spaceRequired").set(UnitType.Zerg_Lair, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Lair, 0);
    fields.get("buildScore").set(UnitType.Zerg_Lair, 100);
    fields.get("destroyScore").set(UnitType.Zerg_Lair, 1200);
    fields.get("size").set(UnitType.Zerg_Lair, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Lair, 4);
    fields.get("tileHeight").set(UnitType.Zerg_Lair, 3);
    fields.get("dimensionLeft").set(UnitType.Zerg_Lair, 49);
    fields.get("dimensionUp").set(UnitType.Zerg_Lair, 32);
    fields.get("dimensionRight").set(UnitType.Zerg_Lair, 49);
    fields.get("dimensionDown").set(UnitType.Zerg_Lair, 32);
    fields.get("width").set(UnitType.Zerg_Lair, 99);
    fields.get("height").set(UnitType.Zerg_Lair, 65);
    fields.get("seekRange").set(UnitType.Zerg_Lair, 0);
    fields.get("sightRange").set(UnitType.Zerg_Lair, 320);
    fields.get("groundWeapon").set(UnitType.Zerg_Lair, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Lair, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Lair, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Lair, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Lair, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Lair, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Lair, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Lair, 0);
    fields.get("canProduce").set(UnitType.Zerg_Lair, true);
    fields.get("canAttack").set(UnitType.Zerg_Lair, false);
    fields.get("canMove").set(UnitType.Zerg_Lair, false);
    fields.get("flyer").set(UnitType.Zerg_Lair, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Lair, true);
    fields.get("spellcaster").set(UnitType.Zerg_Lair, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Lair, false);
    fields.get("invincible").set(UnitType.Zerg_Lair, false);
    fields.get("organic").set(UnitType.Zerg_Lair, true);
    fields.get("mechanical").set(UnitType.Zerg_Lair, false);
    fields.get("robotic").set(UnitType.Zerg_Lair, false);
    fields.get("detector").set(UnitType.Zerg_Lair, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Lair, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Lair, true);
    fields.get("refinery").set(UnitType.Zerg_Lair, false);
    fields.get("worker").set(UnitType.Zerg_Lair, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Lair, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Lair, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Lair, false);
    fields.get("burrowable").set(UnitType.Zerg_Lair, false);
    fields.get("cloakable").set(UnitType.Zerg_Lair, false);
    fields.get("building").set(UnitType.Zerg_Lair, true);
    fields.get("addon").set(UnitType.Zerg_Lair, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Lair, false);
    fields.get("neutral").set(UnitType.Zerg_Lair, false);
    fields.get("hero").set(UnitType.Zerg_Lair, false);
    fields.get("powerup").set(UnitType.Zerg_Lair, false);
    fields.get("beacon").set(UnitType.Zerg_Lair, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Lair, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Lair, false);
    fields.get("spell").set(UnitType.Zerg_Lair, false);
    fields.get("producesCreep").set(UnitType.Zerg_Lair, true);
    fields.get("producesLarva").set(UnitType.Zerg_Lair, true);
    fields.get("mineralField").set(UnitType.Zerg_Lair, false);
    fields.get("critter").set(UnitType.Zerg_Lair, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Lair, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Zerg_Lair, new ArrayList(Arrays.asList(TechType.Burrowing)));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Zerg_Lair,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Ventral_Sacs,
                    UpgradeType.Antennae,
                    UpgradeType.Pneumatized_Carapace)));
  }

  private static void initializeUnitType_Zerg_Hive() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Hive, 133);
    fields.get("race").set(UnitType.Zerg_Hive, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Hive, new UnitType.WhatBuilds(UnitType.Zerg_Lair, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Hive, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Zerg_Hive, toMap(UnitType.Zerg_Lair, 1, UnitType.Zerg_Queens_Nest, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Hive, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Hive, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Hive, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Hive, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Hive, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Hive, 2500);
    fields.get("maxShields").set(UnitType.Zerg_Hive, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Hive, 0);
    fields.get("armor").set(UnitType.Zerg_Hive, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Hive, 200);
    fields.get("gasPrice").set(UnitType.Zerg_Hive, 150);
    fields.get("buildTime").set(UnitType.Zerg_Hive, 1800);
    fields.get("supplyRequired").set(UnitType.Zerg_Hive, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Hive, 2);
    fields.get("spaceRequired").set(UnitType.Zerg_Hive, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Hive, 0);
    fields.get("buildScore").set(UnitType.Zerg_Hive, 100);
    fields.get("destroyScore").set(UnitType.Zerg_Hive, 1500);
    fields.get("size").set(UnitType.Zerg_Hive, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Hive, 4);
    fields.get("tileHeight").set(UnitType.Zerg_Hive, 3);
    fields.get("dimensionLeft").set(UnitType.Zerg_Hive, 49);
    fields.get("dimensionUp").set(UnitType.Zerg_Hive, 32);
    fields.get("dimensionRight").set(UnitType.Zerg_Hive, 49);
    fields.get("dimensionDown").set(UnitType.Zerg_Hive, 32);
    fields.get("width").set(UnitType.Zerg_Hive, 99);
    fields.get("height").set(UnitType.Zerg_Hive, 65);
    fields.get("seekRange").set(UnitType.Zerg_Hive, 0);
    fields.get("sightRange").set(UnitType.Zerg_Hive, 352);
    fields.get("groundWeapon").set(UnitType.Zerg_Hive, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Hive, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Hive, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Hive, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Hive, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Hive, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Hive, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Hive, 0);
    fields.get("canProduce").set(UnitType.Zerg_Hive, true);
    fields.get("canAttack").set(UnitType.Zerg_Hive, false);
    fields.get("canMove").set(UnitType.Zerg_Hive, false);
    fields.get("flyer").set(UnitType.Zerg_Hive, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Hive, true);
    fields.get("spellcaster").set(UnitType.Zerg_Hive, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Hive, false);
    fields.get("invincible").set(UnitType.Zerg_Hive, false);
    fields.get("organic").set(UnitType.Zerg_Hive, true);
    fields.get("mechanical").set(UnitType.Zerg_Hive, false);
    fields.get("robotic").set(UnitType.Zerg_Hive, false);
    fields.get("detector").set(UnitType.Zerg_Hive, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Hive, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Hive, true);
    fields.get("refinery").set(UnitType.Zerg_Hive, false);
    fields.get("worker").set(UnitType.Zerg_Hive, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Hive, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Hive, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Hive, false);
    fields.get("burrowable").set(UnitType.Zerg_Hive, false);
    fields.get("cloakable").set(UnitType.Zerg_Hive, false);
    fields.get("building").set(UnitType.Zerg_Hive, true);
    fields.get("addon").set(UnitType.Zerg_Hive, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Hive, false);
    fields.get("neutral").set(UnitType.Zerg_Hive, false);
    fields.get("hero").set(UnitType.Zerg_Hive, false);
    fields.get("powerup").set(UnitType.Zerg_Hive, false);
    fields.get("beacon").set(UnitType.Zerg_Hive, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Hive, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Hive, false);
    fields.get("spell").set(UnitType.Zerg_Hive, false);
    fields.get("producesCreep").set(UnitType.Zerg_Hive, true);
    fields.get("producesLarva").set(UnitType.Zerg_Hive, true);
    fields.get("mineralField").set(UnitType.Zerg_Hive, false);
    fields.get("critter").set(UnitType.Zerg_Hive, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Hive, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Zerg_Hive, new ArrayList(Arrays.asList(TechType.Burrowing)));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Zerg_Hive,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Ventral_Sacs,
                    UpgradeType.Antennae,
                    UpgradeType.Pneumatized_Carapace)));
  }

  private static void initializeUnitType_Zerg_Nydus_Canal() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Nydus_Canal, 134);
    fields.get("race").set(UnitType.Zerg_Nydus_Canal, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Nydus_Canal, new UnitType.WhatBuilds(UnitType.Zerg_Drone, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Nydus_Canal, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Zerg_Nydus_Canal, toMap(UnitType.Zerg_Drone, 1, UnitType.Zerg_Hive, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Nydus_Canal, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Nydus_Canal, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Nydus_Canal, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Nydus_Canal, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Nydus_Canal, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Nydus_Canal, 250);
    fields.get("maxShields").set(UnitType.Zerg_Nydus_Canal, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Nydus_Canal, 0);
    fields.get("armor").set(UnitType.Zerg_Nydus_Canal, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Nydus_Canal, 150);
    fields.get("gasPrice").set(UnitType.Zerg_Nydus_Canal, 0);
    fields.get("buildTime").set(UnitType.Zerg_Nydus_Canal, 600);
    fields.get("supplyRequired").set(UnitType.Zerg_Nydus_Canal, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Nydus_Canal, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Nydus_Canal, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Nydus_Canal, 0);
    fields.get("buildScore").set(UnitType.Zerg_Nydus_Canal, 75);
    fields.get("destroyScore").set(UnitType.Zerg_Nydus_Canal, 225);
    fields.get("size").set(UnitType.Zerg_Nydus_Canal, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Nydus_Canal, 2);
    fields.get("tileHeight").set(UnitType.Zerg_Nydus_Canal, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Nydus_Canal, 32);
    fields.get("dimensionUp").set(UnitType.Zerg_Nydus_Canal, 32);
    fields.get("dimensionRight").set(UnitType.Zerg_Nydus_Canal, 31);
    fields.get("dimensionDown").set(UnitType.Zerg_Nydus_Canal, 31);
    fields.get("width").set(UnitType.Zerg_Nydus_Canal, 64);
    fields.get("height").set(UnitType.Zerg_Nydus_Canal, 64);
    fields.get("seekRange").set(UnitType.Zerg_Nydus_Canal, 0);
    fields.get("sightRange").set(UnitType.Zerg_Nydus_Canal, 256);
    fields.get("groundWeapon").set(UnitType.Zerg_Nydus_Canal, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Nydus_Canal, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Nydus_Canal, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Nydus_Canal, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Nydus_Canal, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Nydus_Canal, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Nydus_Canal, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Nydus_Canal, 0);
    fields.get("canProduce").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("canAttack").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("canMove").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("flyer").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Nydus_Canal, true);
    fields.get("spellcaster").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("invincible").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("organic").set(UnitType.Zerg_Nydus_Canal, true);
    fields.get("mechanical").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("robotic").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("detector").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("refinery").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("worker").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Nydus_Canal, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("burrowable").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("cloakable").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("building").set(UnitType.Zerg_Nydus_Canal, true);
    fields.get("addon").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("neutral").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("hero").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("powerup").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("beacon").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("spell").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("producesCreep").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("producesLarva").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("mineralField").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("critter").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Nydus_Canal, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Nydus_Canal, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Nydus_Canal, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Hydralisk_Den() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Hydralisk_Den, 135);
    fields.get("race").set(UnitType.Zerg_Hydralisk_Den, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Hydralisk_Den, new UnitType.WhatBuilds(UnitType.Zerg_Drone, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Hydralisk_Den, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Zerg_Hydralisk_Den,
            toMap(UnitType.Zerg_Drone, 1, UnitType.Zerg_Spawning_Pool, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Hydralisk_Den, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Hydralisk_Den, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Hydralisk_Den, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Hydralisk_Den, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Hydralisk_Den, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Hydralisk_Den, 850);
    fields.get("maxShields").set(UnitType.Zerg_Hydralisk_Den, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Hydralisk_Den, 0);
    fields.get("armor").set(UnitType.Zerg_Hydralisk_Den, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Hydralisk_Den, 100);
    fields.get("gasPrice").set(UnitType.Zerg_Hydralisk_Den, 50);
    fields.get("buildTime").set(UnitType.Zerg_Hydralisk_Den, 600);
    fields.get("supplyRequired").set(UnitType.Zerg_Hydralisk_Den, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Hydralisk_Den, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Hydralisk_Den, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Hydralisk_Den, 0);
    fields.get("buildScore").set(UnitType.Zerg_Hydralisk_Den, 100);
    fields.get("destroyScore").set(UnitType.Zerg_Hydralisk_Den, 300);
    fields.get("size").set(UnitType.Zerg_Hydralisk_Den, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Hydralisk_Den, 3);
    fields.get("tileHeight").set(UnitType.Zerg_Hydralisk_Den, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Hydralisk_Den, 40);
    fields.get("dimensionUp").set(UnitType.Zerg_Hydralisk_Den, 32);
    fields.get("dimensionRight").set(UnitType.Zerg_Hydralisk_Den, 40);
    fields.get("dimensionDown").set(UnitType.Zerg_Hydralisk_Den, 24);
    fields.get("width").set(UnitType.Zerg_Hydralisk_Den, 81);
    fields.get("height").set(UnitType.Zerg_Hydralisk_Den, 57);
    fields.get("seekRange").set(UnitType.Zerg_Hydralisk_Den, 0);
    fields.get("sightRange").set(UnitType.Zerg_Hydralisk_Den, 256);
    fields.get("groundWeapon").set(UnitType.Zerg_Hydralisk_Den, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Hydralisk_Den, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Hydralisk_Den, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Hydralisk_Den, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Hydralisk_Den, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Hydralisk_Den, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Hydralisk_Den, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Hydralisk_Den, 0);
    fields.get("canProduce").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("canAttack").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("canMove").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("flyer").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Hydralisk_Den, true);
    fields.get("spellcaster").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("invincible").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("organic").set(UnitType.Zerg_Hydralisk_Den, true);
    fields.get("mechanical").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("robotic").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("detector").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("refinery").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("worker").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Hydralisk_Den, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("burrowable").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("cloakable").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("building").set(UnitType.Zerg_Hydralisk_Den, true);
    fields.get("addon").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("neutral").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("hero").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("powerup").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("beacon").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("spell").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("producesCreep").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("producesLarva").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("mineralField").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("critter").set(UnitType.Zerg_Hydralisk_Den, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Hydralisk_Den, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Zerg_Hydralisk_Den, new ArrayList(Arrays.asList(TechType.Lurker_Aspect)));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Zerg_Hydralisk_Den,
            new ArrayList(
                Arrays.asList(UpgradeType.Muscular_Augments, UpgradeType.Grooved_Spines)));
  }

  private static void initializeUnitType_Zerg_Defiler_Mound() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Defiler_Mound, 136);
    fields.get("race").set(UnitType.Zerg_Defiler_Mound, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Defiler_Mound, new UnitType.WhatBuilds(UnitType.Zerg_Drone, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Defiler_Mound, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Zerg_Defiler_Mound, toMap(UnitType.Zerg_Drone, 1, UnitType.Zerg_Hive, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Defiler_Mound, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Defiler_Mound, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Defiler_Mound, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Defiler_Mound, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Defiler_Mound, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Defiler_Mound, 850);
    fields.get("maxShields").set(UnitType.Zerg_Defiler_Mound, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Defiler_Mound, 0);
    fields.get("armor").set(UnitType.Zerg_Defiler_Mound, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Defiler_Mound, 100);
    fields.get("gasPrice").set(UnitType.Zerg_Defiler_Mound, 100);
    fields.get("buildTime").set(UnitType.Zerg_Defiler_Mound, 900);
    fields.get("supplyRequired").set(UnitType.Zerg_Defiler_Mound, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Defiler_Mound, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Defiler_Mound, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Defiler_Mound, 0);
    fields.get("buildScore").set(UnitType.Zerg_Defiler_Mound, 150);
    fields.get("destroyScore").set(UnitType.Zerg_Defiler_Mound, 450);
    fields.get("size").set(UnitType.Zerg_Defiler_Mound, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Defiler_Mound, 4);
    fields.get("tileHeight").set(UnitType.Zerg_Defiler_Mound, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Defiler_Mound, 48);
    fields.get("dimensionUp").set(UnitType.Zerg_Defiler_Mound, 32);
    fields.get("dimensionRight").set(UnitType.Zerg_Defiler_Mound, 48);
    fields.get("dimensionDown").set(UnitType.Zerg_Defiler_Mound, 4);
    fields.get("width").set(UnitType.Zerg_Defiler_Mound, 97);
    fields.get("height").set(UnitType.Zerg_Defiler_Mound, 37);
    fields.get("seekRange").set(UnitType.Zerg_Defiler_Mound, 0);
    fields.get("sightRange").set(UnitType.Zerg_Defiler_Mound, 256);
    fields.get("groundWeapon").set(UnitType.Zerg_Defiler_Mound, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Defiler_Mound, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Defiler_Mound, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Defiler_Mound, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Defiler_Mound, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Defiler_Mound, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Defiler_Mound, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Defiler_Mound, 0);
    fields.get("canProduce").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("canAttack").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("canMove").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("flyer").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Defiler_Mound, true);
    fields.get("spellcaster").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("invincible").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("organic").set(UnitType.Zerg_Defiler_Mound, true);
    fields.get("mechanical").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("robotic").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("detector").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("refinery").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("worker").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Defiler_Mound, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("burrowable").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("cloakable").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("building").set(UnitType.Zerg_Defiler_Mound, true);
    fields.get("addon").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("neutral").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("hero").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("powerup").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("beacon").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("spell").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("producesCreep").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("producesLarva").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("mineralField").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("critter").set(UnitType.Zerg_Defiler_Mound, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Defiler_Mound, false);
    fields
        .get("researchesWhat")
        .set(
            UnitType.Zerg_Defiler_Mound,
            new ArrayList(Arrays.asList(TechType.Consume, TechType.Plague)));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Zerg_Defiler_Mound,
            new ArrayList(Arrays.asList(UpgradeType.Metasynaptic_Node)));
  }

  private static void initializeUnitType_Zerg_Greater_Spire() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Greater_Spire, 137);
    fields.get("race").set(UnitType.Zerg_Greater_Spire, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Greater_Spire, new UnitType.WhatBuilds(UnitType.Zerg_Spire, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Greater_Spire, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Zerg_Greater_Spire, toMap(UnitType.Zerg_Spire, 1, UnitType.Zerg_Hive, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Greater_Spire, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Greater_Spire, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Greater_Spire, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Greater_Spire, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Greater_Spire, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Greater_Spire, 1000);
    fields.get("maxShields").set(UnitType.Zerg_Greater_Spire, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Greater_Spire, 0);
    fields.get("armor").set(UnitType.Zerg_Greater_Spire, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Greater_Spire, 100);
    fields.get("gasPrice").set(UnitType.Zerg_Greater_Spire, 150);
    fields.get("buildTime").set(UnitType.Zerg_Greater_Spire, 1800);
    fields.get("supplyRequired").set(UnitType.Zerg_Greater_Spire, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Greater_Spire, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Greater_Spire, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Greater_Spire, 0);
    fields.get("buildScore").set(UnitType.Zerg_Greater_Spire, 200);
    fields.get("destroyScore").set(UnitType.Zerg_Greater_Spire, 1350);
    fields.get("size").set(UnitType.Zerg_Greater_Spire, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Greater_Spire, 2);
    fields.get("tileHeight").set(UnitType.Zerg_Greater_Spire, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Greater_Spire, 28);
    fields.get("dimensionUp").set(UnitType.Zerg_Greater_Spire, 32);
    fields.get("dimensionRight").set(UnitType.Zerg_Greater_Spire, 28);
    fields.get("dimensionDown").set(UnitType.Zerg_Greater_Spire, 24);
    fields.get("width").set(UnitType.Zerg_Greater_Spire, 57);
    fields.get("height").set(UnitType.Zerg_Greater_Spire, 57);
    fields.get("seekRange").set(UnitType.Zerg_Greater_Spire, 0);
    fields.get("sightRange").set(UnitType.Zerg_Greater_Spire, 256);
    fields.get("groundWeapon").set(UnitType.Zerg_Greater_Spire, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Greater_Spire, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Greater_Spire, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Greater_Spire, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Greater_Spire, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Greater_Spire, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Greater_Spire, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Greater_Spire, 0);
    fields.get("canProduce").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("canAttack").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("canMove").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("flyer").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Greater_Spire, true);
    fields.get("spellcaster").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("invincible").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("organic").set(UnitType.Zerg_Greater_Spire, true);
    fields.get("mechanical").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("robotic").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("detector").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("refinery").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("worker").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Greater_Spire, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("burrowable").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("cloakable").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("building").set(UnitType.Zerg_Greater_Spire, true);
    fields.get("addon").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("neutral").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("hero").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("powerup").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("beacon").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("spell").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("producesCreep").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("producesLarva").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("mineralField").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("critter").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Greater_Spire, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Greater_Spire, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Zerg_Greater_Spire,
            new ArrayList(
                Arrays.asList(UpgradeType.Zerg_Flyer_Carapace, UpgradeType.Zerg_Flyer_Attacks)));
  }

  private static void initializeUnitType_Zerg_Queens_Nest() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Queens_Nest, 138);
    fields.get("race").set(UnitType.Zerg_Queens_Nest, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Queens_Nest, new UnitType.WhatBuilds(UnitType.Zerg_Drone, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Queens_Nest, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Zerg_Queens_Nest, toMap(UnitType.Zerg_Lair, 1, UnitType.Zerg_Drone, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Queens_Nest, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Queens_Nest, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Queens_Nest, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Queens_Nest, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Queens_Nest, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Queens_Nest, 850);
    fields.get("maxShields").set(UnitType.Zerg_Queens_Nest, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Queens_Nest, 0);
    fields.get("armor").set(UnitType.Zerg_Queens_Nest, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Queens_Nest, 150);
    fields.get("gasPrice").set(UnitType.Zerg_Queens_Nest, 100);
    fields.get("buildTime").set(UnitType.Zerg_Queens_Nest, 900);
    fields.get("supplyRequired").set(UnitType.Zerg_Queens_Nest, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Queens_Nest, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Queens_Nest, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Queens_Nest, 0);
    fields.get("buildScore").set(UnitType.Zerg_Queens_Nest, 175);
    fields.get("destroyScore").set(UnitType.Zerg_Queens_Nest, 525);
    fields.get("size").set(UnitType.Zerg_Queens_Nest, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Queens_Nest, 3);
    fields.get("tileHeight").set(UnitType.Zerg_Queens_Nest, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Queens_Nest, 38);
    fields.get("dimensionUp").set(UnitType.Zerg_Queens_Nest, 28);
    fields.get("dimensionRight").set(UnitType.Zerg_Queens_Nest, 32);
    fields.get("dimensionDown").set(UnitType.Zerg_Queens_Nest, 28);
    fields.get("width").set(UnitType.Zerg_Queens_Nest, 71);
    fields.get("height").set(UnitType.Zerg_Queens_Nest, 57);
    fields.get("seekRange").set(UnitType.Zerg_Queens_Nest, 0);
    fields.get("sightRange").set(UnitType.Zerg_Queens_Nest, 256);
    fields.get("groundWeapon").set(UnitType.Zerg_Queens_Nest, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Queens_Nest, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Queens_Nest, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Queens_Nest, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Queens_Nest, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Queens_Nest, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Queens_Nest, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Queens_Nest, 0);
    fields.get("canProduce").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("canAttack").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("canMove").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("flyer").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Queens_Nest, true);
    fields.get("spellcaster").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("invincible").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("organic").set(UnitType.Zerg_Queens_Nest, true);
    fields.get("mechanical").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("robotic").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("detector").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("refinery").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("worker").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Queens_Nest, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("burrowable").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("cloakable").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("building").set(UnitType.Zerg_Queens_Nest, true);
    fields.get("addon").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("neutral").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("hero").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("powerup").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("beacon").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("spell").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("producesCreep").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("producesLarva").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("mineralField").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("critter").set(UnitType.Zerg_Queens_Nest, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Queens_Nest, false);
    fields
        .get("researchesWhat")
        .set(
            UnitType.Zerg_Queens_Nest,
            new ArrayList(Arrays.asList(TechType.Ensnare, TechType.Spawn_Broodlings)));
    fields
        .get("upgradesWhat")
        .set(UnitType.Zerg_Queens_Nest, new ArrayList(Arrays.asList(UpgradeType.Gamete_Meiosis)));
  }

  private static void initializeUnitType_Zerg_Evolution_Chamber() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Evolution_Chamber, 139);
    fields.get("race").set(UnitType.Zerg_Evolution_Chamber, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Evolution_Chamber, new UnitType.WhatBuilds(UnitType.Zerg_Drone, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Evolution_Chamber, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Zerg_Evolution_Chamber,
            toMap(UnitType.Zerg_Hatchery, 1, UnitType.Zerg_Drone, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Evolution_Chamber, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Evolution_Chamber, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Evolution_Chamber, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Evolution_Chamber, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Evolution_Chamber, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Evolution_Chamber, 750);
    fields.get("maxShields").set(UnitType.Zerg_Evolution_Chamber, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Evolution_Chamber, 0);
    fields.get("armor").set(UnitType.Zerg_Evolution_Chamber, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Evolution_Chamber, 75);
    fields.get("gasPrice").set(UnitType.Zerg_Evolution_Chamber, 0);
    fields.get("buildTime").set(UnitType.Zerg_Evolution_Chamber, 600);
    fields.get("supplyRequired").set(UnitType.Zerg_Evolution_Chamber, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Evolution_Chamber, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Evolution_Chamber, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Evolution_Chamber, 0);
    fields.get("buildScore").set(UnitType.Zerg_Evolution_Chamber, 40);
    fields.get("destroyScore").set(UnitType.Zerg_Evolution_Chamber, 120);
    fields.get("size").set(UnitType.Zerg_Evolution_Chamber, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Evolution_Chamber, 3);
    fields.get("tileHeight").set(UnitType.Zerg_Evolution_Chamber, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Evolution_Chamber, 44);
    fields.get("dimensionUp").set(UnitType.Zerg_Evolution_Chamber, 32);
    fields.get("dimensionRight").set(UnitType.Zerg_Evolution_Chamber, 32);
    fields.get("dimensionDown").set(UnitType.Zerg_Evolution_Chamber, 20);
    fields.get("width").set(UnitType.Zerg_Evolution_Chamber, 77);
    fields.get("height").set(UnitType.Zerg_Evolution_Chamber, 53);
    fields.get("seekRange").set(UnitType.Zerg_Evolution_Chamber, 0);
    fields.get("sightRange").set(UnitType.Zerg_Evolution_Chamber, 256);
    fields.get("groundWeapon").set(UnitType.Zerg_Evolution_Chamber, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Evolution_Chamber, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Evolution_Chamber, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Evolution_Chamber, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Evolution_Chamber, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Evolution_Chamber, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Evolution_Chamber, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Evolution_Chamber, 0);
    fields.get("canProduce").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("canAttack").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("canMove").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("flyer").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Evolution_Chamber, true);
    fields.get("spellcaster").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("invincible").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("organic").set(UnitType.Zerg_Evolution_Chamber, true);
    fields.get("mechanical").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("robotic").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("detector").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("refinery").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("worker").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Evolution_Chamber, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("burrowable").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("cloakable").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("building").set(UnitType.Zerg_Evolution_Chamber, true);
    fields.get("addon").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("neutral").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("hero").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("powerup").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("beacon").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("spell").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("producesCreep").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("producesLarva").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("mineralField").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("critter").set(UnitType.Zerg_Evolution_Chamber, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Evolution_Chamber, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Zerg_Evolution_Chamber, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Zerg_Evolution_Chamber,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Zerg_Melee_Attacks,
                    UpgradeType.Zerg_Carapace,
                    UpgradeType.Zerg_Missile_Attacks)));
  }

  private static void initializeUnitType_Zerg_Ultralisk_Cavern() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Ultralisk_Cavern, 140);
    fields.get("race").set(UnitType.Zerg_Ultralisk_Cavern, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Ultralisk_Cavern, new UnitType.WhatBuilds(UnitType.Zerg_Drone, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Ultralisk_Cavern, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Zerg_Ultralisk_Cavern, toMap(UnitType.Zerg_Drone, 1, UnitType.Zerg_Hive, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Ultralisk_Cavern, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Ultralisk_Cavern, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Ultralisk_Cavern, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Ultralisk_Cavern, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Ultralisk_Cavern, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Ultralisk_Cavern, 600);
    fields.get("maxShields").set(UnitType.Zerg_Ultralisk_Cavern, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Ultralisk_Cavern, 0);
    fields.get("armor").set(UnitType.Zerg_Ultralisk_Cavern, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Ultralisk_Cavern, 150);
    fields.get("gasPrice").set(UnitType.Zerg_Ultralisk_Cavern, 200);
    fields.get("buildTime").set(UnitType.Zerg_Ultralisk_Cavern, 1200);
    fields.get("supplyRequired").set(UnitType.Zerg_Ultralisk_Cavern, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Ultralisk_Cavern, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Ultralisk_Cavern, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Ultralisk_Cavern, 0);
    fields.get("buildScore").set(UnitType.Zerg_Ultralisk_Cavern, 275);
    fields.get("destroyScore").set(UnitType.Zerg_Ultralisk_Cavern, 825);
    fields.get("size").set(UnitType.Zerg_Ultralisk_Cavern, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Ultralisk_Cavern, 3);
    fields.get("tileHeight").set(UnitType.Zerg_Ultralisk_Cavern, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Ultralisk_Cavern, 40);
    fields.get("dimensionUp").set(UnitType.Zerg_Ultralisk_Cavern, 32);
    fields.get("dimensionRight").set(UnitType.Zerg_Ultralisk_Cavern, 32);
    fields.get("dimensionDown").set(UnitType.Zerg_Ultralisk_Cavern, 31);
    fields.get("width").set(UnitType.Zerg_Ultralisk_Cavern, 73);
    fields.get("height").set(UnitType.Zerg_Ultralisk_Cavern, 64);
    fields.get("seekRange").set(UnitType.Zerg_Ultralisk_Cavern, 0);
    fields.get("sightRange").set(UnitType.Zerg_Ultralisk_Cavern, 256);
    fields.get("groundWeapon").set(UnitType.Zerg_Ultralisk_Cavern, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Ultralisk_Cavern, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Ultralisk_Cavern, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Ultralisk_Cavern, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Ultralisk_Cavern, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Ultralisk_Cavern, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Ultralisk_Cavern, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Ultralisk_Cavern, 0);
    fields.get("canProduce").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("canAttack").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("canMove").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("flyer").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Ultralisk_Cavern, true);
    fields.get("spellcaster").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("invincible").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("organic").set(UnitType.Zerg_Ultralisk_Cavern, true);
    fields.get("mechanical").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("robotic").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("detector").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("refinery").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("worker").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Ultralisk_Cavern, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("burrowable").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("cloakable").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("building").set(UnitType.Zerg_Ultralisk_Cavern, true);
    fields.get("addon").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("neutral").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("hero").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("powerup").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("beacon").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("spell").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("producesCreep").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("producesLarva").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("mineralField").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("critter").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Ultralisk_Cavern, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Zerg_Ultralisk_Cavern, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Zerg_Ultralisk_Cavern,
            new ArrayList(
                Arrays.asList(UpgradeType.Anabolic_Synthesis, UpgradeType.Chitinous_Plating)));
  }

  private static void initializeUnitType_Zerg_Spire() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Spire, 141);
    fields.get("race").set(UnitType.Zerg_Spire, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Spire, new UnitType.WhatBuilds(UnitType.Zerg_Drone, 1));
    fields
        .get("buildsWhat")
        .set(UnitType.Zerg_Spire, new ArrayList(Arrays.asList(UnitType.Zerg_Greater_Spire)));
    fields
        .get("requiredUnits")
        .set(UnitType.Zerg_Spire, toMap(UnitType.Zerg_Lair, 1, UnitType.Zerg_Drone, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Spire, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Spire, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Spire, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Spire, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Spire, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Spire, 600);
    fields.get("maxShields").set(UnitType.Zerg_Spire, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Spire, 0);
    fields.get("armor").set(UnitType.Zerg_Spire, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Spire, 200);
    fields.get("gasPrice").set(UnitType.Zerg_Spire, 150);
    fields.get("buildTime").set(UnitType.Zerg_Spire, 1800);
    fields.get("supplyRequired").set(UnitType.Zerg_Spire, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Spire, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Spire, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Spire, 0);
    fields.get("buildScore").set(UnitType.Zerg_Spire, 250);
    fields.get("destroyScore").set(UnitType.Zerg_Spire, 750);
    fields.get("size").set(UnitType.Zerg_Spire, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Spire, 2);
    fields.get("tileHeight").set(UnitType.Zerg_Spire, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Spire, 28);
    fields.get("dimensionUp").set(UnitType.Zerg_Spire, 32);
    fields.get("dimensionRight").set(UnitType.Zerg_Spire, 28);
    fields.get("dimensionDown").set(UnitType.Zerg_Spire, 24);
    fields.get("width").set(UnitType.Zerg_Spire, 57);
    fields.get("height").set(UnitType.Zerg_Spire, 57);
    fields.get("seekRange").set(UnitType.Zerg_Spire, 0);
    fields.get("sightRange").set(UnitType.Zerg_Spire, 256);
    fields.get("groundWeapon").set(UnitType.Zerg_Spire, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Spire, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Spire, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Spire, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Spire, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Spire, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Spire, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Spire, 0);
    fields.get("canProduce").set(UnitType.Zerg_Spire, false);
    fields.get("canAttack").set(UnitType.Zerg_Spire, false);
    fields.get("canMove").set(UnitType.Zerg_Spire, false);
    fields.get("flyer").set(UnitType.Zerg_Spire, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Spire, true);
    fields.get("spellcaster").set(UnitType.Zerg_Spire, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Spire, false);
    fields.get("invincible").set(UnitType.Zerg_Spire, false);
    fields.get("organic").set(UnitType.Zerg_Spire, true);
    fields.get("mechanical").set(UnitType.Zerg_Spire, false);
    fields.get("robotic").set(UnitType.Zerg_Spire, false);
    fields.get("detector").set(UnitType.Zerg_Spire, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Spire, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Spire, false);
    fields.get("refinery").set(UnitType.Zerg_Spire, false);
    fields.get("worker").set(UnitType.Zerg_Spire, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Spire, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Spire, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Spire, false);
    fields.get("burrowable").set(UnitType.Zerg_Spire, false);
    fields.get("cloakable").set(UnitType.Zerg_Spire, false);
    fields.get("building").set(UnitType.Zerg_Spire, true);
    fields.get("addon").set(UnitType.Zerg_Spire, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Spire, false);
    fields.get("neutral").set(UnitType.Zerg_Spire, false);
    fields.get("hero").set(UnitType.Zerg_Spire, false);
    fields.get("powerup").set(UnitType.Zerg_Spire, false);
    fields.get("beacon").set(UnitType.Zerg_Spire, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Spire, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Spire, false);
    fields.get("spell").set(UnitType.Zerg_Spire, false);
    fields.get("producesCreep").set(UnitType.Zerg_Spire, false);
    fields.get("producesLarva").set(UnitType.Zerg_Spire, false);
    fields.get("mineralField").set(UnitType.Zerg_Spire, false);
    fields.get("critter").set(UnitType.Zerg_Spire, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Spire, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Spire, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Zerg_Spire,
            new ArrayList(
                Arrays.asList(UpgradeType.Zerg_Flyer_Carapace, UpgradeType.Zerg_Flyer_Attacks)));
  }

  private static void initializeUnitType_Zerg_Spawning_Pool() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Spawning_Pool, 142);
    fields.get("race").set(UnitType.Zerg_Spawning_Pool, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Spawning_Pool, new UnitType.WhatBuilds(UnitType.Zerg_Drone, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Spawning_Pool, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Zerg_Spawning_Pool, toMap(UnitType.Zerg_Hatchery, 1, UnitType.Zerg_Drone, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Spawning_Pool, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Spawning_Pool, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Spawning_Pool, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Spawning_Pool, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Spawning_Pool, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Spawning_Pool, 750);
    fields.get("maxShields").set(UnitType.Zerg_Spawning_Pool, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Spawning_Pool, 0);
    fields.get("armor").set(UnitType.Zerg_Spawning_Pool, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Spawning_Pool, 200);
    fields.get("gasPrice").set(UnitType.Zerg_Spawning_Pool, 0);
    fields.get("buildTime").set(UnitType.Zerg_Spawning_Pool, 1200);
    fields.get("supplyRequired").set(UnitType.Zerg_Spawning_Pool, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Spawning_Pool, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Spawning_Pool, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Spawning_Pool, 0);
    fields.get("buildScore").set(UnitType.Zerg_Spawning_Pool, 75);
    fields.get("destroyScore").set(UnitType.Zerg_Spawning_Pool, 225);
    fields.get("size").set(UnitType.Zerg_Spawning_Pool, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Spawning_Pool, 3);
    fields.get("tileHeight").set(UnitType.Zerg_Spawning_Pool, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Spawning_Pool, 36);
    fields.get("dimensionUp").set(UnitType.Zerg_Spawning_Pool, 28);
    fields.get("dimensionRight").set(UnitType.Zerg_Spawning_Pool, 40);
    fields.get("dimensionDown").set(UnitType.Zerg_Spawning_Pool, 18);
    fields.get("width").set(UnitType.Zerg_Spawning_Pool, 77);
    fields.get("height").set(UnitType.Zerg_Spawning_Pool, 47);
    fields.get("seekRange").set(UnitType.Zerg_Spawning_Pool, 0);
    fields.get("sightRange").set(UnitType.Zerg_Spawning_Pool, 256);
    fields.get("groundWeapon").set(UnitType.Zerg_Spawning_Pool, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Spawning_Pool, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Spawning_Pool, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Spawning_Pool, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Spawning_Pool, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Spawning_Pool, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Spawning_Pool, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Spawning_Pool, 0);
    fields.get("canProduce").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("canAttack").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("canMove").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("flyer").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Spawning_Pool, true);
    fields.get("spellcaster").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("invincible").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("organic").set(UnitType.Zerg_Spawning_Pool, true);
    fields.get("mechanical").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("robotic").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("detector").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("refinery").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("worker").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Spawning_Pool, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("burrowable").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("cloakable").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("building").set(UnitType.Zerg_Spawning_Pool, true);
    fields.get("addon").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("neutral").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("hero").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("powerup").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("beacon").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("spell").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("producesCreep").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("producesLarva").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("mineralField").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("critter").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Spawning_Pool, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Spawning_Pool, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Zerg_Spawning_Pool,
            new ArrayList(Arrays.asList(UpgradeType.Metabolic_Boost, UpgradeType.Adrenal_Glands)));
  }

  private static void initializeUnitType_Zerg_Creep_Colony() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Creep_Colony, 143);
    fields.get("race").set(UnitType.Zerg_Creep_Colony, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Creep_Colony, new UnitType.WhatBuilds(UnitType.Zerg_Drone, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Zerg_Creep_Colony,
            new ArrayList(Arrays.asList(UnitType.Zerg_Sunken_Colony, UnitType.Zerg_Spore_Colony)));
    fields.get("requiredUnits").set(UnitType.Zerg_Creep_Colony, toMap(UnitType.Zerg_Drone, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Creep_Colony, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Creep_Colony, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Creep_Colony, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Creep_Colony, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Creep_Colony, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Creep_Colony, 400);
    fields.get("maxShields").set(UnitType.Zerg_Creep_Colony, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Creep_Colony, 0);
    fields.get("armor").set(UnitType.Zerg_Creep_Colony, 0);
    fields.get("mineralPrice").set(UnitType.Zerg_Creep_Colony, 75);
    fields.get("gasPrice").set(UnitType.Zerg_Creep_Colony, 0);
    fields.get("buildTime").set(UnitType.Zerg_Creep_Colony, 300);
    fields.get("supplyRequired").set(UnitType.Zerg_Creep_Colony, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Creep_Colony, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Creep_Colony, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Creep_Colony, 0);
    fields.get("buildScore").set(UnitType.Zerg_Creep_Colony, 40);
    fields.get("destroyScore").set(UnitType.Zerg_Creep_Colony, 120);
    fields.get("size").set(UnitType.Zerg_Creep_Colony, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Creep_Colony, 2);
    fields.get("tileHeight").set(UnitType.Zerg_Creep_Colony, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Creep_Colony, 24);
    fields.get("dimensionUp").set(UnitType.Zerg_Creep_Colony, 24);
    fields.get("dimensionRight").set(UnitType.Zerg_Creep_Colony, 23);
    fields.get("dimensionDown").set(UnitType.Zerg_Creep_Colony, 23);
    fields.get("width").set(UnitType.Zerg_Creep_Colony, 48);
    fields.get("height").set(UnitType.Zerg_Creep_Colony, 48);
    fields.get("seekRange").set(UnitType.Zerg_Creep_Colony, 0);
    fields.get("sightRange").set(UnitType.Zerg_Creep_Colony, 320);
    fields.get("groundWeapon").set(UnitType.Zerg_Creep_Colony, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Creep_Colony, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Creep_Colony, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Creep_Colony, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Creep_Colony, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Creep_Colony, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Creep_Colony, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Creep_Colony, 0);
    fields.get("canProduce").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("canAttack").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("canMove").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("flyer").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Creep_Colony, true);
    fields.get("spellcaster").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("invincible").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("organic").set(UnitType.Zerg_Creep_Colony, true);
    fields.get("mechanical").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("robotic").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("detector").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("refinery").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("worker").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Creep_Colony, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("burrowable").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("cloakable").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("building").set(UnitType.Zerg_Creep_Colony, true);
    fields.get("addon").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("neutral").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("hero").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("powerup").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("beacon").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("spell").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("producesCreep").set(UnitType.Zerg_Creep_Colony, true);
    fields.get("producesLarva").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("mineralField").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("critter").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Creep_Colony, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Creep_Colony, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Creep_Colony, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Spore_Colony() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Spore_Colony, 144);
    fields.get("race").set(UnitType.Zerg_Spore_Colony, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Spore_Colony, new UnitType.WhatBuilds(UnitType.Zerg_Creep_Colony, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Spore_Colony, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Zerg_Spore_Colony,
            toMap(UnitType.Zerg_Creep_Colony, 1, UnitType.Zerg_Evolution_Chamber, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Spore_Colony, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Spore_Colony, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Spore_Colony, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Spore_Colony, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Spore_Colony, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Spore_Colony, 400);
    fields.get("maxShields").set(UnitType.Zerg_Spore_Colony, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Spore_Colony, 0);
    fields.get("armor").set(UnitType.Zerg_Spore_Colony, 0);
    fields.get("mineralPrice").set(UnitType.Zerg_Spore_Colony, 50);
    fields.get("gasPrice").set(UnitType.Zerg_Spore_Colony, 0);
    fields.get("buildTime").set(UnitType.Zerg_Spore_Colony, 300);
    fields.get("supplyRequired").set(UnitType.Zerg_Spore_Colony, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Spore_Colony, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Spore_Colony, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Spore_Colony, 0);
    fields.get("buildScore").set(UnitType.Zerg_Spore_Colony, 25);
    fields.get("destroyScore").set(UnitType.Zerg_Spore_Colony, 195);
    fields.get("size").set(UnitType.Zerg_Spore_Colony, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Spore_Colony, 2);
    fields.get("tileHeight").set(UnitType.Zerg_Spore_Colony, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Spore_Colony, 24);
    fields.get("dimensionUp").set(UnitType.Zerg_Spore_Colony, 24);
    fields.get("dimensionRight").set(UnitType.Zerg_Spore_Colony, 23);
    fields.get("dimensionDown").set(UnitType.Zerg_Spore_Colony, 23);
    fields.get("width").set(UnitType.Zerg_Spore_Colony, 48);
    fields.get("height").set(UnitType.Zerg_Spore_Colony, 48);
    fields.get("seekRange").set(UnitType.Zerg_Spore_Colony, 0);
    fields.get("sightRange").set(UnitType.Zerg_Spore_Colony, 320);
    fields.get("groundWeapon").set(UnitType.Zerg_Spore_Colony, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Spore_Colony, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Spore_Colony, WeaponType.Seeker_Spores);
    fields.get("maxAirHits").set(UnitType.Zerg_Spore_Colony, 1);
    fields.get("topSpeed").set(UnitType.Zerg_Spore_Colony, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Spore_Colony, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Spore_Colony, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Spore_Colony, 0);
    fields.get("canProduce").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("canAttack").set(UnitType.Zerg_Spore_Colony, true);
    fields.get("canMove").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("flyer").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Spore_Colony, true);
    fields.get("spellcaster").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("invincible").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("organic").set(UnitType.Zerg_Spore_Colony, true);
    fields.get("mechanical").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("robotic").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("detector").set(UnitType.Zerg_Spore_Colony, true);
    fields.get("resourceContainer").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("refinery").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("worker").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Spore_Colony, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("burrowable").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("cloakable").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("building").set(UnitType.Zerg_Spore_Colony, true);
    fields.get("addon").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("neutral").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("hero").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("powerup").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("beacon").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("spell").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("producesCreep").set(UnitType.Zerg_Spore_Colony, true);
    fields.get("producesLarva").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("mineralField").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("critter").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Spore_Colony, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Spore_Colony, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Spore_Colony, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unused_Zerg1() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Zerg1, 145);
    fields.get("race").set(UnitType.Unused_Zerg1, null);
    fields.get("whatBuilds").set(UnitType.Unused_Zerg1, null);
    fields.get("buildsWhat").set(UnitType.Unused_Zerg1, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Zerg1, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Zerg1, null);
    fields.get("cloakingTech").set(UnitType.Unused_Zerg1, null);
    fields.get("abilities").set(UnitType.Unused_Zerg1, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Unused_Zerg1, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Zerg1, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Zerg1, 0);
    fields.get("maxShields").set(UnitType.Unused_Zerg1, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Zerg1, 0);
    fields.get("armor").set(UnitType.Unused_Zerg1, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Zerg1, 0);
    fields.get("gasPrice").set(UnitType.Unused_Zerg1, 0);
    fields.get("buildTime").set(UnitType.Unused_Zerg1, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Zerg1, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Zerg1, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Zerg1, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Zerg1, 0);
    fields.get("buildScore").set(UnitType.Unused_Zerg1, 0);
    fields.get("destroyScore").set(UnitType.Unused_Zerg1, 0);
    fields.get("size").set(UnitType.Unused_Zerg1, null);
    fields.get("tileWidth").set(UnitType.Unused_Zerg1, 0);
    fields.get("tileHeight").set(UnitType.Unused_Zerg1, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Zerg1, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Zerg1, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Zerg1, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Zerg1, 0);
    fields.get("width").set(UnitType.Unused_Zerg1, 0);
    fields.get("height").set(UnitType.Unused_Zerg1, 0);
    fields.get("seekRange").set(UnitType.Unused_Zerg1, 0);
    fields.get("sightRange").set(UnitType.Unused_Zerg1, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Zerg1, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Zerg1, 0);
    fields.get("airWeapon").set(UnitType.Unused_Zerg1, null);
    fields.get("maxAirHits").set(UnitType.Unused_Zerg1, 0);
    fields.get("topSpeed").set(UnitType.Unused_Zerg1, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Zerg1, 0);
    fields.get("haltDistance").set(UnitType.Unused_Zerg1, 0);
    fields.get("turnRadius").set(UnitType.Unused_Zerg1, 0);
    fields.get("canProduce").set(UnitType.Unused_Zerg1, false);
    fields.get("canAttack").set(UnitType.Unused_Zerg1, false);
    fields.get("canMove").set(UnitType.Unused_Zerg1, false);
    fields.get("flyer").set(UnitType.Unused_Zerg1, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Zerg1, false);
    fields.get("spellcaster").set(UnitType.Unused_Zerg1, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Zerg1, false);
    fields.get("invincible").set(UnitType.Unused_Zerg1, false);
    fields.get("organic").set(UnitType.Unused_Zerg1, false);
    fields.get("mechanical").set(UnitType.Unused_Zerg1, false);
    fields.get("robotic").set(UnitType.Unused_Zerg1, false);
    fields.get("detector").set(UnitType.Unused_Zerg1, false);
    fields.get("resourceContainer").set(UnitType.Unused_Zerg1, false);
    fields.get("resourceDepot").set(UnitType.Unused_Zerg1, false);
    fields.get("refinery").set(UnitType.Unused_Zerg1, false);
    fields.get("worker").set(UnitType.Unused_Zerg1, false);
    fields.get("requiresPsi").set(UnitType.Unused_Zerg1, false);
    fields.get("requiresCreep").set(UnitType.Unused_Zerg1, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Zerg1, false);
    fields.get("burrowable").set(UnitType.Unused_Zerg1, false);
    fields.get("cloakable").set(UnitType.Unused_Zerg1, false);
    fields.get("building").set(UnitType.Unused_Zerg1, false);
    fields.get("addon").set(UnitType.Unused_Zerg1, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Zerg1, false);
    fields.get("neutral").set(UnitType.Unused_Zerg1, false);
    fields.get("hero").set(UnitType.Unused_Zerg1, false);
    fields.get("powerup").set(UnitType.Unused_Zerg1, false);
    fields.get("beacon").set(UnitType.Unused_Zerg1, false);
    fields.get("flagBeacon").set(UnitType.Unused_Zerg1, false);
    fields.get("specialBuilding").set(UnitType.Unused_Zerg1, false);
    fields.get("spell").set(UnitType.Unused_Zerg1, false);
    fields.get("producesCreep").set(UnitType.Unused_Zerg1, false);
    fields.get("producesLarva").set(UnitType.Unused_Zerg1, false);
    fields.get("mineralField").set(UnitType.Unused_Zerg1, false);
    fields.get("critter").set(UnitType.Unused_Zerg1, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Zerg1, false);
    fields.get("researchesWhat").set(UnitType.Unused_Zerg1, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Unused_Zerg1, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Sunken_Colony() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Sunken_Colony, 146);
    fields.get("race").set(UnitType.Zerg_Sunken_Colony, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Sunken_Colony, new UnitType.WhatBuilds(UnitType.Zerg_Creep_Colony, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Sunken_Colony, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Zerg_Sunken_Colony,
            toMap(UnitType.Zerg_Creep_Colony, 1, UnitType.Zerg_Spawning_Pool, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Sunken_Colony, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Sunken_Colony, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Sunken_Colony, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Sunken_Colony, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Sunken_Colony, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Sunken_Colony, 300);
    fields.get("maxShields").set(UnitType.Zerg_Sunken_Colony, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Sunken_Colony, 0);
    fields.get("armor").set(UnitType.Zerg_Sunken_Colony, 2);
    fields.get("mineralPrice").set(UnitType.Zerg_Sunken_Colony, 50);
    fields.get("gasPrice").set(UnitType.Zerg_Sunken_Colony, 0);
    fields.get("buildTime").set(UnitType.Zerg_Sunken_Colony, 300);
    fields.get("supplyRequired").set(UnitType.Zerg_Sunken_Colony, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Sunken_Colony, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Sunken_Colony, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Sunken_Colony, 0);
    fields.get("buildScore").set(UnitType.Zerg_Sunken_Colony, 40);
    fields.get("destroyScore").set(UnitType.Zerg_Sunken_Colony, 240);
    fields.get("size").set(UnitType.Zerg_Sunken_Colony, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Sunken_Colony, 2);
    fields.get("tileHeight").set(UnitType.Zerg_Sunken_Colony, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Sunken_Colony, 24);
    fields.get("dimensionUp").set(UnitType.Zerg_Sunken_Colony, 24);
    fields.get("dimensionRight").set(UnitType.Zerg_Sunken_Colony, 23);
    fields.get("dimensionDown").set(UnitType.Zerg_Sunken_Colony, 23);
    fields.get("width").set(UnitType.Zerg_Sunken_Colony, 48);
    fields.get("height").set(UnitType.Zerg_Sunken_Colony, 48);
    fields.get("seekRange").set(UnitType.Zerg_Sunken_Colony, 0);
    fields.get("sightRange").set(UnitType.Zerg_Sunken_Colony, 320);
    fields.get("groundWeapon").set(UnitType.Zerg_Sunken_Colony, WeaponType.Subterranean_Tentacle);
    fields.get("maxGroundHits").set(UnitType.Zerg_Sunken_Colony, 1);
    fields.get("airWeapon").set(UnitType.Zerg_Sunken_Colony, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Sunken_Colony, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Sunken_Colony, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Sunken_Colony, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Sunken_Colony, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Sunken_Colony, 0);
    fields.get("canProduce").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("canAttack").set(UnitType.Zerg_Sunken_Colony, true);
    fields.get("canMove").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("flyer").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Sunken_Colony, true);
    fields.get("spellcaster").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("invincible").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("organic").set(UnitType.Zerg_Sunken_Colony, true);
    fields.get("mechanical").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("robotic").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("detector").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("resourceDepot").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("refinery").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("worker").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Sunken_Colony, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("burrowable").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("cloakable").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("building").set(UnitType.Zerg_Sunken_Colony, true);
    fields.get("addon").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("neutral").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("hero").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("powerup").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("beacon").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("spell").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("producesCreep").set(UnitType.Zerg_Sunken_Colony, true);
    fields.get("producesLarva").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("mineralField").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("critter").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Sunken_Colony, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Sunken_Colony, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Sunken_Colony, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Overmind_With_Shell() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Overmind_With_Shell, 147);
    fields.get("race").set(UnitType.Special_Overmind_With_Shell, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Overmind_With_Shell, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Special_Overmind_With_Shell, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Overmind_With_Shell, toMap());
    fields.get("requiredTech").set(UnitType.Special_Overmind_With_Shell, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Overmind_With_Shell, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Special_Overmind_With_Shell, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Special_Overmind_With_Shell, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Overmind_With_Shell, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Overmind_With_Shell, 5000);
    fields.get("maxShields").set(UnitType.Special_Overmind_With_Shell, 0);
    fields.get("maxEnergy").set(UnitType.Special_Overmind_With_Shell, 0);
    fields.get("armor").set(UnitType.Special_Overmind_With_Shell, 1);
    fields.get("mineralPrice").set(UnitType.Special_Overmind_With_Shell, 1);
    fields.get("gasPrice").set(UnitType.Special_Overmind_With_Shell, 1);
    fields.get("buildTime").set(UnitType.Special_Overmind_With_Shell, 1);
    fields.get("supplyRequired").set(UnitType.Special_Overmind_With_Shell, 0);
    fields.get("supplyProvided").set(UnitType.Special_Overmind_With_Shell, 0);
    fields.get("spaceRequired").set(UnitType.Special_Overmind_With_Shell, 255);
    fields.get("spaceProvided").set(UnitType.Special_Overmind_With_Shell, 0);
    fields.get("buildScore").set(UnitType.Special_Overmind_With_Shell, 0);
    fields.get("destroyScore").set(UnitType.Special_Overmind_With_Shell, 10000);
    fields.get("size").set(UnitType.Special_Overmind_With_Shell, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Overmind_With_Shell, 5);
    fields.get("tileHeight").set(UnitType.Special_Overmind_With_Shell, 3);
    fields.get("dimensionLeft").set(UnitType.Special_Overmind_With_Shell, 80);
    fields.get("dimensionUp").set(UnitType.Special_Overmind_With_Shell, 32);
    fields.get("dimensionRight").set(UnitType.Special_Overmind_With_Shell, 79);
    fields.get("dimensionDown").set(UnitType.Special_Overmind_With_Shell, 40);
    fields.get("width").set(UnitType.Special_Overmind_With_Shell, 160);
    fields.get("height").set(UnitType.Special_Overmind_With_Shell, 73);
    fields.get("seekRange").set(UnitType.Special_Overmind_With_Shell, 0);
    fields.get("sightRange").set(UnitType.Special_Overmind_With_Shell, 256);
    fields.get("groundWeapon").set(UnitType.Special_Overmind_With_Shell, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Overmind_With_Shell, 0);
    fields.get("airWeapon").set(UnitType.Special_Overmind_With_Shell, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Overmind_With_Shell, 0);
    fields.get("topSpeed").set(UnitType.Special_Overmind_With_Shell, 0.0);
    fields.get("acceleration").set(UnitType.Special_Overmind_With_Shell, 0);
    fields.get("haltDistance").set(UnitType.Special_Overmind_With_Shell, 0);
    fields.get("turnRadius").set(UnitType.Special_Overmind_With_Shell, 0);
    fields.get("canProduce").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("canAttack").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("canMove").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("flyer").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("regeneratesHP").set(UnitType.Special_Overmind_With_Shell, true);
    fields.get("spellcaster").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("invincible").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("organic").set(UnitType.Special_Overmind_With_Shell, true);
    fields.get("mechanical").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("robotic").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("detector").set(UnitType.Special_Overmind_With_Shell, true);
    fields.get("resourceContainer").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("resourceDepot").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("refinery").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("worker").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("requiresPsi").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("requiresCreep").set(UnitType.Special_Overmind_With_Shell, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("burrowable").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("cloakable").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("building").set(UnitType.Special_Overmind_With_Shell, true);
    fields.get("addon").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("flyingBuilding").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("neutral").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("hero").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("powerup").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("beacon").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("flagBeacon").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("specialBuilding").set(UnitType.Special_Overmind_With_Shell, true);
    fields.get("spell").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("producesCreep").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("producesLarva").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("mineralField").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("critter").set(UnitType.Special_Overmind_With_Shell, false);
    fields.get("canBuildAddon").set(UnitType.Special_Overmind_With_Shell, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Overmind_With_Shell, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Overmind_With_Shell, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Overmind() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Overmind, 148);
    fields.get("race").set(UnitType.Special_Overmind, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Overmind, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Overmind, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Overmind, toMap());
    fields.get("requiredTech").set(UnitType.Special_Overmind, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Overmind, TechType.None);
    fields.get("abilities").set(UnitType.Special_Overmind, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Overmind, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Overmind, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Overmind, 2500);
    fields.get("maxShields").set(UnitType.Special_Overmind, 0);
    fields.get("maxEnergy").set(UnitType.Special_Overmind, 0);
    fields.get("armor").set(UnitType.Special_Overmind, 1);
    fields.get("mineralPrice").set(UnitType.Special_Overmind, 1);
    fields.get("gasPrice").set(UnitType.Special_Overmind, 1);
    fields.get("buildTime").set(UnitType.Special_Overmind, 1);
    fields.get("supplyRequired").set(UnitType.Special_Overmind, 0);
    fields.get("supplyProvided").set(UnitType.Special_Overmind, 0);
    fields.get("spaceRequired").set(UnitType.Special_Overmind, 255);
    fields.get("spaceProvided").set(UnitType.Special_Overmind, 0);
    fields.get("buildScore").set(UnitType.Special_Overmind, 0);
    fields.get("destroyScore").set(UnitType.Special_Overmind, 10000);
    fields.get("size").set(UnitType.Special_Overmind, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Overmind, 5);
    fields.get("tileHeight").set(UnitType.Special_Overmind, 3);
    fields.get("dimensionLeft").set(UnitType.Special_Overmind, 80);
    fields.get("dimensionUp").set(UnitType.Special_Overmind, 32);
    fields.get("dimensionRight").set(UnitType.Special_Overmind, 79);
    fields.get("dimensionDown").set(UnitType.Special_Overmind, 40);
    fields.get("width").set(UnitType.Special_Overmind, 160);
    fields.get("height").set(UnitType.Special_Overmind, 73);
    fields.get("seekRange").set(UnitType.Special_Overmind, 0);
    fields.get("sightRange").set(UnitType.Special_Overmind, 256);
    fields.get("groundWeapon").set(UnitType.Special_Overmind, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Overmind, 0);
    fields.get("airWeapon").set(UnitType.Special_Overmind, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Overmind, 0);
    fields.get("topSpeed").set(UnitType.Special_Overmind, 0.0);
    fields.get("acceleration").set(UnitType.Special_Overmind, 0);
    fields.get("haltDistance").set(UnitType.Special_Overmind, 0);
    fields.get("turnRadius").set(UnitType.Special_Overmind, 0);
    fields.get("canProduce").set(UnitType.Special_Overmind, false);
    fields.get("canAttack").set(UnitType.Special_Overmind, false);
    fields.get("canMove").set(UnitType.Special_Overmind, false);
    fields.get("flyer").set(UnitType.Special_Overmind, false);
    fields.get("regeneratesHP").set(UnitType.Special_Overmind, true);
    fields.get("spellcaster").set(UnitType.Special_Overmind, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Overmind, false);
    fields.get("invincible").set(UnitType.Special_Overmind, false);
    fields.get("organic").set(UnitType.Special_Overmind, true);
    fields.get("mechanical").set(UnitType.Special_Overmind, false);
    fields.get("robotic").set(UnitType.Special_Overmind, false);
    fields.get("detector").set(UnitType.Special_Overmind, true);
    fields.get("resourceContainer").set(UnitType.Special_Overmind, false);
    fields.get("resourceDepot").set(UnitType.Special_Overmind, false);
    fields.get("refinery").set(UnitType.Special_Overmind, false);
    fields.get("worker").set(UnitType.Special_Overmind, false);
    fields.get("requiresPsi").set(UnitType.Special_Overmind, false);
    fields.get("requiresCreep").set(UnitType.Special_Overmind, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Overmind, false);
    fields.get("burrowable").set(UnitType.Special_Overmind, false);
    fields.get("cloakable").set(UnitType.Special_Overmind, false);
    fields.get("building").set(UnitType.Special_Overmind, true);
    fields.get("addon").set(UnitType.Special_Overmind, false);
    fields.get("flyingBuilding").set(UnitType.Special_Overmind, false);
    fields.get("neutral").set(UnitType.Special_Overmind, false);
    fields.get("hero").set(UnitType.Special_Overmind, false);
    fields.get("powerup").set(UnitType.Special_Overmind, false);
    fields.get("beacon").set(UnitType.Special_Overmind, false);
    fields.get("flagBeacon").set(UnitType.Special_Overmind, false);
    fields.get("specialBuilding").set(UnitType.Special_Overmind, true);
    fields.get("spell").set(UnitType.Special_Overmind, false);
    fields.get("producesCreep").set(UnitType.Special_Overmind, false);
    fields.get("producesLarva").set(UnitType.Special_Overmind, false);
    fields.get("mineralField").set(UnitType.Special_Overmind, false);
    fields.get("critter").set(UnitType.Special_Overmind, false);
    fields.get("canBuildAddon").set(UnitType.Special_Overmind, false);
    fields.get("researchesWhat").set(UnitType.Special_Overmind, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Overmind, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Zerg_Extractor() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Zerg_Extractor, 149);
    fields.get("race").set(UnitType.Zerg_Extractor, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Zerg_Extractor, new UnitType.WhatBuilds(UnitType.Zerg_Drone, 1));
    fields.get("buildsWhat").set(UnitType.Zerg_Extractor, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Zerg_Extractor, toMap(UnitType.Zerg_Drone, 1));
    fields.get("requiredTech").set(UnitType.Zerg_Extractor, TechType.None);
    fields.get("cloakingTech").set(UnitType.Zerg_Extractor, TechType.None);
    fields.get("abilities").set(UnitType.Zerg_Extractor, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Zerg_Extractor, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Zerg_Extractor, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Zerg_Extractor, 750);
    fields.get("maxShields").set(UnitType.Zerg_Extractor, 0);
    fields.get("maxEnergy").set(UnitType.Zerg_Extractor, 0);
    fields.get("armor").set(UnitType.Zerg_Extractor, 1);
    fields.get("mineralPrice").set(UnitType.Zerg_Extractor, 50);
    fields.get("gasPrice").set(UnitType.Zerg_Extractor, 0);
    fields.get("buildTime").set(UnitType.Zerg_Extractor, 600);
    fields.get("supplyRequired").set(UnitType.Zerg_Extractor, 0);
    fields.get("supplyProvided").set(UnitType.Zerg_Extractor, 0);
    fields.get("spaceRequired").set(UnitType.Zerg_Extractor, 255);
    fields.get("spaceProvided").set(UnitType.Zerg_Extractor, 0);
    fields.get("buildScore").set(UnitType.Zerg_Extractor, 25);
    fields.get("destroyScore").set(UnitType.Zerg_Extractor, 75);
    fields.get("size").set(UnitType.Zerg_Extractor, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Zerg_Extractor, 4);
    fields.get("tileHeight").set(UnitType.Zerg_Extractor, 2);
    fields.get("dimensionLeft").set(UnitType.Zerg_Extractor, 64);
    fields.get("dimensionUp").set(UnitType.Zerg_Extractor, 32);
    fields.get("dimensionRight").set(UnitType.Zerg_Extractor, 63);
    fields.get("dimensionDown").set(UnitType.Zerg_Extractor, 31);
    fields.get("width").set(UnitType.Zerg_Extractor, 128);
    fields.get("height").set(UnitType.Zerg_Extractor, 64);
    fields.get("seekRange").set(UnitType.Zerg_Extractor, 0);
    fields.get("sightRange").set(UnitType.Zerg_Extractor, 224);
    fields.get("groundWeapon").set(UnitType.Zerg_Extractor, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Zerg_Extractor, 0);
    fields.get("airWeapon").set(UnitType.Zerg_Extractor, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Zerg_Extractor, 0);
    fields.get("topSpeed").set(UnitType.Zerg_Extractor, 0.0);
    fields.get("acceleration").set(UnitType.Zerg_Extractor, 0);
    fields.get("haltDistance").set(UnitType.Zerg_Extractor, 0);
    fields.get("turnRadius").set(UnitType.Zerg_Extractor, 0);
    fields.get("canProduce").set(UnitType.Zerg_Extractor, false);
    fields.get("canAttack").set(UnitType.Zerg_Extractor, false);
    fields.get("canMove").set(UnitType.Zerg_Extractor, false);
    fields.get("flyer").set(UnitType.Zerg_Extractor, false);
    fields.get("regeneratesHP").set(UnitType.Zerg_Extractor, true);
    fields.get("spellcaster").set(UnitType.Zerg_Extractor, false);
    fields.get("hasPermanentCloak").set(UnitType.Zerg_Extractor, false);
    fields.get("invincible").set(UnitType.Zerg_Extractor, false);
    fields.get("organic").set(UnitType.Zerg_Extractor, true);
    fields.get("mechanical").set(UnitType.Zerg_Extractor, false);
    fields.get("robotic").set(UnitType.Zerg_Extractor, false);
    fields.get("detector").set(UnitType.Zerg_Extractor, false);
    fields.get("resourceContainer").set(UnitType.Zerg_Extractor, true);
    fields.get("resourceDepot").set(UnitType.Zerg_Extractor, false);
    fields.get("refinery").set(UnitType.Zerg_Extractor, true);
    fields.get("worker").set(UnitType.Zerg_Extractor, false);
    fields.get("requiresPsi").set(UnitType.Zerg_Extractor, false);
    fields.get("requiresCreep").set(UnitType.Zerg_Extractor, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Zerg_Extractor, false);
    fields.get("burrowable").set(UnitType.Zerg_Extractor, false);
    fields.get("cloakable").set(UnitType.Zerg_Extractor, false);
    fields.get("building").set(UnitType.Zerg_Extractor, true);
    fields.get("addon").set(UnitType.Zerg_Extractor, false);
    fields.get("flyingBuilding").set(UnitType.Zerg_Extractor, false);
    fields.get("neutral").set(UnitType.Zerg_Extractor, false);
    fields.get("hero").set(UnitType.Zerg_Extractor, false);
    fields.get("powerup").set(UnitType.Zerg_Extractor, false);
    fields.get("beacon").set(UnitType.Zerg_Extractor, false);
    fields.get("flagBeacon").set(UnitType.Zerg_Extractor, false);
    fields.get("specialBuilding").set(UnitType.Zerg_Extractor, false);
    fields.get("spell").set(UnitType.Zerg_Extractor, false);
    fields.get("producesCreep").set(UnitType.Zerg_Extractor, false);
    fields.get("producesLarva").set(UnitType.Zerg_Extractor, false);
    fields.get("mineralField").set(UnitType.Zerg_Extractor, false);
    fields.get("critter").set(UnitType.Zerg_Extractor, false);
    fields.get("canBuildAddon").set(UnitType.Zerg_Extractor, false);
    fields.get("researchesWhat").set(UnitType.Zerg_Extractor, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Zerg_Extractor, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Mature_Chrysalis() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Mature_Chrysalis, 150);
    fields.get("race").set(UnitType.Special_Mature_Chrysalis, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Mature_Chrysalis, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Mature_Chrysalis, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Mature_Chrysalis, toMap());
    fields.get("requiredTech").set(UnitType.Special_Mature_Chrysalis, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Mature_Chrysalis, TechType.None);
    fields.get("abilities").set(UnitType.Special_Mature_Chrysalis, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Mature_Chrysalis, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Mature_Chrysalis, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Mature_Chrysalis, 250);
    fields.get("maxShields").set(UnitType.Special_Mature_Chrysalis, 0);
    fields.get("maxEnergy").set(UnitType.Special_Mature_Chrysalis, 0);
    fields.get("armor").set(UnitType.Special_Mature_Chrysalis, 1);
    fields.get("mineralPrice").set(UnitType.Special_Mature_Chrysalis, 0);
    fields.get("gasPrice").set(UnitType.Special_Mature_Chrysalis, 0);
    fields.get("buildTime").set(UnitType.Special_Mature_Chrysalis, 0);
    fields.get("supplyRequired").set(UnitType.Special_Mature_Chrysalis, 0);
    fields.get("supplyProvided").set(UnitType.Special_Mature_Chrysalis, 0);
    fields.get("spaceRequired").set(UnitType.Special_Mature_Chrysalis, 255);
    fields.get("spaceProvided").set(UnitType.Special_Mature_Chrysalis, 0);
    fields.get("buildScore").set(UnitType.Special_Mature_Chrysalis, 0);
    fields.get("destroyScore").set(UnitType.Special_Mature_Chrysalis, 5000);
    fields.get("size").set(UnitType.Special_Mature_Chrysalis, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Mature_Chrysalis, 2);
    fields.get("tileHeight").set(UnitType.Special_Mature_Chrysalis, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Mature_Chrysalis, 32);
    fields.get("dimensionUp").set(UnitType.Special_Mature_Chrysalis, 32);
    fields.get("dimensionRight").set(UnitType.Special_Mature_Chrysalis, 31);
    fields.get("dimensionDown").set(UnitType.Special_Mature_Chrysalis, 31);
    fields.get("width").set(UnitType.Special_Mature_Chrysalis, 64);
    fields.get("height").set(UnitType.Special_Mature_Chrysalis, 64);
    fields.get("seekRange").set(UnitType.Special_Mature_Chrysalis, 0);
    fields.get("sightRange").set(UnitType.Special_Mature_Chrysalis, 256);
    fields.get("groundWeapon").set(UnitType.Special_Mature_Chrysalis, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Mature_Chrysalis, 0);
    fields.get("airWeapon").set(UnitType.Special_Mature_Chrysalis, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Mature_Chrysalis, 0);
    fields.get("topSpeed").set(UnitType.Special_Mature_Chrysalis, 0.0);
    fields.get("acceleration").set(UnitType.Special_Mature_Chrysalis, 0);
    fields.get("haltDistance").set(UnitType.Special_Mature_Chrysalis, 0);
    fields.get("turnRadius").set(UnitType.Special_Mature_Chrysalis, 0);
    fields.get("canProduce").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("canAttack").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("canMove").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("flyer").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("regeneratesHP").set(UnitType.Special_Mature_Chrysalis, true);
    fields.get("spellcaster").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("invincible").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("organic").set(UnitType.Special_Mature_Chrysalis, true);
    fields.get("mechanical").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("robotic").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("detector").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("resourceContainer").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("resourceDepot").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("refinery").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("worker").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("requiresPsi").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("requiresCreep").set(UnitType.Special_Mature_Chrysalis, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("burrowable").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("cloakable").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("building").set(UnitType.Special_Mature_Chrysalis, true);
    fields.get("addon").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("flyingBuilding").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("neutral").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("hero").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("powerup").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("beacon").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("flagBeacon").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("specialBuilding").set(UnitType.Special_Mature_Chrysalis, true);
    fields.get("spell").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("producesCreep").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("producesLarva").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("mineralField").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("critter").set(UnitType.Special_Mature_Chrysalis, false);
    fields.get("canBuildAddon").set(UnitType.Special_Mature_Chrysalis, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Mature_Chrysalis, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Mature_Chrysalis, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Cerebrate() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Cerebrate, 151);
    fields.get("race").set(UnitType.Special_Cerebrate, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Cerebrate, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Cerebrate, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Cerebrate, toMap());
    fields.get("requiredTech").set(UnitType.Special_Cerebrate, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Cerebrate, TechType.None);
    fields.get("abilities").set(UnitType.Special_Cerebrate, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Cerebrate, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Cerebrate, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Cerebrate, 1500);
    fields.get("maxShields").set(UnitType.Special_Cerebrate, 0);
    fields.get("maxEnergy").set(UnitType.Special_Cerebrate, 0);
    fields.get("armor").set(UnitType.Special_Cerebrate, 1);
    fields.get("mineralPrice").set(UnitType.Special_Cerebrate, 0);
    fields.get("gasPrice").set(UnitType.Special_Cerebrate, 0);
    fields.get("buildTime").set(UnitType.Special_Cerebrate, 0);
    fields.get("supplyRequired").set(UnitType.Special_Cerebrate, 0);
    fields.get("supplyProvided").set(UnitType.Special_Cerebrate, 0);
    fields.get("spaceRequired").set(UnitType.Special_Cerebrate, 255);
    fields.get("spaceProvided").set(UnitType.Special_Cerebrate, 0);
    fields.get("buildScore").set(UnitType.Special_Cerebrate, 0);
    fields.get("destroyScore").set(UnitType.Special_Cerebrate, 2500);
    fields.get("size").set(UnitType.Special_Cerebrate, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Cerebrate, 3);
    fields.get("tileHeight").set(UnitType.Special_Cerebrate, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Cerebrate, 40);
    fields.get("dimensionUp").set(UnitType.Special_Cerebrate, 32);
    fields.get("dimensionRight").set(UnitType.Special_Cerebrate, 32);
    fields.get("dimensionDown").set(UnitType.Special_Cerebrate, 31);
    fields.get("width").set(UnitType.Special_Cerebrate, 73);
    fields.get("height").set(UnitType.Special_Cerebrate, 64);
    fields.get("seekRange").set(UnitType.Special_Cerebrate, 0);
    fields.get("sightRange").set(UnitType.Special_Cerebrate, 256);
    fields.get("groundWeapon").set(UnitType.Special_Cerebrate, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Cerebrate, 0);
    fields.get("airWeapon").set(UnitType.Special_Cerebrate, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Cerebrate, 0);
    fields.get("topSpeed").set(UnitType.Special_Cerebrate, 0.0);
    fields.get("acceleration").set(UnitType.Special_Cerebrate, 0);
    fields.get("haltDistance").set(UnitType.Special_Cerebrate, 0);
    fields.get("turnRadius").set(UnitType.Special_Cerebrate, 0);
    fields.get("canProduce").set(UnitType.Special_Cerebrate, false);
    fields.get("canAttack").set(UnitType.Special_Cerebrate, false);
    fields.get("canMove").set(UnitType.Special_Cerebrate, false);
    fields.get("flyer").set(UnitType.Special_Cerebrate, false);
    fields.get("regeneratesHP").set(UnitType.Special_Cerebrate, true);
    fields.get("spellcaster").set(UnitType.Special_Cerebrate, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Cerebrate, false);
    fields.get("invincible").set(UnitType.Special_Cerebrate, false);
    fields.get("organic").set(UnitType.Special_Cerebrate, true);
    fields.get("mechanical").set(UnitType.Special_Cerebrate, false);
    fields.get("robotic").set(UnitType.Special_Cerebrate, false);
    fields.get("detector").set(UnitType.Special_Cerebrate, true);
    fields.get("resourceContainer").set(UnitType.Special_Cerebrate, false);
    fields.get("resourceDepot").set(UnitType.Special_Cerebrate, false);
    fields.get("refinery").set(UnitType.Special_Cerebrate, false);
    fields.get("worker").set(UnitType.Special_Cerebrate, false);
    fields.get("requiresPsi").set(UnitType.Special_Cerebrate, false);
    fields.get("requiresCreep").set(UnitType.Special_Cerebrate, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Cerebrate, false);
    fields.get("burrowable").set(UnitType.Special_Cerebrate, false);
    fields.get("cloakable").set(UnitType.Special_Cerebrate, false);
    fields.get("building").set(UnitType.Special_Cerebrate, true);
    fields.get("addon").set(UnitType.Special_Cerebrate, false);
    fields.get("flyingBuilding").set(UnitType.Special_Cerebrate, false);
    fields.get("neutral").set(UnitType.Special_Cerebrate, false);
    fields.get("hero").set(UnitType.Special_Cerebrate, false);
    fields.get("powerup").set(UnitType.Special_Cerebrate, false);
    fields.get("beacon").set(UnitType.Special_Cerebrate, false);
    fields.get("flagBeacon").set(UnitType.Special_Cerebrate, false);
    fields.get("specialBuilding").set(UnitType.Special_Cerebrate, true);
    fields.get("spell").set(UnitType.Special_Cerebrate, false);
    fields.get("producesCreep").set(UnitType.Special_Cerebrate, false);
    fields.get("producesLarva").set(UnitType.Special_Cerebrate, false);
    fields.get("mineralField").set(UnitType.Special_Cerebrate, false);
    fields.get("critter").set(UnitType.Special_Cerebrate, false);
    fields.get("canBuildAddon").set(UnitType.Special_Cerebrate, false);
    fields.get("researchesWhat").set(UnitType.Special_Cerebrate, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Cerebrate, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Cerebrate_Daggoth() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Cerebrate_Daggoth, 152);
    fields.get("race").set(UnitType.Special_Cerebrate_Daggoth, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Cerebrate_Daggoth, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Special_Cerebrate_Daggoth, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Cerebrate_Daggoth, toMap());
    fields.get("requiredTech").set(UnitType.Special_Cerebrate_Daggoth, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Cerebrate_Daggoth, TechType.None);
    fields.get("abilities").set(UnitType.Special_Cerebrate_Daggoth, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Cerebrate_Daggoth, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Cerebrate_Daggoth, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Cerebrate_Daggoth, 1500);
    fields.get("maxShields").set(UnitType.Special_Cerebrate_Daggoth, 0);
    fields.get("maxEnergy").set(UnitType.Special_Cerebrate_Daggoth, 0);
    fields.get("armor").set(UnitType.Special_Cerebrate_Daggoth, 1);
    fields.get("mineralPrice").set(UnitType.Special_Cerebrate_Daggoth, 0);
    fields.get("gasPrice").set(UnitType.Special_Cerebrate_Daggoth, 0);
    fields.get("buildTime").set(UnitType.Special_Cerebrate_Daggoth, 0);
    fields.get("supplyRequired").set(UnitType.Special_Cerebrate_Daggoth, 0);
    fields.get("supplyProvided").set(UnitType.Special_Cerebrate_Daggoth, 0);
    fields.get("spaceRequired").set(UnitType.Special_Cerebrate_Daggoth, 255);
    fields.get("spaceProvided").set(UnitType.Special_Cerebrate_Daggoth, 0);
    fields.get("buildScore").set(UnitType.Special_Cerebrate_Daggoth, 0);
    fields.get("destroyScore").set(UnitType.Special_Cerebrate_Daggoth, 2500);
    fields.get("size").set(UnitType.Special_Cerebrate_Daggoth, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Cerebrate_Daggoth, 3);
    fields.get("tileHeight").set(UnitType.Special_Cerebrate_Daggoth, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Cerebrate_Daggoth, 40);
    fields.get("dimensionUp").set(UnitType.Special_Cerebrate_Daggoth, 32);
    fields.get("dimensionRight").set(UnitType.Special_Cerebrate_Daggoth, 32);
    fields.get("dimensionDown").set(UnitType.Special_Cerebrate_Daggoth, 31);
    fields.get("width").set(UnitType.Special_Cerebrate_Daggoth, 73);
    fields.get("height").set(UnitType.Special_Cerebrate_Daggoth, 64);
    fields.get("seekRange").set(UnitType.Special_Cerebrate_Daggoth, 0);
    fields.get("sightRange").set(UnitType.Special_Cerebrate_Daggoth, 256);
    fields.get("groundWeapon").set(UnitType.Special_Cerebrate_Daggoth, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Cerebrate_Daggoth, 0);
    fields.get("airWeapon").set(UnitType.Special_Cerebrate_Daggoth, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Cerebrate_Daggoth, 0);
    fields.get("topSpeed").set(UnitType.Special_Cerebrate_Daggoth, 0.0);
    fields.get("acceleration").set(UnitType.Special_Cerebrate_Daggoth, 0);
    fields.get("haltDistance").set(UnitType.Special_Cerebrate_Daggoth, 0);
    fields.get("turnRadius").set(UnitType.Special_Cerebrate_Daggoth, 0);
    fields.get("canProduce").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("canAttack").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("canMove").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("flyer").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("regeneratesHP").set(UnitType.Special_Cerebrate_Daggoth, true);
    fields.get("spellcaster").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("invincible").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("organic").set(UnitType.Special_Cerebrate_Daggoth, true);
    fields.get("mechanical").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("robotic").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("detector").set(UnitType.Special_Cerebrate_Daggoth, true);
    fields.get("resourceContainer").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("resourceDepot").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("refinery").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("worker").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("requiresPsi").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("requiresCreep").set(UnitType.Special_Cerebrate_Daggoth, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("burrowable").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("cloakable").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("building").set(UnitType.Special_Cerebrate_Daggoth, true);
    fields.get("addon").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("flyingBuilding").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("neutral").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("hero").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("powerup").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("beacon").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("flagBeacon").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("specialBuilding").set(UnitType.Special_Cerebrate_Daggoth, true);
    fields.get("spell").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("producesCreep").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("producesLarva").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("mineralField").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("critter").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields.get("canBuildAddon").set(UnitType.Special_Cerebrate_Daggoth, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Cerebrate_Daggoth, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Cerebrate_Daggoth, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unused_Zerg2() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Zerg2, 153);
    fields.get("race").set(UnitType.Unused_Zerg2, null);
    fields.get("whatBuilds").set(UnitType.Unused_Zerg2, null);
    fields.get("buildsWhat").set(UnitType.Unused_Zerg2, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Zerg2, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Zerg2, null);
    fields.get("cloakingTech").set(UnitType.Unused_Zerg2, null);
    fields.get("abilities").set(UnitType.Unused_Zerg2, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Unused_Zerg2, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Zerg2, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Zerg2, 0);
    fields.get("maxShields").set(UnitType.Unused_Zerg2, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Zerg2, 0);
    fields.get("armor").set(UnitType.Unused_Zerg2, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Zerg2, 0);
    fields.get("gasPrice").set(UnitType.Unused_Zerg2, 0);
    fields.get("buildTime").set(UnitType.Unused_Zerg2, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Zerg2, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Zerg2, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Zerg2, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Zerg2, 0);
    fields.get("buildScore").set(UnitType.Unused_Zerg2, 0);
    fields.get("destroyScore").set(UnitType.Unused_Zerg2, 0);
    fields.get("size").set(UnitType.Unused_Zerg2, null);
    fields.get("tileWidth").set(UnitType.Unused_Zerg2, 0);
    fields.get("tileHeight").set(UnitType.Unused_Zerg2, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Zerg2, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Zerg2, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Zerg2, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Zerg2, 0);
    fields.get("width").set(UnitType.Unused_Zerg2, 0);
    fields.get("height").set(UnitType.Unused_Zerg2, 0);
    fields.get("seekRange").set(UnitType.Unused_Zerg2, 0);
    fields.get("sightRange").set(UnitType.Unused_Zerg2, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Zerg2, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Zerg2, 0);
    fields.get("airWeapon").set(UnitType.Unused_Zerg2, null);
    fields.get("maxAirHits").set(UnitType.Unused_Zerg2, 0);
    fields.get("topSpeed").set(UnitType.Unused_Zerg2, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Zerg2, 0);
    fields.get("haltDistance").set(UnitType.Unused_Zerg2, 0);
    fields.get("turnRadius").set(UnitType.Unused_Zerg2, 0);
    fields.get("canProduce").set(UnitType.Unused_Zerg2, false);
    fields.get("canAttack").set(UnitType.Unused_Zerg2, false);
    fields.get("canMove").set(UnitType.Unused_Zerg2, false);
    fields.get("flyer").set(UnitType.Unused_Zerg2, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Zerg2, false);
    fields.get("spellcaster").set(UnitType.Unused_Zerg2, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Zerg2, false);
    fields.get("invincible").set(UnitType.Unused_Zerg2, false);
    fields.get("organic").set(UnitType.Unused_Zerg2, false);
    fields.get("mechanical").set(UnitType.Unused_Zerg2, false);
    fields.get("robotic").set(UnitType.Unused_Zerg2, false);
    fields.get("detector").set(UnitType.Unused_Zerg2, false);
    fields.get("resourceContainer").set(UnitType.Unused_Zerg2, false);
    fields.get("resourceDepot").set(UnitType.Unused_Zerg2, false);
    fields.get("refinery").set(UnitType.Unused_Zerg2, false);
    fields.get("worker").set(UnitType.Unused_Zerg2, false);
    fields.get("requiresPsi").set(UnitType.Unused_Zerg2, false);
    fields.get("requiresCreep").set(UnitType.Unused_Zerg2, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Zerg2, false);
    fields.get("burrowable").set(UnitType.Unused_Zerg2, false);
    fields.get("cloakable").set(UnitType.Unused_Zerg2, false);
    fields.get("building").set(UnitType.Unused_Zerg2, false);
    fields.get("addon").set(UnitType.Unused_Zerg2, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Zerg2, false);
    fields.get("neutral").set(UnitType.Unused_Zerg2, false);
    fields.get("hero").set(UnitType.Unused_Zerg2, false);
    fields.get("powerup").set(UnitType.Unused_Zerg2, false);
    fields.get("beacon").set(UnitType.Unused_Zerg2, false);
    fields.get("flagBeacon").set(UnitType.Unused_Zerg2, false);
    fields.get("specialBuilding").set(UnitType.Unused_Zerg2, false);
    fields.get("spell").set(UnitType.Unused_Zerg2, false);
    fields.get("producesCreep").set(UnitType.Unused_Zerg2, false);
    fields.get("producesLarva").set(UnitType.Unused_Zerg2, false);
    fields.get("mineralField").set(UnitType.Unused_Zerg2, false);
    fields.get("critter").set(UnitType.Unused_Zerg2, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Zerg2, false);
    fields.get("researchesWhat").set(UnitType.Unused_Zerg2, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Unused_Zerg2, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Nexus() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Nexus, 154);
    fields.get("race").set(UnitType.Protoss_Nexus, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Nexus, new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields
        .get("buildsWhat")
        .set(UnitType.Protoss_Nexus, new ArrayList(Arrays.asList(UnitType.Protoss_Probe)));
    fields.get("requiredUnits").set(UnitType.Protoss_Nexus, toMap(UnitType.Protoss_Probe, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Nexus, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Nexus, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Nexus, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Nexus,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Nexus, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Nexus, 750);
    fields.get("maxShields").set(UnitType.Protoss_Nexus, 750);
    fields.get("maxEnergy").set(UnitType.Protoss_Nexus, 0);
    fields.get("armor").set(UnitType.Protoss_Nexus, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Nexus, 400);
    fields.get("gasPrice").set(UnitType.Protoss_Nexus, 0);
    fields.get("buildTime").set(UnitType.Protoss_Nexus, 1800);
    fields.get("supplyRequired").set(UnitType.Protoss_Nexus, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Nexus, 18);
    fields.get("spaceRequired").set(UnitType.Protoss_Nexus, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Nexus, 0);
    fields.get("buildScore").set(UnitType.Protoss_Nexus, 400);
    fields.get("destroyScore").set(UnitType.Protoss_Nexus, 1200);
    fields.get("size").set(UnitType.Protoss_Nexus, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Nexus, 4);
    fields.get("tileHeight").set(UnitType.Protoss_Nexus, 3);
    fields.get("dimensionLeft").set(UnitType.Protoss_Nexus, 56);
    fields.get("dimensionUp").set(UnitType.Protoss_Nexus, 39);
    fields.get("dimensionRight").set(UnitType.Protoss_Nexus, 56);
    fields.get("dimensionDown").set(UnitType.Protoss_Nexus, 39);
    fields.get("width").set(UnitType.Protoss_Nexus, 113);
    fields.get("height").set(UnitType.Protoss_Nexus, 79);
    fields.get("seekRange").set(UnitType.Protoss_Nexus, 0);
    fields.get("sightRange").set(UnitType.Protoss_Nexus, 352);
    fields.get("groundWeapon").set(UnitType.Protoss_Nexus, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Nexus, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Nexus, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Nexus, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Nexus, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Nexus, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Nexus, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Nexus, 0);
    fields.get("canProduce").set(UnitType.Protoss_Nexus, true);
    fields.get("canAttack").set(UnitType.Protoss_Nexus, false);
    fields.get("canMove").set(UnitType.Protoss_Nexus, false);
    fields.get("flyer").set(UnitType.Protoss_Nexus, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Nexus, false);
    fields.get("spellcaster").set(UnitType.Protoss_Nexus, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Nexus, false);
    fields.get("invincible").set(UnitType.Protoss_Nexus, false);
    fields.get("organic").set(UnitType.Protoss_Nexus, false);
    fields.get("mechanical").set(UnitType.Protoss_Nexus, true);
    fields.get("robotic").set(UnitType.Protoss_Nexus, false);
    fields.get("detector").set(UnitType.Protoss_Nexus, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Nexus, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Nexus, true);
    fields.get("refinery").set(UnitType.Protoss_Nexus, false);
    fields.get("worker").set(UnitType.Protoss_Nexus, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Nexus, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Nexus, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Nexus, false);
    fields.get("burrowable").set(UnitType.Protoss_Nexus, false);
    fields.get("cloakable").set(UnitType.Protoss_Nexus, false);
    fields.get("building").set(UnitType.Protoss_Nexus, true);
    fields.get("addon").set(UnitType.Protoss_Nexus, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Nexus, false);
    fields.get("neutral").set(UnitType.Protoss_Nexus, false);
    fields.get("hero").set(UnitType.Protoss_Nexus, false);
    fields.get("powerup").set(UnitType.Protoss_Nexus, false);
    fields.get("beacon").set(UnitType.Protoss_Nexus, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Nexus, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Nexus, false);
    fields.get("spell").set(UnitType.Protoss_Nexus, false);
    fields.get("producesCreep").set(UnitType.Protoss_Nexus, false);
    fields.get("producesLarva").set(UnitType.Protoss_Nexus, false);
    fields.get("mineralField").set(UnitType.Protoss_Nexus, false);
    fields.get("critter").set(UnitType.Protoss_Nexus, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Nexus, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Nexus, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Nexus, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Robotics_Facility() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Robotics_Facility, 155);
    fields.get("race").set(UnitType.Protoss_Robotics_Facility, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(
            UnitType.Protoss_Robotics_Facility, new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Protoss_Robotics_Facility,
            new ArrayList(
                Arrays.asList(
                    UnitType.Protoss_Observer, UnitType.Protoss_Reaver, UnitType.Protoss_Shuttle)));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Robotics_Facility,
            toMap(UnitType.Protoss_Probe, 1, UnitType.Protoss_Cybernetics_Core, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Robotics_Facility, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Robotics_Facility, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Robotics_Facility, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Robotics_Facility,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Robotics_Facility, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Robotics_Facility, 500);
    fields.get("maxShields").set(UnitType.Protoss_Robotics_Facility, 500);
    fields.get("maxEnergy").set(UnitType.Protoss_Robotics_Facility, 0);
    fields.get("armor").set(UnitType.Protoss_Robotics_Facility, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Robotics_Facility, 200);
    fields.get("gasPrice").set(UnitType.Protoss_Robotics_Facility, 200);
    fields.get("buildTime").set(UnitType.Protoss_Robotics_Facility, 1200);
    fields.get("supplyRequired").set(UnitType.Protoss_Robotics_Facility, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Robotics_Facility, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Robotics_Facility, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Robotics_Facility, 0);
    fields.get("buildScore").set(UnitType.Protoss_Robotics_Facility, 300);
    fields.get("destroyScore").set(UnitType.Protoss_Robotics_Facility, 900);
    fields.get("size").set(UnitType.Protoss_Robotics_Facility, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Robotics_Facility, 3);
    fields.get("tileHeight").set(UnitType.Protoss_Robotics_Facility, 2);
    fields.get("dimensionLeft").set(UnitType.Protoss_Robotics_Facility, 36);
    fields.get("dimensionUp").set(UnitType.Protoss_Robotics_Facility, 16);
    fields.get("dimensionRight").set(UnitType.Protoss_Robotics_Facility, 40);
    fields.get("dimensionDown").set(UnitType.Protoss_Robotics_Facility, 20);
    fields.get("width").set(UnitType.Protoss_Robotics_Facility, 77);
    fields.get("height").set(UnitType.Protoss_Robotics_Facility, 37);
    fields.get("seekRange").set(UnitType.Protoss_Robotics_Facility, 0);
    fields.get("sightRange").set(UnitType.Protoss_Robotics_Facility, 320);
    fields.get("groundWeapon").set(UnitType.Protoss_Robotics_Facility, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Robotics_Facility, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Robotics_Facility, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Robotics_Facility, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Robotics_Facility, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Robotics_Facility, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Robotics_Facility, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Robotics_Facility, 0);
    fields.get("canProduce").set(UnitType.Protoss_Robotics_Facility, true);
    fields.get("canAttack").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("canMove").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("flyer").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("spellcaster").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("invincible").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("organic").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("mechanical").set(UnitType.Protoss_Robotics_Facility, true);
    fields.get("robotic").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("detector").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("refinery").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("worker").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Robotics_Facility, true);
    fields.get("requiresCreep").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("burrowable").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("cloakable").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("building").set(UnitType.Protoss_Robotics_Facility, true);
    fields.get("addon").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("neutral").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("hero").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("powerup").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("beacon").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("spell").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("producesCreep").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("producesLarva").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("mineralField").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("critter").set(UnitType.Protoss_Robotics_Facility, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Robotics_Facility, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Protoss_Robotics_Facility, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Protoss_Robotics_Facility, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Pylon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Pylon, 156);
    fields.get("race").set(UnitType.Protoss_Pylon, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Pylon, new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Pylon, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Protoss_Pylon, toMap(UnitType.Protoss_Probe, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Pylon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Pylon, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Pylon, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Pylon,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Pylon, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Pylon, 300);
    fields.get("maxShields").set(UnitType.Protoss_Pylon, 300);
    fields.get("maxEnergy").set(UnitType.Protoss_Pylon, 0);
    fields.get("armor").set(UnitType.Protoss_Pylon, 0);
    fields.get("mineralPrice").set(UnitType.Protoss_Pylon, 100);
    fields.get("gasPrice").set(UnitType.Protoss_Pylon, 0);
    fields.get("buildTime").set(UnitType.Protoss_Pylon, 450);
    fields.get("supplyRequired").set(UnitType.Protoss_Pylon, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Pylon, 16);
    fields.get("spaceRequired").set(UnitType.Protoss_Pylon, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Pylon, 0);
    fields.get("buildScore").set(UnitType.Protoss_Pylon, 50);
    fields.get("destroyScore").set(UnitType.Protoss_Pylon, 150);
    fields.get("size").set(UnitType.Protoss_Pylon, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Pylon, 2);
    fields.get("tileHeight").set(UnitType.Protoss_Pylon, 2);
    fields.get("dimensionLeft").set(UnitType.Protoss_Pylon, 16);
    fields.get("dimensionUp").set(UnitType.Protoss_Pylon, 12);
    fields.get("dimensionRight").set(UnitType.Protoss_Pylon, 16);
    fields.get("dimensionDown").set(UnitType.Protoss_Pylon, 20);
    fields.get("width").set(UnitType.Protoss_Pylon, 33);
    fields.get("height").set(UnitType.Protoss_Pylon, 33);
    fields.get("seekRange").set(UnitType.Protoss_Pylon, 0);
    fields.get("sightRange").set(UnitType.Protoss_Pylon, 256);
    fields.get("groundWeapon").set(UnitType.Protoss_Pylon, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Pylon, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Pylon, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Pylon, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Pylon, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Pylon, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Pylon, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Pylon, 0);
    fields.get("canProduce").set(UnitType.Protoss_Pylon, false);
    fields.get("canAttack").set(UnitType.Protoss_Pylon, false);
    fields.get("canMove").set(UnitType.Protoss_Pylon, false);
    fields.get("flyer").set(UnitType.Protoss_Pylon, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Pylon, false);
    fields.get("spellcaster").set(UnitType.Protoss_Pylon, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Pylon, false);
    fields.get("invincible").set(UnitType.Protoss_Pylon, false);
    fields.get("organic").set(UnitType.Protoss_Pylon, false);
    fields.get("mechanical").set(UnitType.Protoss_Pylon, true);
    fields.get("robotic").set(UnitType.Protoss_Pylon, false);
    fields.get("detector").set(UnitType.Protoss_Pylon, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Pylon, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Pylon, false);
    fields.get("refinery").set(UnitType.Protoss_Pylon, false);
    fields.get("worker").set(UnitType.Protoss_Pylon, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Pylon, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Pylon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Pylon, false);
    fields.get("burrowable").set(UnitType.Protoss_Pylon, false);
    fields.get("cloakable").set(UnitType.Protoss_Pylon, false);
    fields.get("building").set(UnitType.Protoss_Pylon, true);
    fields.get("addon").set(UnitType.Protoss_Pylon, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Pylon, false);
    fields.get("neutral").set(UnitType.Protoss_Pylon, false);
    fields.get("hero").set(UnitType.Protoss_Pylon, false);
    fields.get("powerup").set(UnitType.Protoss_Pylon, false);
    fields.get("beacon").set(UnitType.Protoss_Pylon, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Pylon, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Pylon, false);
    fields.get("spell").set(UnitType.Protoss_Pylon, false);
    fields.get("producesCreep").set(UnitType.Protoss_Pylon, false);
    fields.get("producesLarva").set(UnitType.Protoss_Pylon, false);
    fields.get("mineralField").set(UnitType.Protoss_Pylon, false);
    fields.get("critter").set(UnitType.Protoss_Pylon, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Pylon, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Pylon, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Pylon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Assimilator() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Assimilator, 157);
    fields.get("race").set(UnitType.Protoss_Assimilator, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Assimilator, new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Assimilator, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Protoss_Assimilator, toMap(UnitType.Protoss_Probe, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Assimilator, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Assimilator, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Assimilator, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Assimilator,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Assimilator, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Assimilator, 450);
    fields.get("maxShields").set(UnitType.Protoss_Assimilator, 450);
    fields.get("maxEnergy").set(UnitType.Protoss_Assimilator, 0);
    fields.get("armor").set(UnitType.Protoss_Assimilator, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Assimilator, 100);
    fields.get("gasPrice").set(UnitType.Protoss_Assimilator, 0);
    fields.get("buildTime").set(UnitType.Protoss_Assimilator, 600);
    fields.get("supplyRequired").set(UnitType.Protoss_Assimilator, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Assimilator, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Assimilator, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Assimilator, 0);
    fields.get("buildScore").set(UnitType.Protoss_Assimilator, 50);
    fields.get("destroyScore").set(UnitType.Protoss_Assimilator, 150);
    fields.get("size").set(UnitType.Protoss_Assimilator, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Assimilator, 4);
    fields.get("tileHeight").set(UnitType.Protoss_Assimilator, 2);
    fields.get("dimensionLeft").set(UnitType.Protoss_Assimilator, 48);
    fields.get("dimensionUp").set(UnitType.Protoss_Assimilator, 32);
    fields.get("dimensionRight").set(UnitType.Protoss_Assimilator, 48);
    fields.get("dimensionDown").set(UnitType.Protoss_Assimilator, 24);
    fields.get("width").set(UnitType.Protoss_Assimilator, 97);
    fields.get("height").set(UnitType.Protoss_Assimilator, 57);
    fields.get("seekRange").set(UnitType.Protoss_Assimilator, 0);
    fields.get("sightRange").set(UnitType.Protoss_Assimilator, 320);
    fields.get("groundWeapon").set(UnitType.Protoss_Assimilator, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Assimilator, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Assimilator, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Assimilator, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Assimilator, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Assimilator, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Assimilator, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Assimilator, 0);
    fields.get("canProduce").set(UnitType.Protoss_Assimilator, false);
    fields.get("canAttack").set(UnitType.Protoss_Assimilator, false);
    fields.get("canMove").set(UnitType.Protoss_Assimilator, false);
    fields.get("flyer").set(UnitType.Protoss_Assimilator, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Assimilator, false);
    fields.get("spellcaster").set(UnitType.Protoss_Assimilator, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Assimilator, false);
    fields.get("invincible").set(UnitType.Protoss_Assimilator, false);
    fields.get("organic").set(UnitType.Protoss_Assimilator, false);
    fields.get("mechanical").set(UnitType.Protoss_Assimilator, true);
    fields.get("robotic").set(UnitType.Protoss_Assimilator, false);
    fields.get("detector").set(UnitType.Protoss_Assimilator, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Assimilator, true);
    fields.get("resourceDepot").set(UnitType.Protoss_Assimilator, false);
    fields.get("refinery").set(UnitType.Protoss_Assimilator, true);
    fields.get("worker").set(UnitType.Protoss_Assimilator, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Assimilator, false);
    fields.get("requiresCreep").set(UnitType.Protoss_Assimilator, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Assimilator, false);
    fields.get("burrowable").set(UnitType.Protoss_Assimilator, false);
    fields.get("cloakable").set(UnitType.Protoss_Assimilator, false);
    fields.get("building").set(UnitType.Protoss_Assimilator, true);
    fields.get("addon").set(UnitType.Protoss_Assimilator, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Assimilator, false);
    fields.get("neutral").set(UnitType.Protoss_Assimilator, false);
    fields.get("hero").set(UnitType.Protoss_Assimilator, false);
    fields.get("powerup").set(UnitType.Protoss_Assimilator, false);
    fields.get("beacon").set(UnitType.Protoss_Assimilator, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Assimilator, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Assimilator, false);
    fields.get("spell").set(UnitType.Protoss_Assimilator, false);
    fields.get("producesCreep").set(UnitType.Protoss_Assimilator, false);
    fields.get("producesLarva").set(UnitType.Protoss_Assimilator, false);
    fields.get("mineralField").set(UnitType.Protoss_Assimilator, false);
    fields.get("critter").set(UnitType.Protoss_Assimilator, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Assimilator, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Assimilator, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Assimilator, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unused_Protoss1() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Protoss1, 158);
    fields.get("race").set(UnitType.Unused_Protoss1, null);
    fields.get("whatBuilds").set(UnitType.Unused_Protoss1, null);
    fields.get("buildsWhat").set(UnitType.Unused_Protoss1, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Protoss1, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Protoss1, null);
    fields.get("cloakingTech").set(UnitType.Unused_Protoss1, null);
    fields.get("abilities").set(UnitType.Unused_Protoss1, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Unused_Protoss1, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Protoss1, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Protoss1, 0);
    fields.get("maxShields").set(UnitType.Unused_Protoss1, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Protoss1, 0);
    fields.get("armor").set(UnitType.Unused_Protoss1, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Protoss1, 0);
    fields.get("gasPrice").set(UnitType.Unused_Protoss1, 0);
    fields.get("buildTime").set(UnitType.Unused_Protoss1, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Protoss1, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Protoss1, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Protoss1, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Protoss1, 0);
    fields.get("buildScore").set(UnitType.Unused_Protoss1, 0);
    fields.get("destroyScore").set(UnitType.Unused_Protoss1, 0);
    fields.get("size").set(UnitType.Unused_Protoss1, null);
    fields.get("tileWidth").set(UnitType.Unused_Protoss1, 0);
    fields.get("tileHeight").set(UnitType.Unused_Protoss1, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Protoss1, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Protoss1, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Protoss1, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Protoss1, 0);
    fields.get("width").set(UnitType.Unused_Protoss1, 0);
    fields.get("height").set(UnitType.Unused_Protoss1, 0);
    fields.get("seekRange").set(UnitType.Unused_Protoss1, 0);
    fields.get("sightRange").set(UnitType.Unused_Protoss1, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Protoss1, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Protoss1, 0);
    fields.get("airWeapon").set(UnitType.Unused_Protoss1, null);
    fields.get("maxAirHits").set(UnitType.Unused_Protoss1, 0);
    fields.get("topSpeed").set(UnitType.Unused_Protoss1, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Protoss1, 0);
    fields.get("haltDistance").set(UnitType.Unused_Protoss1, 0);
    fields.get("turnRadius").set(UnitType.Unused_Protoss1, 0);
    fields.get("canProduce").set(UnitType.Unused_Protoss1, false);
    fields.get("canAttack").set(UnitType.Unused_Protoss1, false);
    fields.get("canMove").set(UnitType.Unused_Protoss1, false);
    fields.get("flyer").set(UnitType.Unused_Protoss1, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Protoss1, false);
    fields.get("spellcaster").set(UnitType.Unused_Protoss1, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Protoss1, false);
    fields.get("invincible").set(UnitType.Unused_Protoss1, false);
    fields.get("organic").set(UnitType.Unused_Protoss1, false);
    fields.get("mechanical").set(UnitType.Unused_Protoss1, false);
    fields.get("robotic").set(UnitType.Unused_Protoss1, false);
    fields.get("detector").set(UnitType.Unused_Protoss1, false);
    fields.get("resourceContainer").set(UnitType.Unused_Protoss1, false);
    fields.get("resourceDepot").set(UnitType.Unused_Protoss1, false);
    fields.get("refinery").set(UnitType.Unused_Protoss1, false);
    fields.get("worker").set(UnitType.Unused_Protoss1, false);
    fields.get("requiresPsi").set(UnitType.Unused_Protoss1, false);
    fields.get("requiresCreep").set(UnitType.Unused_Protoss1, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Protoss1, false);
    fields.get("burrowable").set(UnitType.Unused_Protoss1, false);
    fields.get("cloakable").set(UnitType.Unused_Protoss1, false);
    fields.get("building").set(UnitType.Unused_Protoss1, false);
    fields.get("addon").set(UnitType.Unused_Protoss1, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Protoss1, false);
    fields.get("neutral").set(UnitType.Unused_Protoss1, false);
    fields.get("hero").set(UnitType.Unused_Protoss1, false);
    fields.get("powerup").set(UnitType.Unused_Protoss1, false);
    fields.get("beacon").set(UnitType.Unused_Protoss1, false);
    fields.get("flagBeacon").set(UnitType.Unused_Protoss1, false);
    fields.get("specialBuilding").set(UnitType.Unused_Protoss1, false);
    fields.get("spell").set(UnitType.Unused_Protoss1, false);
    fields.get("producesCreep").set(UnitType.Unused_Protoss1, false);
    fields.get("producesLarva").set(UnitType.Unused_Protoss1, false);
    fields.get("mineralField").set(UnitType.Unused_Protoss1, false);
    fields.get("critter").set(UnitType.Unused_Protoss1, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Protoss1, false);
    fields.get("researchesWhat").set(UnitType.Unused_Protoss1, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Unused_Protoss1, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Observatory() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Observatory, 159);
    fields.get("race").set(UnitType.Protoss_Observatory, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Observatory, new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Observatory, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Observatory,
            toMap(UnitType.Protoss_Probe, 1, UnitType.Protoss_Robotics_Facility, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Observatory, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Observatory, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Observatory, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Observatory,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Observatory, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Observatory, 250);
    fields.get("maxShields").set(UnitType.Protoss_Observatory, 250);
    fields.get("maxEnergy").set(UnitType.Protoss_Observatory, 0);
    fields.get("armor").set(UnitType.Protoss_Observatory, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Observatory, 50);
    fields.get("gasPrice").set(UnitType.Protoss_Observatory, 100);
    fields.get("buildTime").set(UnitType.Protoss_Observatory, 450);
    fields.get("supplyRequired").set(UnitType.Protoss_Observatory, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Observatory, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Observatory, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Observatory, 0);
    fields.get("buildScore").set(UnitType.Protoss_Observatory, 175);
    fields.get("destroyScore").set(UnitType.Protoss_Observatory, 525);
    fields.get("size").set(UnitType.Protoss_Observatory, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Observatory, 3);
    fields.get("tileHeight").set(UnitType.Protoss_Observatory, 2);
    fields.get("dimensionLeft").set(UnitType.Protoss_Observatory, 44);
    fields.get("dimensionUp").set(UnitType.Protoss_Observatory, 16);
    fields.get("dimensionRight").set(UnitType.Protoss_Observatory, 44);
    fields.get("dimensionDown").set(UnitType.Protoss_Observatory, 28);
    fields.get("width").set(UnitType.Protoss_Observatory, 89);
    fields.get("height").set(UnitType.Protoss_Observatory, 45);
    fields.get("seekRange").set(UnitType.Protoss_Observatory, 0);
    fields.get("sightRange").set(UnitType.Protoss_Observatory, 320);
    fields.get("groundWeapon").set(UnitType.Protoss_Observatory, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Observatory, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Observatory, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Observatory, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Observatory, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Observatory, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Observatory, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Observatory, 0);
    fields.get("canProduce").set(UnitType.Protoss_Observatory, false);
    fields.get("canAttack").set(UnitType.Protoss_Observatory, false);
    fields.get("canMove").set(UnitType.Protoss_Observatory, false);
    fields.get("flyer").set(UnitType.Protoss_Observatory, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Observatory, false);
    fields.get("spellcaster").set(UnitType.Protoss_Observatory, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Observatory, false);
    fields.get("invincible").set(UnitType.Protoss_Observatory, false);
    fields.get("organic").set(UnitType.Protoss_Observatory, false);
    fields.get("mechanical").set(UnitType.Protoss_Observatory, true);
    fields.get("robotic").set(UnitType.Protoss_Observatory, false);
    fields.get("detector").set(UnitType.Protoss_Observatory, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Observatory, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Observatory, false);
    fields.get("refinery").set(UnitType.Protoss_Observatory, false);
    fields.get("worker").set(UnitType.Protoss_Observatory, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Observatory, true);
    fields.get("requiresCreep").set(UnitType.Protoss_Observatory, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Observatory, false);
    fields.get("burrowable").set(UnitType.Protoss_Observatory, false);
    fields.get("cloakable").set(UnitType.Protoss_Observatory, false);
    fields.get("building").set(UnitType.Protoss_Observatory, true);
    fields.get("addon").set(UnitType.Protoss_Observatory, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Observatory, false);
    fields.get("neutral").set(UnitType.Protoss_Observatory, false);
    fields.get("hero").set(UnitType.Protoss_Observatory, false);
    fields.get("powerup").set(UnitType.Protoss_Observatory, false);
    fields.get("beacon").set(UnitType.Protoss_Observatory, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Observatory, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Observatory, false);
    fields.get("spell").set(UnitType.Protoss_Observatory, false);
    fields.get("producesCreep").set(UnitType.Protoss_Observatory, false);
    fields.get("producesLarva").set(UnitType.Protoss_Observatory, false);
    fields.get("mineralField").set(UnitType.Protoss_Observatory, false);
    fields.get("critter").set(UnitType.Protoss_Observatory, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Observatory, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Observatory, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Protoss_Observatory,
            new ArrayList(Arrays.asList(UpgradeType.Sensor_Array, UpgradeType.Gravitic_Boosters)));
  }

  private static void initializeUnitType_Protoss_Gateway() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Gateway, 160);
    fields.get("race").set(UnitType.Protoss_Gateway, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Gateway, new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Protoss_Gateway,
            new ArrayList(
                Arrays.asList(
                    UnitType.Protoss_Zealot,
                    UnitType.Protoss_Dragoon,
                    UnitType.Protoss_High_Templar,
                    UnitType.Protoss_Dark_Templar)));
    fields
        .get("requiredUnits")
        .set(UnitType.Protoss_Gateway, toMap(UnitType.Protoss_Probe, 1, UnitType.Protoss_Nexus, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Gateway, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Gateway, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Gateway, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Gateway,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Gateway, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Gateway, 500);
    fields.get("maxShields").set(UnitType.Protoss_Gateway, 500);
    fields.get("maxEnergy").set(UnitType.Protoss_Gateway, 0);
    fields.get("armor").set(UnitType.Protoss_Gateway, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Gateway, 150);
    fields.get("gasPrice").set(UnitType.Protoss_Gateway, 0);
    fields.get("buildTime").set(UnitType.Protoss_Gateway, 900);
    fields.get("supplyRequired").set(UnitType.Protoss_Gateway, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Gateway, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Gateway, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Gateway, 0);
    fields.get("buildScore").set(UnitType.Protoss_Gateway, 75);
    fields.get("destroyScore").set(UnitType.Protoss_Gateway, 225);
    fields.get("size").set(UnitType.Protoss_Gateway, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Gateway, 4);
    fields.get("tileHeight").set(UnitType.Protoss_Gateway, 3);
    fields.get("dimensionLeft").set(UnitType.Protoss_Gateway, 48);
    fields.get("dimensionUp").set(UnitType.Protoss_Gateway, 32);
    fields.get("dimensionRight").set(UnitType.Protoss_Gateway, 48);
    fields.get("dimensionDown").set(UnitType.Protoss_Gateway, 40);
    fields.get("width").set(UnitType.Protoss_Gateway, 97);
    fields.get("height").set(UnitType.Protoss_Gateway, 73);
    fields.get("seekRange").set(UnitType.Protoss_Gateway, 0);
    fields.get("sightRange").set(UnitType.Protoss_Gateway, 320);
    fields.get("groundWeapon").set(UnitType.Protoss_Gateway, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Gateway, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Gateway, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Gateway, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Gateway, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Gateway, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Gateway, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Gateway, 0);
    fields.get("canProduce").set(UnitType.Protoss_Gateway, true);
    fields.get("canAttack").set(UnitType.Protoss_Gateway, false);
    fields.get("canMove").set(UnitType.Protoss_Gateway, false);
    fields.get("flyer").set(UnitType.Protoss_Gateway, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Gateway, false);
    fields.get("spellcaster").set(UnitType.Protoss_Gateway, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Gateway, false);
    fields.get("invincible").set(UnitType.Protoss_Gateway, false);
    fields.get("organic").set(UnitType.Protoss_Gateway, false);
    fields.get("mechanical").set(UnitType.Protoss_Gateway, true);
    fields.get("robotic").set(UnitType.Protoss_Gateway, false);
    fields.get("detector").set(UnitType.Protoss_Gateway, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Gateway, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Gateway, false);
    fields.get("refinery").set(UnitType.Protoss_Gateway, false);
    fields.get("worker").set(UnitType.Protoss_Gateway, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Gateway, true);
    fields.get("requiresCreep").set(UnitType.Protoss_Gateway, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Gateway, false);
    fields.get("burrowable").set(UnitType.Protoss_Gateway, false);
    fields.get("cloakable").set(UnitType.Protoss_Gateway, false);
    fields.get("building").set(UnitType.Protoss_Gateway, true);
    fields.get("addon").set(UnitType.Protoss_Gateway, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Gateway, false);
    fields.get("neutral").set(UnitType.Protoss_Gateway, false);
    fields.get("hero").set(UnitType.Protoss_Gateway, false);
    fields.get("powerup").set(UnitType.Protoss_Gateway, false);
    fields.get("beacon").set(UnitType.Protoss_Gateway, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Gateway, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Gateway, false);
    fields.get("spell").set(UnitType.Protoss_Gateway, false);
    fields.get("producesCreep").set(UnitType.Protoss_Gateway, false);
    fields.get("producesLarva").set(UnitType.Protoss_Gateway, false);
    fields.get("mineralField").set(UnitType.Protoss_Gateway, false);
    fields.get("critter").set(UnitType.Protoss_Gateway, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Gateway, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Gateway, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Gateway, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unused_Protoss2() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Protoss2, 161);
    fields.get("race").set(UnitType.Unused_Protoss2, null);
    fields.get("whatBuilds").set(UnitType.Unused_Protoss2, null);
    fields.get("buildsWhat").set(UnitType.Unused_Protoss2, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Protoss2, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Protoss2, null);
    fields.get("cloakingTech").set(UnitType.Unused_Protoss2, null);
    fields.get("abilities").set(UnitType.Unused_Protoss2, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Unused_Protoss2, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Protoss2, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Protoss2, 0);
    fields.get("maxShields").set(UnitType.Unused_Protoss2, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Protoss2, 0);
    fields.get("armor").set(UnitType.Unused_Protoss2, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Protoss2, 0);
    fields.get("gasPrice").set(UnitType.Unused_Protoss2, 0);
    fields.get("buildTime").set(UnitType.Unused_Protoss2, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Protoss2, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Protoss2, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Protoss2, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Protoss2, 0);
    fields.get("buildScore").set(UnitType.Unused_Protoss2, 0);
    fields.get("destroyScore").set(UnitType.Unused_Protoss2, 0);
    fields.get("size").set(UnitType.Unused_Protoss2, null);
    fields.get("tileWidth").set(UnitType.Unused_Protoss2, 0);
    fields.get("tileHeight").set(UnitType.Unused_Protoss2, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Protoss2, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Protoss2, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Protoss2, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Protoss2, 0);
    fields.get("width").set(UnitType.Unused_Protoss2, 0);
    fields.get("height").set(UnitType.Unused_Protoss2, 0);
    fields.get("seekRange").set(UnitType.Unused_Protoss2, 0);
    fields.get("sightRange").set(UnitType.Unused_Protoss2, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Protoss2, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Protoss2, 0);
    fields.get("airWeapon").set(UnitType.Unused_Protoss2, null);
    fields.get("maxAirHits").set(UnitType.Unused_Protoss2, 0);
    fields.get("topSpeed").set(UnitType.Unused_Protoss2, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Protoss2, 0);
    fields.get("haltDistance").set(UnitType.Unused_Protoss2, 0);
    fields.get("turnRadius").set(UnitType.Unused_Protoss2, 0);
    fields.get("canProduce").set(UnitType.Unused_Protoss2, false);
    fields.get("canAttack").set(UnitType.Unused_Protoss2, false);
    fields.get("canMove").set(UnitType.Unused_Protoss2, false);
    fields.get("flyer").set(UnitType.Unused_Protoss2, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Protoss2, false);
    fields.get("spellcaster").set(UnitType.Unused_Protoss2, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Protoss2, false);
    fields.get("invincible").set(UnitType.Unused_Protoss2, false);
    fields.get("organic").set(UnitType.Unused_Protoss2, false);
    fields.get("mechanical").set(UnitType.Unused_Protoss2, false);
    fields.get("robotic").set(UnitType.Unused_Protoss2, false);
    fields.get("detector").set(UnitType.Unused_Protoss2, false);
    fields.get("resourceContainer").set(UnitType.Unused_Protoss2, false);
    fields.get("resourceDepot").set(UnitType.Unused_Protoss2, false);
    fields.get("refinery").set(UnitType.Unused_Protoss2, false);
    fields.get("worker").set(UnitType.Unused_Protoss2, false);
    fields.get("requiresPsi").set(UnitType.Unused_Protoss2, false);
    fields.get("requiresCreep").set(UnitType.Unused_Protoss2, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Protoss2, false);
    fields.get("burrowable").set(UnitType.Unused_Protoss2, false);
    fields.get("cloakable").set(UnitType.Unused_Protoss2, false);
    fields.get("building").set(UnitType.Unused_Protoss2, false);
    fields.get("addon").set(UnitType.Unused_Protoss2, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Protoss2, false);
    fields.get("neutral").set(UnitType.Unused_Protoss2, false);
    fields.get("hero").set(UnitType.Unused_Protoss2, false);
    fields.get("powerup").set(UnitType.Unused_Protoss2, false);
    fields.get("beacon").set(UnitType.Unused_Protoss2, false);
    fields.get("flagBeacon").set(UnitType.Unused_Protoss2, false);
    fields.get("specialBuilding").set(UnitType.Unused_Protoss2, false);
    fields.get("spell").set(UnitType.Unused_Protoss2, false);
    fields.get("producesCreep").set(UnitType.Unused_Protoss2, false);
    fields.get("producesLarva").set(UnitType.Unused_Protoss2, false);
    fields.get("mineralField").set(UnitType.Unused_Protoss2, false);
    fields.get("critter").set(UnitType.Unused_Protoss2, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Protoss2, false);
    fields.get("researchesWhat").set(UnitType.Unused_Protoss2, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Unused_Protoss2, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Photon_Cannon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Photon_Cannon, 162);
    fields.get("race").set(UnitType.Protoss_Photon_Cannon, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Photon_Cannon, new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Photon_Cannon, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Photon_Cannon,
            toMap(UnitType.Protoss_Probe, 1, UnitType.Protoss_Forge, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Photon_Cannon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Photon_Cannon, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Photon_Cannon, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Photon_Cannon,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Photon_Cannon, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Photon_Cannon, 100);
    fields.get("maxShields").set(UnitType.Protoss_Photon_Cannon, 100);
    fields.get("maxEnergy").set(UnitType.Protoss_Photon_Cannon, 0);
    fields.get("armor").set(UnitType.Protoss_Photon_Cannon, 0);
    fields.get("mineralPrice").set(UnitType.Protoss_Photon_Cannon, 150);
    fields.get("gasPrice").set(UnitType.Protoss_Photon_Cannon, 0);
    fields.get("buildTime").set(UnitType.Protoss_Photon_Cannon, 750);
    fields.get("supplyRequired").set(UnitType.Protoss_Photon_Cannon, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Photon_Cannon, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Photon_Cannon, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Photon_Cannon, 0);
    fields.get("buildScore").set(UnitType.Protoss_Photon_Cannon, 100);
    fields.get("destroyScore").set(UnitType.Protoss_Photon_Cannon, 300);
    fields.get("size").set(UnitType.Protoss_Photon_Cannon, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Photon_Cannon, 2);
    fields.get("tileHeight").set(UnitType.Protoss_Photon_Cannon, 2);
    fields.get("dimensionLeft").set(UnitType.Protoss_Photon_Cannon, 20);
    fields.get("dimensionUp").set(UnitType.Protoss_Photon_Cannon, 16);
    fields.get("dimensionRight").set(UnitType.Protoss_Photon_Cannon, 20);
    fields.get("dimensionDown").set(UnitType.Protoss_Photon_Cannon, 16);
    fields.get("width").set(UnitType.Protoss_Photon_Cannon, 41);
    fields.get("height").set(UnitType.Protoss_Photon_Cannon, 33);
    fields.get("seekRange").set(UnitType.Protoss_Photon_Cannon, 0);
    fields.get("sightRange").set(UnitType.Protoss_Photon_Cannon, 352);
    fields.get("groundWeapon").set(UnitType.Protoss_Photon_Cannon, WeaponType.STS_Photon_Cannon);
    fields.get("maxGroundHits").set(UnitType.Protoss_Photon_Cannon, 1);
    fields.get("airWeapon").set(UnitType.Protoss_Photon_Cannon, WeaponType.STA_Photon_Cannon);
    fields.get("maxAirHits").set(UnitType.Protoss_Photon_Cannon, 1);
    fields.get("topSpeed").set(UnitType.Protoss_Photon_Cannon, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Photon_Cannon, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Photon_Cannon, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Photon_Cannon, 0);
    fields.get("canProduce").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("canAttack").set(UnitType.Protoss_Photon_Cannon, true);
    fields.get("canMove").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("flyer").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("spellcaster").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("invincible").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("organic").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("mechanical").set(UnitType.Protoss_Photon_Cannon, true);
    fields.get("robotic").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("detector").set(UnitType.Protoss_Photon_Cannon, true);
    fields.get("resourceContainer").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("refinery").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("worker").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Photon_Cannon, true);
    fields.get("requiresCreep").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("burrowable").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("cloakable").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("building").set(UnitType.Protoss_Photon_Cannon, true);
    fields.get("addon").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("neutral").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("hero").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("powerup").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("beacon").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("spell").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("producesCreep").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("producesLarva").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("mineralField").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("critter").set(UnitType.Protoss_Photon_Cannon, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Photon_Cannon, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Protoss_Photon_Cannon, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Photon_Cannon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Citadel_of_Adun() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Citadel_of_Adun, 163);
    fields.get("race").set(UnitType.Protoss_Citadel_of_Adun, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Citadel_of_Adun, new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Citadel_of_Adun, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Citadel_of_Adun,
            toMap(UnitType.Protoss_Probe, 1, UnitType.Protoss_Cybernetics_Core, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Citadel_of_Adun, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Citadel_of_Adun, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Citadel_of_Adun, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Citadel_of_Adun,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Citadel_of_Adun, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Citadel_of_Adun, 450);
    fields.get("maxShields").set(UnitType.Protoss_Citadel_of_Adun, 450);
    fields.get("maxEnergy").set(UnitType.Protoss_Citadel_of_Adun, 0);
    fields.get("armor").set(UnitType.Protoss_Citadel_of_Adun, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Citadel_of_Adun, 150);
    fields.get("gasPrice").set(UnitType.Protoss_Citadel_of_Adun, 100);
    fields.get("buildTime").set(UnitType.Protoss_Citadel_of_Adun, 900);
    fields.get("supplyRequired").set(UnitType.Protoss_Citadel_of_Adun, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Citadel_of_Adun, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Citadel_of_Adun, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Citadel_of_Adun, 0);
    fields.get("buildScore").set(UnitType.Protoss_Citadel_of_Adun, 200);
    fields.get("destroyScore").set(UnitType.Protoss_Citadel_of_Adun, 600);
    fields.get("size").set(UnitType.Protoss_Citadel_of_Adun, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Citadel_of_Adun, 3);
    fields.get("tileHeight").set(UnitType.Protoss_Citadel_of_Adun, 2);
    fields.get("dimensionLeft").set(UnitType.Protoss_Citadel_of_Adun, 24);
    fields.get("dimensionUp").set(UnitType.Protoss_Citadel_of_Adun, 24);
    fields.get("dimensionRight").set(UnitType.Protoss_Citadel_of_Adun, 40);
    fields.get("dimensionDown").set(UnitType.Protoss_Citadel_of_Adun, 24);
    fields.get("width").set(UnitType.Protoss_Citadel_of_Adun, 65);
    fields.get("height").set(UnitType.Protoss_Citadel_of_Adun, 49);
    fields.get("seekRange").set(UnitType.Protoss_Citadel_of_Adun, 0);
    fields.get("sightRange").set(UnitType.Protoss_Citadel_of_Adun, 320);
    fields.get("groundWeapon").set(UnitType.Protoss_Citadel_of_Adun, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Citadel_of_Adun, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Citadel_of_Adun, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Citadel_of_Adun, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Citadel_of_Adun, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Citadel_of_Adun, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Citadel_of_Adun, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Citadel_of_Adun, 0);
    fields.get("canProduce").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("canAttack").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("canMove").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("flyer").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("spellcaster").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("invincible").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("organic").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("mechanical").set(UnitType.Protoss_Citadel_of_Adun, true);
    fields.get("robotic").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("detector").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("refinery").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("worker").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Citadel_of_Adun, true);
    fields.get("requiresCreep").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("burrowable").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("cloakable").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("building").set(UnitType.Protoss_Citadel_of_Adun, true);
    fields.get("addon").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("neutral").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("hero").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("powerup").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("beacon").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("spell").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("producesCreep").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("producesLarva").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("mineralField").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("critter").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Citadel_of_Adun, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Protoss_Citadel_of_Adun, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Protoss_Citadel_of_Adun,
            new ArrayList(Arrays.asList(UpgradeType.Leg_Enhancements)));
  }

  private static void initializeUnitType_Protoss_Cybernetics_Core() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Cybernetics_Core, 164);
    fields.get("race").set(UnitType.Protoss_Cybernetics_Core, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Cybernetics_Core, new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Cybernetics_Core, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Cybernetics_Core,
            toMap(UnitType.Protoss_Probe, 1, UnitType.Protoss_Gateway, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Cybernetics_Core, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Cybernetics_Core, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Cybernetics_Core, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Cybernetics_Core,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Cybernetics_Core, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Cybernetics_Core, 500);
    fields.get("maxShields").set(UnitType.Protoss_Cybernetics_Core, 500);
    fields.get("maxEnergy").set(UnitType.Protoss_Cybernetics_Core, 0);
    fields.get("armor").set(UnitType.Protoss_Cybernetics_Core, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Cybernetics_Core, 200);
    fields.get("gasPrice").set(UnitType.Protoss_Cybernetics_Core, 0);
    fields.get("buildTime").set(UnitType.Protoss_Cybernetics_Core, 900);
    fields.get("supplyRequired").set(UnitType.Protoss_Cybernetics_Core, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Cybernetics_Core, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Cybernetics_Core, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Cybernetics_Core, 0);
    fields.get("buildScore").set(UnitType.Protoss_Cybernetics_Core, 100);
    fields.get("destroyScore").set(UnitType.Protoss_Cybernetics_Core, 300);
    fields.get("size").set(UnitType.Protoss_Cybernetics_Core, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Cybernetics_Core, 3);
    fields.get("tileHeight").set(UnitType.Protoss_Cybernetics_Core, 2);
    fields.get("dimensionLeft").set(UnitType.Protoss_Cybernetics_Core, 40);
    fields.get("dimensionUp").set(UnitType.Protoss_Cybernetics_Core, 24);
    fields.get("dimensionRight").set(UnitType.Protoss_Cybernetics_Core, 40);
    fields.get("dimensionDown").set(UnitType.Protoss_Cybernetics_Core, 24);
    fields.get("width").set(UnitType.Protoss_Cybernetics_Core, 81);
    fields.get("height").set(UnitType.Protoss_Cybernetics_Core, 49);
    fields.get("seekRange").set(UnitType.Protoss_Cybernetics_Core, 0);
    fields.get("sightRange").set(UnitType.Protoss_Cybernetics_Core, 320);
    fields.get("groundWeapon").set(UnitType.Protoss_Cybernetics_Core, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Cybernetics_Core, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Cybernetics_Core, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Cybernetics_Core, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Cybernetics_Core, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Cybernetics_Core, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Cybernetics_Core, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Cybernetics_Core, 0);
    fields.get("canProduce").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("canAttack").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("canMove").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("flyer").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("spellcaster").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("invincible").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("organic").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("mechanical").set(UnitType.Protoss_Cybernetics_Core, true);
    fields.get("robotic").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("detector").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("refinery").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("worker").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Cybernetics_Core, true);
    fields.get("requiresCreep").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("burrowable").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("cloakable").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("building").set(UnitType.Protoss_Cybernetics_Core, true);
    fields.get("addon").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("neutral").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("hero").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("powerup").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("beacon").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("spell").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("producesCreep").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("producesLarva").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("mineralField").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("critter").set(UnitType.Protoss_Cybernetics_Core, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Cybernetics_Core, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Protoss_Cybernetics_Core, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Protoss_Cybernetics_Core,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Air_Weapons,
                    UpgradeType.Protoss_Air_Armor,
                    UpgradeType.Singularity_Charge)));
  }

  private static void initializeUnitType_Protoss_Templar_Archives() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Templar_Archives, 165);
    fields.get("race").set(UnitType.Protoss_Templar_Archives, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Templar_Archives, new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Templar_Archives, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Templar_Archives,
            toMap(UnitType.Protoss_Probe, 1, UnitType.Protoss_Citadel_of_Adun, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Templar_Archives, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Templar_Archives, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Templar_Archives, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Templar_Archives,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Templar_Archives, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Templar_Archives, 500);
    fields.get("maxShields").set(UnitType.Protoss_Templar_Archives, 500);
    fields.get("maxEnergy").set(UnitType.Protoss_Templar_Archives, 0);
    fields.get("armor").set(UnitType.Protoss_Templar_Archives, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Templar_Archives, 150);
    fields.get("gasPrice").set(UnitType.Protoss_Templar_Archives, 200);
    fields.get("buildTime").set(UnitType.Protoss_Templar_Archives, 900);
    fields.get("supplyRequired").set(UnitType.Protoss_Templar_Archives, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Templar_Archives, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Templar_Archives, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Templar_Archives, 0);
    fields.get("buildScore").set(UnitType.Protoss_Templar_Archives, 250);
    fields.get("destroyScore").set(UnitType.Protoss_Templar_Archives, 750);
    fields.get("size").set(UnitType.Protoss_Templar_Archives, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Templar_Archives, 3);
    fields.get("tileHeight").set(UnitType.Protoss_Templar_Archives, 2);
    fields.get("dimensionLeft").set(UnitType.Protoss_Templar_Archives, 32);
    fields.get("dimensionUp").set(UnitType.Protoss_Templar_Archives, 24);
    fields.get("dimensionRight").set(UnitType.Protoss_Templar_Archives, 32);
    fields.get("dimensionDown").set(UnitType.Protoss_Templar_Archives, 24);
    fields.get("width").set(UnitType.Protoss_Templar_Archives, 65);
    fields.get("height").set(UnitType.Protoss_Templar_Archives, 49);
    fields.get("seekRange").set(UnitType.Protoss_Templar_Archives, 0);
    fields.get("sightRange").set(UnitType.Protoss_Templar_Archives, 320);
    fields.get("groundWeapon").set(UnitType.Protoss_Templar_Archives, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Templar_Archives, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Templar_Archives, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Templar_Archives, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Templar_Archives, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Templar_Archives, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Templar_Archives, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Templar_Archives, 0);
    fields.get("canProduce").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("canAttack").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("canMove").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("flyer").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("spellcaster").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("invincible").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("organic").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("mechanical").set(UnitType.Protoss_Templar_Archives, true);
    fields.get("robotic").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("detector").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("refinery").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("worker").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Templar_Archives, true);
    fields.get("requiresCreep").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("burrowable").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("cloakable").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("building").set(UnitType.Protoss_Templar_Archives, true);
    fields.get("addon").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("neutral").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("hero").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("powerup").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("beacon").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("spell").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("producesCreep").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("producesLarva").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("mineralField").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("critter").set(UnitType.Protoss_Templar_Archives, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Templar_Archives, false);
    fields
        .get("researchesWhat")
        .set(
            UnitType.Protoss_Templar_Archives,
            new ArrayList(
                Arrays.asList(
                    TechType.Mind_Control,
                    TechType.Psionic_Storm,
                    TechType.Hallucination,
                    TechType.Maelstrom)));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Protoss_Templar_Archives,
            new ArrayList(Arrays.asList(UpgradeType.Khaydarin_Amulet, UpgradeType.Argus_Talisman)));
  }

  private static void initializeUnitType_Protoss_Forge() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Forge, 166);
    fields.get("race").set(UnitType.Protoss_Forge, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Forge, new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Forge, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(UnitType.Protoss_Forge, toMap(UnitType.Protoss_Probe, 1, UnitType.Protoss_Nexus, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Forge, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Forge, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Forge, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Forge,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Forge, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Forge, 550);
    fields.get("maxShields").set(UnitType.Protoss_Forge, 550);
    fields.get("maxEnergy").set(UnitType.Protoss_Forge, 0);
    fields.get("armor").set(UnitType.Protoss_Forge, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Forge, 150);
    fields.get("gasPrice").set(UnitType.Protoss_Forge, 0);
    fields.get("buildTime").set(UnitType.Protoss_Forge, 600);
    fields.get("supplyRequired").set(UnitType.Protoss_Forge, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Forge, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Forge, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Forge, 0);
    fields.get("buildScore").set(UnitType.Protoss_Forge, 100);
    fields.get("destroyScore").set(UnitType.Protoss_Forge, 300);
    fields.get("size").set(UnitType.Protoss_Forge, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Forge, 3);
    fields.get("tileHeight").set(UnitType.Protoss_Forge, 2);
    fields.get("dimensionLeft").set(UnitType.Protoss_Forge, 36);
    fields.get("dimensionUp").set(UnitType.Protoss_Forge, 24);
    fields.get("dimensionRight").set(UnitType.Protoss_Forge, 36);
    fields.get("dimensionDown").set(UnitType.Protoss_Forge, 20);
    fields.get("width").set(UnitType.Protoss_Forge, 73);
    fields.get("height").set(UnitType.Protoss_Forge, 45);
    fields.get("seekRange").set(UnitType.Protoss_Forge, 0);
    fields.get("sightRange").set(UnitType.Protoss_Forge, 320);
    fields.get("groundWeapon").set(UnitType.Protoss_Forge, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Forge, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Forge, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Forge, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Forge, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Forge, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Forge, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Forge, 0);
    fields.get("canProduce").set(UnitType.Protoss_Forge, false);
    fields.get("canAttack").set(UnitType.Protoss_Forge, false);
    fields.get("canMove").set(UnitType.Protoss_Forge, false);
    fields.get("flyer").set(UnitType.Protoss_Forge, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Forge, false);
    fields.get("spellcaster").set(UnitType.Protoss_Forge, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Forge, false);
    fields.get("invincible").set(UnitType.Protoss_Forge, false);
    fields.get("organic").set(UnitType.Protoss_Forge, false);
    fields.get("mechanical").set(UnitType.Protoss_Forge, true);
    fields.get("robotic").set(UnitType.Protoss_Forge, false);
    fields.get("detector").set(UnitType.Protoss_Forge, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Forge, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Forge, false);
    fields.get("refinery").set(UnitType.Protoss_Forge, false);
    fields.get("worker").set(UnitType.Protoss_Forge, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Forge, true);
    fields.get("requiresCreep").set(UnitType.Protoss_Forge, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Forge, false);
    fields.get("burrowable").set(UnitType.Protoss_Forge, false);
    fields.get("cloakable").set(UnitType.Protoss_Forge, false);
    fields.get("building").set(UnitType.Protoss_Forge, true);
    fields.get("addon").set(UnitType.Protoss_Forge, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Forge, false);
    fields.get("neutral").set(UnitType.Protoss_Forge, false);
    fields.get("hero").set(UnitType.Protoss_Forge, false);
    fields.get("powerup").set(UnitType.Protoss_Forge, false);
    fields.get("beacon").set(UnitType.Protoss_Forge, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Forge, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Forge, false);
    fields.get("spell").set(UnitType.Protoss_Forge, false);
    fields.get("producesCreep").set(UnitType.Protoss_Forge, false);
    fields.get("producesLarva").set(UnitType.Protoss_Forge, false);
    fields.get("mineralField").set(UnitType.Protoss_Forge, false);
    fields.get("critter").set(UnitType.Protoss_Forge, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Forge, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Forge, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Protoss_Forge,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Protoss_Ground_Weapons,
                    UpgradeType.Protoss_Ground_Armor,
                    UpgradeType.Protoss_Plasma_Shields)));
  }

  private static void initializeUnitType_Protoss_Stargate() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Stargate, 167);
    fields.get("race").set(UnitType.Protoss_Stargate, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Stargate, new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields
        .get("buildsWhat")
        .set(
            UnitType.Protoss_Stargate,
            new ArrayList(
                Arrays.asList(
                    UnitType.Protoss_Scout,
                    UnitType.Protoss_Carrier,
                    UnitType.Protoss_Arbiter,
                    UnitType.Protoss_Corsair)));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Stargate,
            toMap(UnitType.Protoss_Probe, 1, UnitType.Protoss_Cybernetics_Core, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Stargate, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Stargate, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Stargate, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Stargate,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Stargate, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Stargate, 600);
    fields.get("maxShields").set(UnitType.Protoss_Stargate, 600);
    fields.get("maxEnergy").set(UnitType.Protoss_Stargate, 0);
    fields.get("armor").set(UnitType.Protoss_Stargate, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Stargate, 150);
    fields.get("gasPrice").set(UnitType.Protoss_Stargate, 150);
    fields.get("buildTime").set(UnitType.Protoss_Stargate, 1050);
    fields.get("supplyRequired").set(UnitType.Protoss_Stargate, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Stargate, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Stargate, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Stargate, 0);
    fields.get("buildScore").set(UnitType.Protoss_Stargate, 300);
    fields.get("destroyScore").set(UnitType.Protoss_Stargate, 900);
    fields.get("size").set(UnitType.Protoss_Stargate, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Stargate, 4);
    fields.get("tileHeight").set(UnitType.Protoss_Stargate, 3);
    fields.get("dimensionLeft").set(UnitType.Protoss_Stargate, 48);
    fields.get("dimensionUp").set(UnitType.Protoss_Stargate, 40);
    fields.get("dimensionRight").set(UnitType.Protoss_Stargate, 48);
    fields.get("dimensionDown").set(UnitType.Protoss_Stargate, 32);
    fields.get("width").set(UnitType.Protoss_Stargate, 97);
    fields.get("height").set(UnitType.Protoss_Stargate, 73);
    fields.get("seekRange").set(UnitType.Protoss_Stargate, 0);
    fields.get("sightRange").set(UnitType.Protoss_Stargate, 320);
    fields.get("groundWeapon").set(UnitType.Protoss_Stargate, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Stargate, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Stargate, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Stargate, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Stargate, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Stargate, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Stargate, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Stargate, 0);
    fields.get("canProduce").set(UnitType.Protoss_Stargate, true);
    fields.get("canAttack").set(UnitType.Protoss_Stargate, false);
    fields.get("canMove").set(UnitType.Protoss_Stargate, false);
    fields.get("flyer").set(UnitType.Protoss_Stargate, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Stargate, false);
    fields.get("spellcaster").set(UnitType.Protoss_Stargate, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Stargate, false);
    fields.get("invincible").set(UnitType.Protoss_Stargate, false);
    fields.get("organic").set(UnitType.Protoss_Stargate, false);
    fields.get("mechanical").set(UnitType.Protoss_Stargate, true);
    fields.get("robotic").set(UnitType.Protoss_Stargate, false);
    fields.get("detector").set(UnitType.Protoss_Stargate, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Stargate, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Stargate, false);
    fields.get("refinery").set(UnitType.Protoss_Stargate, false);
    fields.get("worker").set(UnitType.Protoss_Stargate, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Stargate, true);
    fields.get("requiresCreep").set(UnitType.Protoss_Stargate, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Stargate, false);
    fields.get("burrowable").set(UnitType.Protoss_Stargate, false);
    fields.get("cloakable").set(UnitType.Protoss_Stargate, false);
    fields.get("building").set(UnitType.Protoss_Stargate, true);
    fields.get("addon").set(UnitType.Protoss_Stargate, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Stargate, false);
    fields.get("neutral").set(UnitType.Protoss_Stargate, false);
    fields.get("hero").set(UnitType.Protoss_Stargate, false);
    fields.get("powerup").set(UnitType.Protoss_Stargate, false);
    fields.get("beacon").set(UnitType.Protoss_Stargate, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Stargate, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Stargate, false);
    fields.get("spell").set(UnitType.Protoss_Stargate, false);
    fields.get("producesCreep").set(UnitType.Protoss_Stargate, false);
    fields.get("producesLarva").set(UnitType.Protoss_Stargate, false);
    fields.get("mineralField").set(UnitType.Protoss_Stargate, false);
    fields.get("critter").set(UnitType.Protoss_Stargate, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Stargate, false);
    fields.get("researchesWhat").set(UnitType.Protoss_Stargate, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Stargate, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Stasis_Cell_Prison() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Stasis_Cell_Prison, 168);
    fields.get("race").set(UnitType.Special_Stasis_Cell_Prison, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Stasis_Cell_Prison, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Special_Stasis_Cell_Prison, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Stasis_Cell_Prison, toMap());
    fields.get("requiredTech").set(UnitType.Special_Stasis_Cell_Prison, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Stasis_Cell_Prison, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Special_Stasis_Cell_Prison, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Stasis_Cell_Prison, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Stasis_Cell_Prison, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Stasis_Cell_Prison, 2000);
    fields.get("maxShields").set(UnitType.Special_Stasis_Cell_Prison, 0);
    fields.get("maxEnergy").set(UnitType.Special_Stasis_Cell_Prison, 0);
    fields.get("armor").set(UnitType.Special_Stasis_Cell_Prison, 1);
    fields.get("mineralPrice").set(UnitType.Special_Stasis_Cell_Prison, 150);
    fields.get("gasPrice").set(UnitType.Special_Stasis_Cell_Prison, 0);
    fields.get("buildTime").set(UnitType.Special_Stasis_Cell_Prison, 1);
    fields.get("supplyRequired").set(UnitType.Special_Stasis_Cell_Prison, 0);
    fields.get("supplyProvided").set(UnitType.Special_Stasis_Cell_Prison, 0);
    fields.get("spaceRequired").set(UnitType.Special_Stasis_Cell_Prison, 255);
    fields.get("spaceProvided").set(UnitType.Special_Stasis_Cell_Prison, 0);
    fields.get("buildScore").set(UnitType.Special_Stasis_Cell_Prison, 0);
    fields.get("destroyScore").set(UnitType.Special_Stasis_Cell_Prison, 5000);
    fields.get("size").set(UnitType.Special_Stasis_Cell_Prison, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Stasis_Cell_Prison, 4);
    fields.get("tileHeight").set(UnitType.Special_Stasis_Cell_Prison, 3);
    fields.get("dimensionLeft").set(UnitType.Special_Stasis_Cell_Prison, 64);
    fields.get("dimensionUp").set(UnitType.Special_Stasis_Cell_Prison, 48);
    fields.get("dimensionRight").set(UnitType.Special_Stasis_Cell_Prison, 63);
    fields.get("dimensionDown").set(UnitType.Special_Stasis_Cell_Prison, 47);
    fields.get("width").set(UnitType.Special_Stasis_Cell_Prison, 128);
    fields.get("height").set(UnitType.Special_Stasis_Cell_Prison, 96);
    fields.get("seekRange").set(UnitType.Special_Stasis_Cell_Prison, 0);
    fields.get("sightRange").set(UnitType.Special_Stasis_Cell_Prison, 256);
    fields.get("groundWeapon").set(UnitType.Special_Stasis_Cell_Prison, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Stasis_Cell_Prison, 0);
    fields.get("airWeapon").set(UnitType.Special_Stasis_Cell_Prison, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Stasis_Cell_Prison, 0);
    fields.get("topSpeed").set(UnitType.Special_Stasis_Cell_Prison, 0.0);
    fields.get("acceleration").set(UnitType.Special_Stasis_Cell_Prison, 0);
    fields.get("haltDistance").set(UnitType.Special_Stasis_Cell_Prison, 0);
    fields.get("turnRadius").set(UnitType.Special_Stasis_Cell_Prison, 0);
    fields.get("canProduce").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("canAttack").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("canMove").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("flyer").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("regeneratesHP").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("spellcaster").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("invincible").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("organic").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("mechanical").set(UnitType.Special_Stasis_Cell_Prison, true);
    fields.get("robotic").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("detector").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("resourceContainer").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("resourceDepot").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("refinery").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("worker").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("requiresPsi").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("requiresCreep").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("burrowable").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("cloakable").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("building").set(UnitType.Special_Stasis_Cell_Prison, true);
    fields.get("addon").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("flyingBuilding").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("neutral").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("hero").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("powerup").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("beacon").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("flagBeacon").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("specialBuilding").set(UnitType.Special_Stasis_Cell_Prison, true);
    fields.get("spell").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("producesCreep").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("producesLarva").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("mineralField").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("critter").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields.get("canBuildAddon").set(UnitType.Special_Stasis_Cell_Prison, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Stasis_Cell_Prison, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Stasis_Cell_Prison, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Protoss_Fleet_Beacon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Fleet_Beacon, 169);
    fields.get("race").set(UnitType.Protoss_Fleet_Beacon, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Fleet_Beacon, new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Fleet_Beacon, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Fleet_Beacon,
            toMap(UnitType.Protoss_Probe, 1, UnitType.Protoss_Stargate, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Fleet_Beacon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Fleet_Beacon, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Fleet_Beacon, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Fleet_Beacon,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Fleet_Beacon, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Fleet_Beacon, 500);
    fields.get("maxShields").set(UnitType.Protoss_Fleet_Beacon, 500);
    fields.get("maxEnergy").set(UnitType.Protoss_Fleet_Beacon, 0);
    fields.get("armor").set(UnitType.Protoss_Fleet_Beacon, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Fleet_Beacon, 300);
    fields.get("gasPrice").set(UnitType.Protoss_Fleet_Beacon, 200);
    fields.get("buildTime").set(UnitType.Protoss_Fleet_Beacon, 900);
    fields.get("supplyRequired").set(UnitType.Protoss_Fleet_Beacon, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Fleet_Beacon, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Fleet_Beacon, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Fleet_Beacon, 0);
    fields.get("buildScore").set(UnitType.Protoss_Fleet_Beacon, 350);
    fields.get("destroyScore").set(UnitType.Protoss_Fleet_Beacon, 1050);
    fields.get("size").set(UnitType.Protoss_Fleet_Beacon, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Fleet_Beacon, 3);
    fields.get("tileHeight").set(UnitType.Protoss_Fleet_Beacon, 2);
    fields.get("dimensionLeft").set(UnitType.Protoss_Fleet_Beacon, 40);
    fields.get("dimensionUp").set(UnitType.Protoss_Fleet_Beacon, 32);
    fields.get("dimensionRight").set(UnitType.Protoss_Fleet_Beacon, 47);
    fields.get("dimensionDown").set(UnitType.Protoss_Fleet_Beacon, 24);
    fields.get("width").set(UnitType.Protoss_Fleet_Beacon, 88);
    fields.get("height").set(UnitType.Protoss_Fleet_Beacon, 57);
    fields.get("seekRange").set(UnitType.Protoss_Fleet_Beacon, 0);
    fields.get("sightRange").set(UnitType.Protoss_Fleet_Beacon, 320);
    fields.get("groundWeapon").set(UnitType.Protoss_Fleet_Beacon, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Fleet_Beacon, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Fleet_Beacon, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Fleet_Beacon, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Fleet_Beacon, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Fleet_Beacon, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Fleet_Beacon, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Fleet_Beacon, 0);
    fields.get("canProduce").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("canAttack").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("canMove").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("flyer").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("spellcaster").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("invincible").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("organic").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("mechanical").set(UnitType.Protoss_Fleet_Beacon, true);
    fields.get("robotic").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("detector").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("refinery").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("worker").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Fleet_Beacon, true);
    fields.get("requiresCreep").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("burrowable").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("cloakable").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("building").set(UnitType.Protoss_Fleet_Beacon, true);
    fields.get("addon").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("neutral").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("hero").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("powerup").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("beacon").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("spell").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("producesCreep").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("producesLarva").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("mineralField").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("critter").set(UnitType.Protoss_Fleet_Beacon, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Fleet_Beacon, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Protoss_Fleet_Beacon, new ArrayList(Arrays.asList(TechType.Disruption_Web)));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Protoss_Fleet_Beacon,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Carrier_Capacity,
                    UpgradeType.Apial_Sensors,
                    UpgradeType.Gravitic_Thrusters,
                    UpgradeType.Argus_Jewel)));
  }

  private static void initializeUnitType_Protoss_Arbiter_Tribunal() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Arbiter_Tribunal, 170);
    fields.get("race").set(UnitType.Protoss_Arbiter_Tribunal, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Arbiter_Tribunal, new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Arbiter_Tribunal, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Arbiter_Tribunal,
            toMap(
                UnitType.Protoss_Templar_Archives,
                1,
                UnitType.Protoss_Probe,
                1,
                UnitType.Protoss_Stargate,
                1));
    fields.get("requiredTech").set(UnitType.Protoss_Arbiter_Tribunal, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Arbiter_Tribunal, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Arbiter_Tribunal, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Arbiter_Tribunal,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Arbiter_Tribunal, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Arbiter_Tribunal, 500);
    fields.get("maxShields").set(UnitType.Protoss_Arbiter_Tribunal, 500);
    fields.get("maxEnergy").set(UnitType.Protoss_Arbiter_Tribunal, 0);
    fields.get("armor").set(UnitType.Protoss_Arbiter_Tribunal, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Arbiter_Tribunal, 200);
    fields.get("gasPrice").set(UnitType.Protoss_Arbiter_Tribunal, 150);
    fields.get("buildTime").set(UnitType.Protoss_Arbiter_Tribunal, 900);
    fields.get("supplyRequired").set(UnitType.Protoss_Arbiter_Tribunal, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Arbiter_Tribunal, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Arbiter_Tribunal, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Arbiter_Tribunal, 0);
    fields.get("buildScore").set(UnitType.Protoss_Arbiter_Tribunal, 450);
    fields.get("destroyScore").set(UnitType.Protoss_Arbiter_Tribunal, 1350);
    fields.get("size").set(UnitType.Protoss_Arbiter_Tribunal, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Arbiter_Tribunal, 3);
    fields.get("tileHeight").set(UnitType.Protoss_Arbiter_Tribunal, 2);
    fields.get("dimensionLeft").set(UnitType.Protoss_Arbiter_Tribunal, 44);
    fields.get("dimensionUp").set(UnitType.Protoss_Arbiter_Tribunal, 28);
    fields.get("dimensionRight").set(UnitType.Protoss_Arbiter_Tribunal, 44);
    fields.get("dimensionDown").set(UnitType.Protoss_Arbiter_Tribunal, 28);
    fields.get("width").set(UnitType.Protoss_Arbiter_Tribunal, 89);
    fields.get("height").set(UnitType.Protoss_Arbiter_Tribunal, 57);
    fields.get("seekRange").set(UnitType.Protoss_Arbiter_Tribunal, 0);
    fields.get("sightRange").set(UnitType.Protoss_Arbiter_Tribunal, 320);
    fields.get("groundWeapon").set(UnitType.Protoss_Arbiter_Tribunal, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Arbiter_Tribunal, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Arbiter_Tribunal, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Arbiter_Tribunal, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Arbiter_Tribunal, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Arbiter_Tribunal, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Arbiter_Tribunal, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Arbiter_Tribunal, 0);
    fields.get("canProduce").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("canAttack").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("canMove").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("flyer").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("spellcaster").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("invincible").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("organic").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("mechanical").set(UnitType.Protoss_Arbiter_Tribunal, true);
    fields.get("robotic").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("detector").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("refinery").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("worker").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Arbiter_Tribunal, true);
    fields.get("requiresCreep").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("burrowable").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("cloakable").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("building").set(UnitType.Protoss_Arbiter_Tribunal, true);
    fields.get("addon").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("neutral").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("hero").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("powerup").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("beacon").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("spell").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("producesCreep").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("producesLarva").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("mineralField").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("critter").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Arbiter_Tribunal, false);
    fields
        .get("researchesWhat")
        .set(
            UnitType.Protoss_Arbiter_Tribunal,
            new ArrayList(Arrays.asList(TechType.Stasis_Field, TechType.Recall)));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Protoss_Arbiter_Tribunal,
            new ArrayList(Arrays.asList(UpgradeType.Khaydarin_Core)));
  }

  private static void initializeUnitType_Protoss_Robotics_Support_Bay() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Robotics_Support_Bay, 171);
    fields.get("race").set(UnitType.Protoss_Robotics_Support_Bay, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(
            UnitType.Protoss_Robotics_Support_Bay,
            new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields
        .get("buildsWhat")
        .set(UnitType.Protoss_Robotics_Support_Bay, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Robotics_Support_Bay,
            toMap(UnitType.Protoss_Probe, 1, UnitType.Protoss_Robotics_Facility, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Robotics_Support_Bay, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Robotics_Support_Bay, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Protoss_Robotics_Support_Bay, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Robotics_Support_Bay,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Robotics_Support_Bay, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Robotics_Support_Bay, 450);
    fields.get("maxShields").set(UnitType.Protoss_Robotics_Support_Bay, 450);
    fields.get("maxEnergy").set(UnitType.Protoss_Robotics_Support_Bay, 0);
    fields.get("armor").set(UnitType.Protoss_Robotics_Support_Bay, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Robotics_Support_Bay, 150);
    fields.get("gasPrice").set(UnitType.Protoss_Robotics_Support_Bay, 100);
    fields.get("buildTime").set(UnitType.Protoss_Robotics_Support_Bay, 450);
    fields.get("supplyRequired").set(UnitType.Protoss_Robotics_Support_Bay, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Robotics_Support_Bay, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Robotics_Support_Bay, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Robotics_Support_Bay, 0);
    fields.get("buildScore").set(UnitType.Protoss_Robotics_Support_Bay, 125);
    fields.get("destroyScore").set(UnitType.Protoss_Robotics_Support_Bay, 375);
    fields.get("size").set(UnitType.Protoss_Robotics_Support_Bay, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Robotics_Support_Bay, 3);
    fields.get("tileHeight").set(UnitType.Protoss_Robotics_Support_Bay, 2);
    fields.get("dimensionLeft").set(UnitType.Protoss_Robotics_Support_Bay, 32);
    fields.get("dimensionUp").set(UnitType.Protoss_Robotics_Support_Bay, 32);
    fields.get("dimensionRight").set(UnitType.Protoss_Robotics_Support_Bay, 32);
    fields.get("dimensionDown").set(UnitType.Protoss_Robotics_Support_Bay, 20);
    fields.get("width").set(UnitType.Protoss_Robotics_Support_Bay, 65);
    fields.get("height").set(UnitType.Protoss_Robotics_Support_Bay, 53);
    fields.get("seekRange").set(UnitType.Protoss_Robotics_Support_Bay, 0);
    fields.get("sightRange").set(UnitType.Protoss_Robotics_Support_Bay, 320);
    fields.get("groundWeapon").set(UnitType.Protoss_Robotics_Support_Bay, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Robotics_Support_Bay, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Robotics_Support_Bay, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Robotics_Support_Bay, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Robotics_Support_Bay, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Robotics_Support_Bay, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Robotics_Support_Bay, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Robotics_Support_Bay, 0);
    fields.get("canProduce").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("canAttack").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("canMove").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("flyer").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("spellcaster").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("invincible").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("organic").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("mechanical").set(UnitType.Protoss_Robotics_Support_Bay, true);
    fields.get("robotic").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("detector").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("refinery").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("worker").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Robotics_Support_Bay, true);
    fields.get("requiresCreep").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("burrowable").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("cloakable").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("building").set(UnitType.Protoss_Robotics_Support_Bay, true);
    fields.get("addon").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("neutral").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("hero").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("powerup").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("beacon").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("spell").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("producesCreep").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("producesLarva").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("mineralField").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("critter").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Robotics_Support_Bay, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Protoss_Robotics_Support_Bay, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(
            UnitType.Protoss_Robotics_Support_Bay,
            new ArrayList(
                Arrays.asList(
                    UpgradeType.Scarab_Damage,
                    UpgradeType.Reaver_Capacity,
                    UpgradeType.Gravitic_Drive)));
  }

  private static void initializeUnitType_Protoss_Shield_Battery() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Protoss_Shield_Battery, 172);
    fields.get("race").set(UnitType.Protoss_Shield_Battery, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Protoss_Shield_Battery, new UnitType.WhatBuilds(UnitType.Protoss_Probe, 1));
    fields.get("buildsWhat").set(UnitType.Protoss_Shield_Battery, new ArrayList(Arrays.asList()));
    fields
        .get("requiredUnits")
        .set(
            UnitType.Protoss_Shield_Battery,
            toMap(UnitType.Protoss_Probe, 1, UnitType.Protoss_Gateway, 1));
    fields.get("requiredTech").set(UnitType.Protoss_Shield_Battery, TechType.None);
    fields.get("cloakingTech").set(UnitType.Protoss_Shield_Battery, TechType.None);
    fields.get("abilities").set(UnitType.Protoss_Shield_Battery, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Protoss_Shield_Battery,
            new ArrayList(Arrays.asList(UpgradeType.Protoss_Plasma_Shields)));
    fields.get("armorUpgrade").set(UnitType.Protoss_Shield_Battery, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Protoss_Shield_Battery, 200);
    fields.get("maxShields").set(UnitType.Protoss_Shield_Battery, 200);
    fields.get("maxEnergy").set(UnitType.Protoss_Shield_Battery, 200);
    fields.get("armor").set(UnitType.Protoss_Shield_Battery, 1);
    fields.get("mineralPrice").set(UnitType.Protoss_Shield_Battery, 100);
    fields.get("gasPrice").set(UnitType.Protoss_Shield_Battery, 0);
    fields.get("buildTime").set(UnitType.Protoss_Shield_Battery, 450);
    fields.get("supplyRequired").set(UnitType.Protoss_Shield_Battery, 0);
    fields.get("supplyProvided").set(UnitType.Protoss_Shield_Battery, 0);
    fields.get("spaceRequired").set(UnitType.Protoss_Shield_Battery, 255);
    fields.get("spaceProvided").set(UnitType.Protoss_Shield_Battery, 0);
    fields.get("buildScore").set(UnitType.Protoss_Shield_Battery, 50);
    fields.get("destroyScore").set(UnitType.Protoss_Shield_Battery, 150);
    fields.get("size").set(UnitType.Protoss_Shield_Battery, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Protoss_Shield_Battery, 3);
    fields.get("tileHeight").set(UnitType.Protoss_Shield_Battery, 2);
    fields.get("dimensionLeft").set(UnitType.Protoss_Shield_Battery, 32);
    fields.get("dimensionUp").set(UnitType.Protoss_Shield_Battery, 16);
    fields.get("dimensionRight").set(UnitType.Protoss_Shield_Battery, 32);
    fields.get("dimensionDown").set(UnitType.Protoss_Shield_Battery, 16);
    fields.get("width").set(UnitType.Protoss_Shield_Battery, 65);
    fields.get("height").set(UnitType.Protoss_Shield_Battery, 33);
    fields.get("seekRange").set(UnitType.Protoss_Shield_Battery, 0);
    fields.get("sightRange").set(UnitType.Protoss_Shield_Battery, 320);
    fields.get("groundWeapon").set(UnitType.Protoss_Shield_Battery, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Protoss_Shield_Battery, 0);
    fields.get("airWeapon").set(UnitType.Protoss_Shield_Battery, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Protoss_Shield_Battery, 0);
    fields.get("topSpeed").set(UnitType.Protoss_Shield_Battery, 0.0);
    fields.get("acceleration").set(UnitType.Protoss_Shield_Battery, 0);
    fields.get("haltDistance").set(UnitType.Protoss_Shield_Battery, 0);
    fields.get("turnRadius").set(UnitType.Protoss_Shield_Battery, 0);
    fields.get("canProduce").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("canAttack").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("canMove").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("flyer").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("regeneratesHP").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("spellcaster").set(UnitType.Protoss_Shield_Battery, true);
    fields.get("hasPermanentCloak").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("invincible").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("organic").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("mechanical").set(UnitType.Protoss_Shield_Battery, true);
    fields.get("robotic").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("detector").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("resourceContainer").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("resourceDepot").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("refinery").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("worker").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("requiresPsi").set(UnitType.Protoss_Shield_Battery, true);
    fields.get("requiresCreep").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("burrowable").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("cloakable").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("building").set(UnitType.Protoss_Shield_Battery, true);
    fields.get("addon").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("flyingBuilding").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("neutral").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("hero").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("powerup").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("beacon").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("flagBeacon").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("specialBuilding").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("spell").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("producesCreep").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("producesLarva").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("mineralField").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("critter").set(UnitType.Protoss_Shield_Battery, false);
    fields.get("canBuildAddon").set(UnitType.Protoss_Shield_Battery, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Protoss_Shield_Battery, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Protoss_Shield_Battery, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Khaydarin_Crystal_Form() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Khaydarin_Crystal_Form, 173);
    fields.get("race").set(UnitType.Special_Khaydarin_Crystal_Form, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Khaydarin_Crystal_Form, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Special_Khaydarin_Crystal_Form, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Khaydarin_Crystal_Form, toMap());
    fields.get("requiredTech").set(UnitType.Special_Khaydarin_Crystal_Form, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Khaydarin_Crystal_Form, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Special_Khaydarin_Crystal_Form, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Special_Khaydarin_Crystal_Form, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Khaydarin_Crystal_Form, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Khaydarin_Crystal_Form, 100000);
    fields.get("maxShields").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
    fields.get("maxEnergy").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
    fields.get("armor").set(UnitType.Special_Khaydarin_Crystal_Form, 1);
    fields.get("mineralPrice").set(UnitType.Special_Khaydarin_Crystal_Form, 250);
    fields.get("gasPrice").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
    fields.get("buildTime").set(UnitType.Special_Khaydarin_Crystal_Form, 1);
    fields.get("supplyRequired").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
    fields.get("supplyProvided").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
    fields.get("spaceRequired").set(UnitType.Special_Khaydarin_Crystal_Form, 255);
    fields.get("spaceProvided").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
    fields.get("buildScore").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
    fields.get("destroyScore").set(UnitType.Special_Khaydarin_Crystal_Form, 2500);
    fields.get("size").set(UnitType.Special_Khaydarin_Crystal_Form, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Khaydarin_Crystal_Form, 4);
    fields.get("tileHeight").set(UnitType.Special_Khaydarin_Crystal_Form, 3);
    fields.get("dimensionLeft").set(UnitType.Special_Khaydarin_Crystal_Form, 64);
    fields.get("dimensionUp").set(UnitType.Special_Khaydarin_Crystal_Form, 48);
    fields.get("dimensionRight").set(UnitType.Special_Khaydarin_Crystal_Form, 63);
    fields.get("dimensionDown").set(UnitType.Special_Khaydarin_Crystal_Form, 47);
    fields.get("width").set(UnitType.Special_Khaydarin_Crystal_Form, 128);
    fields.get("height").set(UnitType.Special_Khaydarin_Crystal_Form, 96);
    fields.get("seekRange").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
    fields.get("sightRange").set(UnitType.Special_Khaydarin_Crystal_Form, 320);
    fields.get("groundWeapon").set(UnitType.Special_Khaydarin_Crystal_Form, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
    fields.get("airWeapon").set(UnitType.Special_Khaydarin_Crystal_Form, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
    fields.get("topSpeed").set(UnitType.Special_Khaydarin_Crystal_Form, 0.0);
    fields.get("acceleration").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
    fields.get("haltDistance").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
    fields.get("turnRadius").set(UnitType.Special_Khaydarin_Crystal_Form, 0);
    fields.get("canProduce").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("canAttack").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("canMove").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("flyer").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("regeneratesHP").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("spellcaster").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("invincible").set(UnitType.Special_Khaydarin_Crystal_Form, true);
    fields.get("organic").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("mechanical").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("robotic").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("detector").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("resourceContainer").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("resourceDepot").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("refinery").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("worker").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("requiresPsi").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("requiresCreep").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("burrowable").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("cloakable").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("building").set(UnitType.Special_Khaydarin_Crystal_Form, true);
    fields.get("addon").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("flyingBuilding").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("neutral").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("hero").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("powerup").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("beacon").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("flagBeacon").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("specialBuilding").set(UnitType.Special_Khaydarin_Crystal_Form, true);
    fields.get("spell").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("producesCreep").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("producesLarva").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("mineralField").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("critter").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields.get("canBuildAddon").set(UnitType.Special_Khaydarin_Crystal_Form, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Khaydarin_Crystal_Form, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Khaydarin_Crystal_Form, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Protoss_Temple() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Protoss_Temple, 174);
    fields.get("race").set(UnitType.Special_Protoss_Temple, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Protoss_Temple, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Protoss_Temple, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Protoss_Temple, toMap());
    fields.get("requiredTech").set(UnitType.Special_Protoss_Temple, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Protoss_Temple, TechType.None);
    fields.get("abilities").set(UnitType.Special_Protoss_Temple, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Protoss_Temple, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Protoss_Temple, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Protoss_Temple, 1500);
    fields.get("maxShields").set(UnitType.Special_Protoss_Temple, 0);
    fields.get("maxEnergy").set(UnitType.Special_Protoss_Temple, 0);
    fields.get("armor").set(UnitType.Special_Protoss_Temple, 1);
    fields.get("mineralPrice").set(UnitType.Special_Protoss_Temple, 250);
    fields.get("gasPrice").set(UnitType.Special_Protoss_Temple, 0);
    fields.get("buildTime").set(UnitType.Special_Protoss_Temple, 1);
    fields.get("supplyRequired").set(UnitType.Special_Protoss_Temple, 0);
    fields.get("supplyProvided").set(UnitType.Special_Protoss_Temple, 0);
    fields.get("spaceRequired").set(UnitType.Special_Protoss_Temple, 255);
    fields.get("spaceProvided").set(UnitType.Special_Protoss_Temple, 0);
    fields.get("buildScore").set(UnitType.Special_Protoss_Temple, 0);
    fields.get("destroyScore").set(UnitType.Special_Protoss_Temple, 5000);
    fields.get("size").set(UnitType.Special_Protoss_Temple, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Protoss_Temple, 7);
    fields.get("tileHeight").set(UnitType.Special_Protoss_Temple, 3);
    fields.get("dimensionLeft").set(UnitType.Special_Protoss_Temple, 112);
    fields.get("dimensionUp").set(UnitType.Special_Protoss_Temple, 48);
    fields.get("dimensionRight").set(UnitType.Special_Protoss_Temple, 111);
    fields.get("dimensionDown").set(UnitType.Special_Protoss_Temple, 47);
    fields.get("width").set(UnitType.Special_Protoss_Temple, 224);
    fields.get("height").set(UnitType.Special_Protoss_Temple, 96);
    fields.get("seekRange").set(UnitType.Special_Protoss_Temple, 0);
    fields.get("sightRange").set(UnitType.Special_Protoss_Temple, 320);
    fields.get("groundWeapon").set(UnitType.Special_Protoss_Temple, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Protoss_Temple, 0);
    fields.get("airWeapon").set(UnitType.Special_Protoss_Temple, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Protoss_Temple, 0);
    fields.get("topSpeed").set(UnitType.Special_Protoss_Temple, 0.0);
    fields.get("acceleration").set(UnitType.Special_Protoss_Temple, 0);
    fields.get("haltDistance").set(UnitType.Special_Protoss_Temple, 0);
    fields.get("turnRadius").set(UnitType.Special_Protoss_Temple, 0);
    fields.get("canProduce").set(UnitType.Special_Protoss_Temple, false);
    fields.get("canAttack").set(UnitType.Special_Protoss_Temple, false);
    fields.get("canMove").set(UnitType.Special_Protoss_Temple, false);
    fields.get("flyer").set(UnitType.Special_Protoss_Temple, false);
    fields.get("regeneratesHP").set(UnitType.Special_Protoss_Temple, false);
    fields.get("spellcaster").set(UnitType.Special_Protoss_Temple, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Protoss_Temple, false);
    fields.get("invincible").set(UnitType.Special_Protoss_Temple, false);
    fields.get("organic").set(UnitType.Special_Protoss_Temple, false);
    fields.get("mechanical").set(UnitType.Special_Protoss_Temple, false);
    fields.get("robotic").set(UnitType.Special_Protoss_Temple, false);
    fields.get("detector").set(UnitType.Special_Protoss_Temple, false);
    fields.get("resourceContainer").set(UnitType.Special_Protoss_Temple, false);
    fields.get("resourceDepot").set(UnitType.Special_Protoss_Temple, false);
    fields.get("refinery").set(UnitType.Special_Protoss_Temple, false);
    fields.get("worker").set(UnitType.Special_Protoss_Temple, false);
    fields.get("requiresPsi").set(UnitType.Special_Protoss_Temple, false);
    fields.get("requiresCreep").set(UnitType.Special_Protoss_Temple, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Protoss_Temple, false);
    fields.get("burrowable").set(UnitType.Special_Protoss_Temple, false);
    fields.get("cloakable").set(UnitType.Special_Protoss_Temple, false);
    fields.get("building").set(UnitType.Special_Protoss_Temple, true);
    fields.get("addon").set(UnitType.Special_Protoss_Temple, false);
    fields.get("flyingBuilding").set(UnitType.Special_Protoss_Temple, false);
    fields.get("neutral").set(UnitType.Special_Protoss_Temple, false);
    fields.get("hero").set(UnitType.Special_Protoss_Temple, false);
    fields.get("powerup").set(UnitType.Special_Protoss_Temple, false);
    fields.get("beacon").set(UnitType.Special_Protoss_Temple, false);
    fields.get("flagBeacon").set(UnitType.Special_Protoss_Temple, false);
    fields.get("specialBuilding").set(UnitType.Special_Protoss_Temple, true);
    fields.get("spell").set(UnitType.Special_Protoss_Temple, false);
    fields.get("producesCreep").set(UnitType.Special_Protoss_Temple, false);
    fields.get("producesLarva").set(UnitType.Special_Protoss_Temple, false);
    fields.get("mineralField").set(UnitType.Special_Protoss_Temple, false);
    fields.get("critter").set(UnitType.Special_Protoss_Temple, false);
    fields.get("canBuildAddon").set(UnitType.Special_Protoss_Temple, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Protoss_Temple, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Protoss_Temple, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_XelNaga_Temple() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_XelNaga_Temple, 175);
    fields.get("race").set(UnitType.Special_XelNaga_Temple, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_XelNaga_Temple, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_XelNaga_Temple, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_XelNaga_Temple, toMap());
    fields.get("requiredTech").set(UnitType.Special_XelNaga_Temple, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_XelNaga_Temple, TechType.None);
    fields.get("abilities").set(UnitType.Special_XelNaga_Temple, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_XelNaga_Temple, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_XelNaga_Temple, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_XelNaga_Temple, 5000);
    fields.get("maxShields").set(UnitType.Special_XelNaga_Temple, 0);
    fields.get("maxEnergy").set(UnitType.Special_XelNaga_Temple, 0);
    fields.get("armor").set(UnitType.Special_XelNaga_Temple, 1);
    fields.get("mineralPrice").set(UnitType.Special_XelNaga_Temple, 1500);
    fields.get("gasPrice").set(UnitType.Special_XelNaga_Temple, 500);
    fields.get("buildTime").set(UnitType.Special_XelNaga_Temple, 4800);
    fields.get("supplyRequired").set(UnitType.Special_XelNaga_Temple, 0);
    fields.get("supplyProvided").set(UnitType.Special_XelNaga_Temple, 0);
    fields.get("spaceRequired").set(UnitType.Special_XelNaga_Temple, 255);
    fields.get("spaceProvided").set(UnitType.Special_XelNaga_Temple, 0);
    fields.get("buildScore").set(UnitType.Special_XelNaga_Temple, 0);
    fields.get("destroyScore").set(UnitType.Special_XelNaga_Temple, 5000);
    fields.get("size").set(UnitType.Special_XelNaga_Temple, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_XelNaga_Temple, 5);
    fields.get("tileHeight").set(UnitType.Special_XelNaga_Temple, 4);
    fields.get("dimensionLeft").set(UnitType.Special_XelNaga_Temple, 80);
    fields.get("dimensionUp").set(UnitType.Special_XelNaga_Temple, 34);
    fields.get("dimensionRight").set(UnitType.Special_XelNaga_Temple, 79);
    fields.get("dimensionDown").set(UnitType.Special_XelNaga_Temple, 63);
    fields.get("width").set(UnitType.Special_XelNaga_Temple, 160);
    fields.get("height").set(UnitType.Special_XelNaga_Temple, 98);
    fields.get("seekRange").set(UnitType.Special_XelNaga_Temple, 0);
    fields.get("sightRange").set(UnitType.Special_XelNaga_Temple, 320);
    fields.get("groundWeapon").set(UnitType.Special_XelNaga_Temple, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_XelNaga_Temple, 0);
    fields.get("airWeapon").set(UnitType.Special_XelNaga_Temple, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_XelNaga_Temple, 0);
    fields.get("topSpeed").set(UnitType.Special_XelNaga_Temple, 0.0);
    fields.get("acceleration").set(UnitType.Special_XelNaga_Temple, 0);
    fields.get("haltDistance").set(UnitType.Special_XelNaga_Temple, 0);
    fields.get("turnRadius").set(UnitType.Special_XelNaga_Temple, 0);
    fields.get("canProduce").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("canAttack").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("canMove").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("flyer").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("regeneratesHP").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("spellcaster").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("invincible").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("organic").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("mechanical").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("robotic").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("detector").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("resourceContainer").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("resourceDepot").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("refinery").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("worker").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("requiresPsi").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("requiresCreep").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("burrowable").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("cloakable").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("building").set(UnitType.Special_XelNaga_Temple, true);
    fields.get("addon").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("flyingBuilding").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("neutral").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("hero").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("powerup").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("beacon").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("flagBeacon").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("specialBuilding").set(UnitType.Special_XelNaga_Temple, true);
    fields.get("spell").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("producesCreep").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("producesLarva").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("mineralField").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("critter").set(UnitType.Special_XelNaga_Temple, false);
    fields.get("canBuildAddon").set(UnitType.Special_XelNaga_Temple, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_XelNaga_Temple, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_XelNaga_Temple, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Resource_Mineral_Field() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Resource_Mineral_Field, 176);
    fields.get("race").set(UnitType.Resource_Mineral_Field, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Resource_Mineral_Field, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Resource_Mineral_Field, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Resource_Mineral_Field, toMap());
    fields.get("requiredTech").set(UnitType.Resource_Mineral_Field, TechType.None);
    fields.get("cloakingTech").set(UnitType.Resource_Mineral_Field, TechType.None);
    fields.get("abilities").set(UnitType.Resource_Mineral_Field, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Resource_Mineral_Field, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Resource_Mineral_Field, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Resource_Mineral_Field, 100000);
    fields.get("maxShields").set(UnitType.Resource_Mineral_Field, 0);
    fields.get("maxEnergy").set(UnitType.Resource_Mineral_Field, 0);
    fields.get("armor").set(UnitType.Resource_Mineral_Field, 0);
    fields.get("mineralPrice").set(UnitType.Resource_Mineral_Field, 1);
    fields.get("gasPrice").set(UnitType.Resource_Mineral_Field, 1);
    fields.get("buildTime").set(UnitType.Resource_Mineral_Field, 1);
    fields.get("supplyRequired").set(UnitType.Resource_Mineral_Field, 0);
    fields.get("supplyProvided").set(UnitType.Resource_Mineral_Field, 0);
    fields.get("spaceRequired").set(UnitType.Resource_Mineral_Field, 255);
    fields.get("spaceProvided").set(UnitType.Resource_Mineral_Field, 0);
    fields.get("buildScore").set(UnitType.Resource_Mineral_Field, 10);
    fields.get("destroyScore").set(UnitType.Resource_Mineral_Field, 10);
    fields.get("size").set(UnitType.Resource_Mineral_Field, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Resource_Mineral_Field, 2);
    fields.get("tileHeight").set(UnitType.Resource_Mineral_Field, 1);
    fields.get("dimensionLeft").set(UnitType.Resource_Mineral_Field, 32);
    fields.get("dimensionUp").set(UnitType.Resource_Mineral_Field, 16);
    fields.get("dimensionRight").set(UnitType.Resource_Mineral_Field, 31);
    fields.get("dimensionDown").set(UnitType.Resource_Mineral_Field, 15);
    fields.get("width").set(UnitType.Resource_Mineral_Field, 64);
    fields.get("height").set(UnitType.Resource_Mineral_Field, 32);
    fields.get("seekRange").set(UnitType.Resource_Mineral_Field, 0);
    fields.get("sightRange").set(UnitType.Resource_Mineral_Field, 288);
    fields.get("groundWeapon").set(UnitType.Resource_Mineral_Field, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Resource_Mineral_Field, 0);
    fields.get("airWeapon").set(UnitType.Resource_Mineral_Field, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Resource_Mineral_Field, 0);
    fields.get("topSpeed").set(UnitType.Resource_Mineral_Field, 0.0);
    fields.get("acceleration").set(UnitType.Resource_Mineral_Field, 0);
    fields.get("haltDistance").set(UnitType.Resource_Mineral_Field, 0);
    fields.get("turnRadius").set(UnitType.Resource_Mineral_Field, 0);
    fields.get("canProduce").set(UnitType.Resource_Mineral_Field, false);
    fields.get("canAttack").set(UnitType.Resource_Mineral_Field, false);
    fields.get("canMove").set(UnitType.Resource_Mineral_Field, false);
    fields.get("flyer").set(UnitType.Resource_Mineral_Field, false);
    fields.get("regeneratesHP").set(UnitType.Resource_Mineral_Field, false);
    fields.get("spellcaster").set(UnitType.Resource_Mineral_Field, false);
    fields.get("hasPermanentCloak").set(UnitType.Resource_Mineral_Field, false);
    fields.get("invincible").set(UnitType.Resource_Mineral_Field, true);
    fields.get("organic").set(UnitType.Resource_Mineral_Field, false);
    fields.get("mechanical").set(UnitType.Resource_Mineral_Field, false);
    fields.get("robotic").set(UnitType.Resource_Mineral_Field, false);
    fields.get("detector").set(UnitType.Resource_Mineral_Field, false);
    fields.get("resourceContainer").set(UnitType.Resource_Mineral_Field, true);
    fields.get("resourceDepot").set(UnitType.Resource_Mineral_Field, false);
    fields.get("refinery").set(UnitType.Resource_Mineral_Field, false);
    fields.get("worker").set(UnitType.Resource_Mineral_Field, false);
    fields.get("requiresPsi").set(UnitType.Resource_Mineral_Field, false);
    fields.get("requiresCreep").set(UnitType.Resource_Mineral_Field, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Resource_Mineral_Field, false);
    fields.get("burrowable").set(UnitType.Resource_Mineral_Field, false);
    fields.get("cloakable").set(UnitType.Resource_Mineral_Field, false);
    fields.get("building").set(UnitType.Resource_Mineral_Field, true);
    fields.get("addon").set(UnitType.Resource_Mineral_Field, false);
    fields.get("flyingBuilding").set(UnitType.Resource_Mineral_Field, false);
    fields.get("neutral").set(UnitType.Resource_Mineral_Field, true);
    fields.get("hero").set(UnitType.Resource_Mineral_Field, false);
    fields.get("powerup").set(UnitType.Resource_Mineral_Field, false);
    fields.get("beacon").set(UnitType.Resource_Mineral_Field, false);
    fields.get("flagBeacon").set(UnitType.Resource_Mineral_Field, false);
    fields.get("specialBuilding").set(UnitType.Resource_Mineral_Field, true);
    fields.get("spell").set(UnitType.Resource_Mineral_Field, false);
    fields.get("producesCreep").set(UnitType.Resource_Mineral_Field, false);
    fields.get("producesLarva").set(UnitType.Resource_Mineral_Field, false);
    fields.get("mineralField").set(UnitType.Resource_Mineral_Field, true);
    fields.get("critter").set(UnitType.Resource_Mineral_Field, false);
    fields.get("canBuildAddon").set(UnitType.Resource_Mineral_Field, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Resource_Mineral_Field, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Resource_Mineral_Field, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Resource_Mineral_Field_Type_2() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Resource_Mineral_Field_Type_2, 177);
    fields.get("race").set(UnitType.Resource_Mineral_Field_Type_2, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Resource_Mineral_Field_Type_2, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Resource_Mineral_Field_Type_2, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Resource_Mineral_Field_Type_2, toMap());
    fields.get("requiredTech").set(UnitType.Resource_Mineral_Field_Type_2, TechType.None);
    fields.get("cloakingTech").set(UnitType.Resource_Mineral_Field_Type_2, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Resource_Mineral_Field_Type_2, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Resource_Mineral_Field_Type_2, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Resource_Mineral_Field_Type_2, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Resource_Mineral_Field_Type_2, 100000);
    fields.get("maxShields").set(UnitType.Resource_Mineral_Field_Type_2, 0);
    fields.get("maxEnergy").set(UnitType.Resource_Mineral_Field_Type_2, 0);
    fields.get("armor").set(UnitType.Resource_Mineral_Field_Type_2, 0);
    fields.get("mineralPrice").set(UnitType.Resource_Mineral_Field_Type_2, 1);
    fields.get("gasPrice").set(UnitType.Resource_Mineral_Field_Type_2, 1);
    fields.get("buildTime").set(UnitType.Resource_Mineral_Field_Type_2, 1);
    fields.get("supplyRequired").set(UnitType.Resource_Mineral_Field_Type_2, 0);
    fields.get("supplyProvided").set(UnitType.Resource_Mineral_Field_Type_2, 0);
    fields.get("spaceRequired").set(UnitType.Resource_Mineral_Field_Type_2, 255);
    fields.get("spaceProvided").set(UnitType.Resource_Mineral_Field_Type_2, 0);
    fields.get("buildScore").set(UnitType.Resource_Mineral_Field_Type_2, 10);
    fields.get("destroyScore").set(UnitType.Resource_Mineral_Field_Type_2, 10);
    fields.get("size").set(UnitType.Resource_Mineral_Field_Type_2, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Resource_Mineral_Field_Type_2, 2);
    fields.get("tileHeight").set(UnitType.Resource_Mineral_Field_Type_2, 1);
    fields.get("dimensionLeft").set(UnitType.Resource_Mineral_Field_Type_2, 32);
    fields.get("dimensionUp").set(UnitType.Resource_Mineral_Field_Type_2, 16);
    fields.get("dimensionRight").set(UnitType.Resource_Mineral_Field_Type_2, 31);
    fields.get("dimensionDown").set(UnitType.Resource_Mineral_Field_Type_2, 15);
    fields.get("width").set(UnitType.Resource_Mineral_Field_Type_2, 64);
    fields.get("height").set(UnitType.Resource_Mineral_Field_Type_2, 32);
    fields.get("seekRange").set(UnitType.Resource_Mineral_Field_Type_2, 0);
    fields.get("sightRange").set(UnitType.Resource_Mineral_Field_Type_2, 288);
    fields.get("groundWeapon").set(UnitType.Resource_Mineral_Field_Type_2, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Resource_Mineral_Field_Type_2, 0);
    fields.get("airWeapon").set(UnitType.Resource_Mineral_Field_Type_2, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Resource_Mineral_Field_Type_2, 0);
    fields.get("topSpeed").set(UnitType.Resource_Mineral_Field_Type_2, 0.0);
    fields.get("acceleration").set(UnitType.Resource_Mineral_Field_Type_2, 0);
    fields.get("haltDistance").set(UnitType.Resource_Mineral_Field_Type_2, 0);
    fields.get("turnRadius").set(UnitType.Resource_Mineral_Field_Type_2, 0);
    fields.get("canProduce").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("canAttack").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("canMove").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("flyer").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("regeneratesHP").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("spellcaster").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("hasPermanentCloak").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("invincible").set(UnitType.Resource_Mineral_Field_Type_2, true);
    fields.get("organic").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("mechanical").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("robotic").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("detector").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("resourceContainer").set(UnitType.Resource_Mineral_Field_Type_2, true);
    fields.get("resourceDepot").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("refinery").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("worker").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("requiresPsi").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("requiresCreep").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("burrowable").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("cloakable").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("building").set(UnitType.Resource_Mineral_Field_Type_2, true);
    fields.get("addon").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("flyingBuilding").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("neutral").set(UnitType.Resource_Mineral_Field_Type_2, true);
    fields.get("hero").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("powerup").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("beacon").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("flagBeacon").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("specialBuilding").set(UnitType.Resource_Mineral_Field_Type_2, true);
    fields.get("spell").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("producesCreep").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("producesLarva").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("mineralField").set(UnitType.Resource_Mineral_Field_Type_2, true);
    fields.get("critter").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields.get("canBuildAddon").set(UnitType.Resource_Mineral_Field_Type_2, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Resource_Mineral_Field_Type_2, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Resource_Mineral_Field_Type_2, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Resource_Mineral_Field_Type_3() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Resource_Mineral_Field_Type_3, 178);
    fields.get("race").set(UnitType.Resource_Mineral_Field_Type_3, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Resource_Mineral_Field_Type_3, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Resource_Mineral_Field_Type_3, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Resource_Mineral_Field_Type_3, toMap());
    fields.get("requiredTech").set(UnitType.Resource_Mineral_Field_Type_3, TechType.None);
    fields.get("cloakingTech").set(UnitType.Resource_Mineral_Field_Type_3, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Resource_Mineral_Field_Type_3, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Resource_Mineral_Field_Type_3, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Resource_Mineral_Field_Type_3, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Resource_Mineral_Field_Type_3, 100000);
    fields.get("maxShields").set(UnitType.Resource_Mineral_Field_Type_3, 0);
    fields.get("maxEnergy").set(UnitType.Resource_Mineral_Field_Type_3, 0);
    fields.get("armor").set(UnitType.Resource_Mineral_Field_Type_3, 0);
    fields.get("mineralPrice").set(UnitType.Resource_Mineral_Field_Type_3, 1);
    fields.get("gasPrice").set(UnitType.Resource_Mineral_Field_Type_3, 1);
    fields.get("buildTime").set(UnitType.Resource_Mineral_Field_Type_3, 1);
    fields.get("supplyRequired").set(UnitType.Resource_Mineral_Field_Type_3, 0);
    fields.get("supplyProvided").set(UnitType.Resource_Mineral_Field_Type_3, 0);
    fields.get("spaceRequired").set(UnitType.Resource_Mineral_Field_Type_3, 255);
    fields.get("spaceProvided").set(UnitType.Resource_Mineral_Field_Type_3, 0);
    fields.get("buildScore").set(UnitType.Resource_Mineral_Field_Type_3, 10);
    fields.get("destroyScore").set(UnitType.Resource_Mineral_Field_Type_3, 10);
    fields.get("size").set(UnitType.Resource_Mineral_Field_Type_3, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Resource_Mineral_Field_Type_3, 2);
    fields.get("tileHeight").set(UnitType.Resource_Mineral_Field_Type_3, 1);
    fields.get("dimensionLeft").set(UnitType.Resource_Mineral_Field_Type_3, 32);
    fields.get("dimensionUp").set(UnitType.Resource_Mineral_Field_Type_3, 16);
    fields.get("dimensionRight").set(UnitType.Resource_Mineral_Field_Type_3, 31);
    fields.get("dimensionDown").set(UnitType.Resource_Mineral_Field_Type_3, 15);
    fields.get("width").set(UnitType.Resource_Mineral_Field_Type_3, 64);
    fields.get("height").set(UnitType.Resource_Mineral_Field_Type_3, 32);
    fields.get("seekRange").set(UnitType.Resource_Mineral_Field_Type_3, 0);
    fields.get("sightRange").set(UnitType.Resource_Mineral_Field_Type_3, 288);
    fields.get("groundWeapon").set(UnitType.Resource_Mineral_Field_Type_3, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Resource_Mineral_Field_Type_3, 0);
    fields.get("airWeapon").set(UnitType.Resource_Mineral_Field_Type_3, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Resource_Mineral_Field_Type_3, 0);
    fields.get("topSpeed").set(UnitType.Resource_Mineral_Field_Type_3, 0.0);
    fields.get("acceleration").set(UnitType.Resource_Mineral_Field_Type_3, 0);
    fields.get("haltDistance").set(UnitType.Resource_Mineral_Field_Type_3, 0);
    fields.get("turnRadius").set(UnitType.Resource_Mineral_Field_Type_3, 0);
    fields.get("canProduce").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("canAttack").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("canMove").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("flyer").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("regeneratesHP").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("spellcaster").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("hasPermanentCloak").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("invincible").set(UnitType.Resource_Mineral_Field_Type_3, true);
    fields.get("organic").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("mechanical").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("robotic").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("detector").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("resourceContainer").set(UnitType.Resource_Mineral_Field_Type_3, true);
    fields.get("resourceDepot").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("refinery").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("worker").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("requiresPsi").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("requiresCreep").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("burrowable").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("cloakable").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("building").set(UnitType.Resource_Mineral_Field_Type_3, true);
    fields.get("addon").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("flyingBuilding").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("neutral").set(UnitType.Resource_Mineral_Field_Type_3, true);
    fields.get("hero").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("powerup").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("beacon").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("flagBeacon").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("specialBuilding").set(UnitType.Resource_Mineral_Field_Type_3, true);
    fields.get("spell").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("producesCreep").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("producesLarva").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("mineralField").set(UnitType.Resource_Mineral_Field_Type_3, true);
    fields.get("critter").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields.get("canBuildAddon").set(UnitType.Resource_Mineral_Field_Type_3, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Resource_Mineral_Field_Type_3, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Resource_Mineral_Field_Type_3, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unused_Cave() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Cave, 179);
    fields.get("race").set(UnitType.Unused_Cave, null);
    fields.get("whatBuilds").set(UnitType.Unused_Cave, null);
    fields.get("buildsWhat").set(UnitType.Unused_Cave, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Cave, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Cave, null);
    fields.get("cloakingTech").set(UnitType.Unused_Cave, null);
    fields.get("abilities").set(UnitType.Unused_Cave, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Unused_Cave, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Cave, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Cave, 0);
    fields.get("maxShields").set(UnitType.Unused_Cave, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Cave, 0);
    fields.get("armor").set(UnitType.Unused_Cave, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Cave, 0);
    fields.get("gasPrice").set(UnitType.Unused_Cave, 0);
    fields.get("buildTime").set(UnitType.Unused_Cave, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Cave, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Cave, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Cave, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Cave, 0);
    fields.get("buildScore").set(UnitType.Unused_Cave, 0);
    fields.get("destroyScore").set(UnitType.Unused_Cave, 0);
    fields.get("size").set(UnitType.Unused_Cave, null);
    fields.get("tileWidth").set(UnitType.Unused_Cave, 0);
    fields.get("tileHeight").set(UnitType.Unused_Cave, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Cave, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Cave, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Cave, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Cave, 0);
    fields.get("width").set(UnitType.Unused_Cave, 0);
    fields.get("height").set(UnitType.Unused_Cave, 0);
    fields.get("seekRange").set(UnitType.Unused_Cave, 0);
    fields.get("sightRange").set(UnitType.Unused_Cave, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Cave, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Cave, 0);
    fields.get("airWeapon").set(UnitType.Unused_Cave, null);
    fields.get("maxAirHits").set(UnitType.Unused_Cave, 0);
    fields.get("topSpeed").set(UnitType.Unused_Cave, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Cave, 0);
    fields.get("haltDistance").set(UnitType.Unused_Cave, 0);
    fields.get("turnRadius").set(UnitType.Unused_Cave, 0);
    fields.get("canProduce").set(UnitType.Unused_Cave, false);
    fields.get("canAttack").set(UnitType.Unused_Cave, false);
    fields.get("canMove").set(UnitType.Unused_Cave, false);
    fields.get("flyer").set(UnitType.Unused_Cave, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Cave, false);
    fields.get("spellcaster").set(UnitType.Unused_Cave, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Cave, false);
    fields.get("invincible").set(UnitType.Unused_Cave, false);
    fields.get("organic").set(UnitType.Unused_Cave, false);
    fields.get("mechanical").set(UnitType.Unused_Cave, false);
    fields.get("robotic").set(UnitType.Unused_Cave, false);
    fields.get("detector").set(UnitType.Unused_Cave, false);
    fields.get("resourceContainer").set(UnitType.Unused_Cave, false);
    fields.get("resourceDepot").set(UnitType.Unused_Cave, false);
    fields.get("refinery").set(UnitType.Unused_Cave, false);
    fields.get("worker").set(UnitType.Unused_Cave, false);
    fields.get("requiresPsi").set(UnitType.Unused_Cave, false);
    fields.get("requiresCreep").set(UnitType.Unused_Cave, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Cave, false);
    fields.get("burrowable").set(UnitType.Unused_Cave, false);
    fields.get("cloakable").set(UnitType.Unused_Cave, false);
    fields.get("building").set(UnitType.Unused_Cave, false);
    fields.get("addon").set(UnitType.Unused_Cave, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Cave, false);
    fields.get("neutral").set(UnitType.Unused_Cave, false);
    fields.get("hero").set(UnitType.Unused_Cave, false);
    fields.get("powerup").set(UnitType.Unused_Cave, false);
    fields.get("beacon").set(UnitType.Unused_Cave, false);
    fields.get("flagBeacon").set(UnitType.Unused_Cave, false);
    fields.get("specialBuilding").set(UnitType.Unused_Cave, false);
    fields.get("spell").set(UnitType.Unused_Cave, false);
    fields.get("producesCreep").set(UnitType.Unused_Cave, false);
    fields.get("producesLarva").set(UnitType.Unused_Cave, false);
    fields.get("mineralField").set(UnitType.Unused_Cave, false);
    fields.get("critter").set(UnitType.Unused_Cave, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Cave, false);
    fields.get("researchesWhat").set(UnitType.Unused_Cave, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Unused_Cave, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unused_Cave_In() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Cave_In, 180);
    fields.get("race").set(UnitType.Unused_Cave_In, null);
    fields.get("whatBuilds").set(UnitType.Unused_Cave_In, null);
    fields.get("buildsWhat").set(UnitType.Unused_Cave_In, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Cave_In, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Cave_In, null);
    fields.get("cloakingTech").set(UnitType.Unused_Cave_In, null);
    fields.get("abilities").set(UnitType.Unused_Cave_In, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Unused_Cave_In, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Cave_In, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Cave_In, 0);
    fields.get("maxShields").set(UnitType.Unused_Cave_In, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Cave_In, 0);
    fields.get("armor").set(UnitType.Unused_Cave_In, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Cave_In, 0);
    fields.get("gasPrice").set(UnitType.Unused_Cave_In, 0);
    fields.get("buildTime").set(UnitType.Unused_Cave_In, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Cave_In, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Cave_In, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Cave_In, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Cave_In, 0);
    fields.get("buildScore").set(UnitType.Unused_Cave_In, 0);
    fields.get("destroyScore").set(UnitType.Unused_Cave_In, 0);
    fields.get("size").set(UnitType.Unused_Cave_In, null);
    fields.get("tileWidth").set(UnitType.Unused_Cave_In, 0);
    fields.get("tileHeight").set(UnitType.Unused_Cave_In, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Cave_In, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Cave_In, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Cave_In, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Cave_In, 0);
    fields.get("width").set(UnitType.Unused_Cave_In, 0);
    fields.get("height").set(UnitType.Unused_Cave_In, 0);
    fields.get("seekRange").set(UnitType.Unused_Cave_In, 0);
    fields.get("sightRange").set(UnitType.Unused_Cave_In, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Cave_In, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Cave_In, 0);
    fields.get("airWeapon").set(UnitType.Unused_Cave_In, null);
    fields.get("maxAirHits").set(UnitType.Unused_Cave_In, 0);
    fields.get("topSpeed").set(UnitType.Unused_Cave_In, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Cave_In, 0);
    fields.get("haltDistance").set(UnitType.Unused_Cave_In, 0);
    fields.get("turnRadius").set(UnitType.Unused_Cave_In, 0);
    fields.get("canProduce").set(UnitType.Unused_Cave_In, false);
    fields.get("canAttack").set(UnitType.Unused_Cave_In, false);
    fields.get("canMove").set(UnitType.Unused_Cave_In, false);
    fields.get("flyer").set(UnitType.Unused_Cave_In, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Cave_In, false);
    fields.get("spellcaster").set(UnitType.Unused_Cave_In, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Cave_In, false);
    fields.get("invincible").set(UnitType.Unused_Cave_In, false);
    fields.get("organic").set(UnitType.Unused_Cave_In, false);
    fields.get("mechanical").set(UnitType.Unused_Cave_In, false);
    fields.get("robotic").set(UnitType.Unused_Cave_In, false);
    fields.get("detector").set(UnitType.Unused_Cave_In, false);
    fields.get("resourceContainer").set(UnitType.Unused_Cave_In, false);
    fields.get("resourceDepot").set(UnitType.Unused_Cave_In, false);
    fields.get("refinery").set(UnitType.Unused_Cave_In, false);
    fields.get("worker").set(UnitType.Unused_Cave_In, false);
    fields.get("requiresPsi").set(UnitType.Unused_Cave_In, false);
    fields.get("requiresCreep").set(UnitType.Unused_Cave_In, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Cave_In, false);
    fields.get("burrowable").set(UnitType.Unused_Cave_In, false);
    fields.get("cloakable").set(UnitType.Unused_Cave_In, false);
    fields.get("building").set(UnitType.Unused_Cave_In, false);
    fields.get("addon").set(UnitType.Unused_Cave_In, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Cave_In, false);
    fields.get("neutral").set(UnitType.Unused_Cave_In, false);
    fields.get("hero").set(UnitType.Unused_Cave_In, false);
    fields.get("powerup").set(UnitType.Unused_Cave_In, false);
    fields.get("beacon").set(UnitType.Unused_Cave_In, false);
    fields.get("flagBeacon").set(UnitType.Unused_Cave_In, false);
    fields.get("specialBuilding").set(UnitType.Unused_Cave_In, false);
    fields.get("spell").set(UnitType.Unused_Cave_In, false);
    fields.get("producesCreep").set(UnitType.Unused_Cave_In, false);
    fields.get("producesLarva").set(UnitType.Unused_Cave_In, false);
    fields.get("mineralField").set(UnitType.Unused_Cave_In, false);
    fields.get("critter").set(UnitType.Unused_Cave_In, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Cave_In, false);
    fields.get("researchesWhat").set(UnitType.Unused_Cave_In, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Unused_Cave_In, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unused_Cantina() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Cantina, 181);
    fields.get("race").set(UnitType.Unused_Cantina, null);
    fields.get("whatBuilds").set(UnitType.Unused_Cantina, null);
    fields.get("buildsWhat").set(UnitType.Unused_Cantina, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Cantina, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Cantina, null);
    fields.get("cloakingTech").set(UnitType.Unused_Cantina, null);
    fields.get("abilities").set(UnitType.Unused_Cantina, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Unused_Cantina, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Cantina, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Cantina, 0);
    fields.get("maxShields").set(UnitType.Unused_Cantina, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Cantina, 0);
    fields.get("armor").set(UnitType.Unused_Cantina, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Cantina, 0);
    fields.get("gasPrice").set(UnitType.Unused_Cantina, 0);
    fields.get("buildTime").set(UnitType.Unused_Cantina, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Cantina, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Cantina, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Cantina, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Cantina, 0);
    fields.get("buildScore").set(UnitType.Unused_Cantina, 0);
    fields.get("destroyScore").set(UnitType.Unused_Cantina, 0);
    fields.get("size").set(UnitType.Unused_Cantina, null);
    fields.get("tileWidth").set(UnitType.Unused_Cantina, 0);
    fields.get("tileHeight").set(UnitType.Unused_Cantina, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Cantina, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Cantina, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Cantina, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Cantina, 0);
    fields.get("width").set(UnitType.Unused_Cantina, 0);
    fields.get("height").set(UnitType.Unused_Cantina, 0);
    fields.get("seekRange").set(UnitType.Unused_Cantina, 0);
    fields.get("sightRange").set(UnitType.Unused_Cantina, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Cantina, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Cantina, 0);
    fields.get("airWeapon").set(UnitType.Unused_Cantina, null);
    fields.get("maxAirHits").set(UnitType.Unused_Cantina, 0);
    fields.get("topSpeed").set(UnitType.Unused_Cantina, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Cantina, 0);
    fields.get("haltDistance").set(UnitType.Unused_Cantina, 0);
    fields.get("turnRadius").set(UnitType.Unused_Cantina, 0);
    fields.get("canProduce").set(UnitType.Unused_Cantina, false);
    fields.get("canAttack").set(UnitType.Unused_Cantina, false);
    fields.get("canMove").set(UnitType.Unused_Cantina, false);
    fields.get("flyer").set(UnitType.Unused_Cantina, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Cantina, false);
    fields.get("spellcaster").set(UnitType.Unused_Cantina, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Cantina, false);
    fields.get("invincible").set(UnitType.Unused_Cantina, false);
    fields.get("organic").set(UnitType.Unused_Cantina, false);
    fields.get("mechanical").set(UnitType.Unused_Cantina, false);
    fields.get("robotic").set(UnitType.Unused_Cantina, false);
    fields.get("detector").set(UnitType.Unused_Cantina, false);
    fields.get("resourceContainer").set(UnitType.Unused_Cantina, false);
    fields.get("resourceDepot").set(UnitType.Unused_Cantina, false);
    fields.get("refinery").set(UnitType.Unused_Cantina, false);
    fields.get("worker").set(UnitType.Unused_Cantina, false);
    fields.get("requiresPsi").set(UnitType.Unused_Cantina, false);
    fields.get("requiresCreep").set(UnitType.Unused_Cantina, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Cantina, false);
    fields.get("burrowable").set(UnitType.Unused_Cantina, false);
    fields.get("cloakable").set(UnitType.Unused_Cantina, false);
    fields.get("building").set(UnitType.Unused_Cantina, false);
    fields.get("addon").set(UnitType.Unused_Cantina, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Cantina, false);
    fields.get("neutral").set(UnitType.Unused_Cantina, false);
    fields.get("hero").set(UnitType.Unused_Cantina, false);
    fields.get("powerup").set(UnitType.Unused_Cantina, false);
    fields.get("beacon").set(UnitType.Unused_Cantina, false);
    fields.get("flagBeacon").set(UnitType.Unused_Cantina, false);
    fields.get("specialBuilding").set(UnitType.Unused_Cantina, false);
    fields.get("spell").set(UnitType.Unused_Cantina, false);
    fields.get("producesCreep").set(UnitType.Unused_Cantina, false);
    fields.get("producesLarva").set(UnitType.Unused_Cantina, false);
    fields.get("mineralField").set(UnitType.Unused_Cantina, false);
    fields.get("critter").set(UnitType.Unused_Cantina, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Cantina, false);
    fields.get("researchesWhat").set(UnitType.Unused_Cantina, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Unused_Cantina, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unused_Mining_Platform() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Mining_Platform, 182);
    fields.get("race").set(UnitType.Unused_Mining_Platform, null);
    fields.get("whatBuilds").set(UnitType.Unused_Mining_Platform, null);
    fields.get("buildsWhat").set(UnitType.Unused_Mining_Platform, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Mining_Platform, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Mining_Platform, null);
    fields.get("cloakingTech").set(UnitType.Unused_Mining_Platform, null);
    fields.get("abilities").set(UnitType.Unused_Mining_Platform, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Unused_Mining_Platform, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Mining_Platform, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("maxShields").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("armor").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("gasPrice").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("buildTime").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("buildScore").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("destroyScore").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("size").set(UnitType.Unused_Mining_Platform, null);
    fields.get("tileWidth").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("tileHeight").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("width").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("height").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("seekRange").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("sightRange").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Mining_Platform, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("airWeapon").set(UnitType.Unused_Mining_Platform, null);
    fields.get("maxAirHits").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("topSpeed").set(UnitType.Unused_Mining_Platform, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("haltDistance").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("turnRadius").set(UnitType.Unused_Mining_Platform, 0);
    fields.get("canProduce").set(UnitType.Unused_Mining_Platform, false);
    fields.get("canAttack").set(UnitType.Unused_Mining_Platform, false);
    fields.get("canMove").set(UnitType.Unused_Mining_Platform, false);
    fields.get("flyer").set(UnitType.Unused_Mining_Platform, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Mining_Platform, false);
    fields.get("spellcaster").set(UnitType.Unused_Mining_Platform, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Mining_Platform, false);
    fields.get("invincible").set(UnitType.Unused_Mining_Platform, false);
    fields.get("organic").set(UnitType.Unused_Mining_Platform, false);
    fields.get("mechanical").set(UnitType.Unused_Mining_Platform, false);
    fields.get("robotic").set(UnitType.Unused_Mining_Platform, false);
    fields.get("detector").set(UnitType.Unused_Mining_Platform, false);
    fields.get("resourceContainer").set(UnitType.Unused_Mining_Platform, false);
    fields.get("resourceDepot").set(UnitType.Unused_Mining_Platform, false);
    fields.get("refinery").set(UnitType.Unused_Mining_Platform, false);
    fields.get("worker").set(UnitType.Unused_Mining_Platform, false);
    fields.get("requiresPsi").set(UnitType.Unused_Mining_Platform, false);
    fields.get("requiresCreep").set(UnitType.Unused_Mining_Platform, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Mining_Platform, false);
    fields.get("burrowable").set(UnitType.Unused_Mining_Platform, false);
    fields.get("cloakable").set(UnitType.Unused_Mining_Platform, false);
    fields.get("building").set(UnitType.Unused_Mining_Platform, false);
    fields.get("addon").set(UnitType.Unused_Mining_Platform, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Mining_Platform, false);
    fields.get("neutral").set(UnitType.Unused_Mining_Platform, false);
    fields.get("hero").set(UnitType.Unused_Mining_Platform, false);
    fields.get("powerup").set(UnitType.Unused_Mining_Platform, false);
    fields.get("beacon").set(UnitType.Unused_Mining_Platform, false);
    fields.get("flagBeacon").set(UnitType.Unused_Mining_Platform, false);
    fields.get("specialBuilding").set(UnitType.Unused_Mining_Platform, false);
    fields.get("spell").set(UnitType.Unused_Mining_Platform, false);
    fields.get("producesCreep").set(UnitType.Unused_Mining_Platform, false);
    fields.get("producesLarva").set(UnitType.Unused_Mining_Platform, false);
    fields.get("mineralField").set(UnitType.Unused_Mining_Platform, false);
    fields.get("critter").set(UnitType.Unused_Mining_Platform, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Mining_Platform, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Unused_Mining_Platform, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Unused_Mining_Platform, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unused_Independant_Command_Center() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Independant_Command_Center, 183);
    fields.get("race").set(UnitType.Unused_Independant_Command_Center, null);
    fields.get("whatBuilds").set(UnitType.Unused_Independant_Command_Center, null);
    fields
        .get("buildsWhat")
        .set(UnitType.Unused_Independant_Command_Center, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Independant_Command_Center, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Independant_Command_Center, null);
    fields.get("cloakingTech").set(UnitType.Unused_Independant_Command_Center, null);
    fields
        .get("abilities")
        .set(UnitType.Unused_Independant_Command_Center, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Unused_Independant_Command_Center, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Independant_Command_Center, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("maxShields").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("armor").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("gasPrice").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("buildTime").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("buildScore").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("destroyScore").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("size").set(UnitType.Unused_Independant_Command_Center, null);
    fields.get("tileWidth").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("tileHeight").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("width").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("height").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("seekRange").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("sightRange").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Independant_Command_Center, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("airWeapon").set(UnitType.Unused_Independant_Command_Center, null);
    fields.get("maxAirHits").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("topSpeed").set(UnitType.Unused_Independant_Command_Center, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("haltDistance").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("turnRadius").set(UnitType.Unused_Independant_Command_Center, 0);
    fields.get("canProduce").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("canAttack").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("canMove").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("flyer").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("spellcaster").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("invincible").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("organic").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("mechanical").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("robotic").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("detector").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("resourceContainer").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("resourceDepot").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("refinery").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("worker").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("requiresPsi").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("requiresCreep").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("burrowable").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("cloakable").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("building").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("addon").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("neutral").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("hero").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("powerup").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("beacon").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("flagBeacon").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("specialBuilding").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("spell").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("producesCreep").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("producesLarva").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("mineralField").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("critter").set(UnitType.Unused_Independant_Command_Center, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Independant_Command_Center, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Unused_Independant_Command_Center, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Unused_Independant_Command_Center, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Independant_Starport() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Independant_Starport, 184);
    fields.get("race").set(UnitType.Special_Independant_Starport, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Independant_Starport, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Special_Independant_Starport, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Independant_Starport, toMap());
    fields.get("requiredTech").set(UnitType.Special_Independant_Starport, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Independant_Starport, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Special_Independant_Starport, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Special_Independant_Starport, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Independant_Starport, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Independant_Starport, 800);
    fields.get("maxShields").set(UnitType.Special_Independant_Starport, 0);
    fields.get("maxEnergy").set(UnitType.Special_Independant_Starport, 0);
    fields.get("armor").set(UnitType.Special_Independant_Starport, 0);
    fields.get("mineralPrice").set(UnitType.Special_Independant_Starport, 1);
    fields.get("gasPrice").set(UnitType.Special_Independant_Starport, 1);
    fields.get("buildTime").set(UnitType.Special_Independant_Starport, 1);
    fields.get("supplyRequired").set(UnitType.Special_Independant_Starport, 0);
    fields.get("supplyProvided").set(UnitType.Special_Independant_Starport, 0);
    fields.get("spaceRequired").set(UnitType.Special_Independant_Starport, 255);
    fields.get("spaceProvided").set(UnitType.Special_Independant_Starport, 0);
    fields.get("buildScore").set(UnitType.Special_Independant_Starport, 10);
    fields.get("destroyScore").set(UnitType.Special_Independant_Starport, 10);
    fields.get("size").set(UnitType.Special_Independant_Starport, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Special_Independant_Starport, 2);
    fields.get("tileHeight").set(UnitType.Special_Independant_Starport, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Independant_Starport, 32);
    fields.get("dimensionUp").set(UnitType.Special_Independant_Starport, 32);
    fields.get("dimensionRight").set(UnitType.Special_Independant_Starport, 31);
    fields.get("dimensionDown").set(UnitType.Special_Independant_Starport, 31);
    fields.get("width").set(UnitType.Special_Independant_Starport, 64);
    fields.get("height").set(UnitType.Special_Independant_Starport, 64);
    fields.get("seekRange").set(UnitType.Special_Independant_Starport, 0);
    fields.get("sightRange").set(UnitType.Special_Independant_Starport, 288);
    fields
        .get("groundWeapon")
        .set(UnitType.Special_Independant_Starport, WeaponType.Independant_Laser_Battery);
    fields.get("maxGroundHits").set(UnitType.Special_Independant_Starport, 1);
    fields.get("airWeapon").set(UnitType.Special_Independant_Starport, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Independant_Starport, 0);
    fields.get("topSpeed").set(UnitType.Special_Independant_Starport, 0.0);
    fields.get("acceleration").set(UnitType.Special_Independant_Starport, 0);
    fields.get("haltDistance").set(UnitType.Special_Independant_Starport, 0);
    fields.get("turnRadius").set(UnitType.Special_Independant_Starport, 0);
    fields.get("canProduce").set(UnitType.Special_Independant_Starport, false);
    fields.get("canAttack").set(UnitType.Special_Independant_Starport, false);
    fields.get("canMove").set(UnitType.Special_Independant_Starport, false);
    fields.get("flyer").set(UnitType.Special_Independant_Starport, false);
    fields.get("regeneratesHP").set(UnitType.Special_Independant_Starport, false);
    fields.get("spellcaster").set(UnitType.Special_Independant_Starport, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Independant_Starport, false);
    fields.get("invincible").set(UnitType.Special_Independant_Starport, false);
    fields.get("organic").set(UnitType.Special_Independant_Starport, false);
    fields.get("mechanical").set(UnitType.Special_Independant_Starport, true);
    fields.get("robotic").set(UnitType.Special_Independant_Starport, false);
    fields.get("detector").set(UnitType.Special_Independant_Starport, false);
    fields.get("resourceContainer").set(UnitType.Special_Independant_Starport, false);
    fields.get("resourceDepot").set(UnitType.Special_Independant_Starport, false);
    fields.get("refinery").set(UnitType.Special_Independant_Starport, false);
    fields.get("worker").set(UnitType.Special_Independant_Starport, false);
    fields.get("requiresPsi").set(UnitType.Special_Independant_Starport, false);
    fields.get("requiresCreep").set(UnitType.Special_Independant_Starport, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Independant_Starport, false);
    fields.get("burrowable").set(UnitType.Special_Independant_Starport, false);
    fields.get("cloakable").set(UnitType.Special_Independant_Starport, false);
    fields.get("building").set(UnitType.Special_Independant_Starport, true);
    fields.get("addon").set(UnitType.Special_Independant_Starport, false);
    fields.get("flyingBuilding").set(UnitType.Special_Independant_Starport, false);
    fields.get("neutral").set(UnitType.Special_Independant_Starport, false);
    fields.get("hero").set(UnitType.Special_Independant_Starport, false);
    fields.get("powerup").set(UnitType.Special_Independant_Starport, false);
    fields.get("beacon").set(UnitType.Special_Independant_Starport, false);
    fields.get("flagBeacon").set(UnitType.Special_Independant_Starport, false);
    fields.get("specialBuilding").set(UnitType.Special_Independant_Starport, true);
    fields.get("spell").set(UnitType.Special_Independant_Starport, false);
    fields.get("producesCreep").set(UnitType.Special_Independant_Starport, false);
    fields.get("producesLarva").set(UnitType.Special_Independant_Starport, false);
    fields.get("mineralField").set(UnitType.Special_Independant_Starport, false);
    fields.get("critter").set(UnitType.Special_Independant_Starport, false);
    fields.get("canBuildAddon").set(UnitType.Special_Independant_Starport, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Independant_Starport, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Independant_Starport, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unused_Independant_Jump_Gate() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Independant_Jump_Gate, 185);
    fields.get("race").set(UnitType.Unused_Independant_Jump_Gate, null);
    fields.get("whatBuilds").set(UnitType.Unused_Independant_Jump_Gate, null);
    fields
        .get("buildsWhat")
        .set(UnitType.Unused_Independant_Jump_Gate, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Independant_Jump_Gate, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Independant_Jump_Gate, null);
    fields.get("cloakingTech").set(UnitType.Unused_Independant_Jump_Gate, null);
    fields
        .get("abilities")
        .set(UnitType.Unused_Independant_Jump_Gate, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Unused_Independant_Jump_Gate, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Independant_Jump_Gate, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("maxShields").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("armor").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("gasPrice").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("buildTime").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("buildScore").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("destroyScore").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("size").set(UnitType.Unused_Independant_Jump_Gate, null);
    fields.get("tileWidth").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("tileHeight").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("width").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("height").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("seekRange").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("sightRange").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Independant_Jump_Gate, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("airWeapon").set(UnitType.Unused_Independant_Jump_Gate, null);
    fields.get("maxAirHits").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("topSpeed").set(UnitType.Unused_Independant_Jump_Gate, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("haltDistance").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("turnRadius").set(UnitType.Unused_Independant_Jump_Gate, 0);
    fields.get("canProduce").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("canAttack").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("canMove").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("flyer").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("spellcaster").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("invincible").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("organic").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("mechanical").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("robotic").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("detector").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("resourceContainer").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("resourceDepot").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("refinery").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("worker").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("requiresPsi").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("requiresCreep").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("burrowable").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("cloakable").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("building").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("addon").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("neutral").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("hero").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("powerup").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("beacon").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("flagBeacon").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("specialBuilding").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("spell").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("producesCreep").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("producesLarva").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("mineralField").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("critter").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Independant_Jump_Gate, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Unused_Independant_Jump_Gate, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Unused_Independant_Jump_Gate, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unused_Ruins() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Ruins, 186);
    fields.get("race").set(UnitType.Unused_Ruins, null);
    fields.get("whatBuilds").set(UnitType.Unused_Ruins, null);
    fields.get("buildsWhat").set(UnitType.Unused_Ruins, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Ruins, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Ruins, null);
    fields.get("cloakingTech").set(UnitType.Unused_Ruins, null);
    fields.get("abilities").set(UnitType.Unused_Ruins, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Unused_Ruins, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Ruins, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Ruins, 0);
    fields.get("maxShields").set(UnitType.Unused_Ruins, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Ruins, 0);
    fields.get("armor").set(UnitType.Unused_Ruins, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Ruins, 0);
    fields.get("gasPrice").set(UnitType.Unused_Ruins, 0);
    fields.get("buildTime").set(UnitType.Unused_Ruins, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Ruins, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Ruins, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Ruins, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Ruins, 0);
    fields.get("buildScore").set(UnitType.Unused_Ruins, 0);
    fields.get("destroyScore").set(UnitType.Unused_Ruins, 0);
    fields.get("size").set(UnitType.Unused_Ruins, null);
    fields.get("tileWidth").set(UnitType.Unused_Ruins, 0);
    fields.get("tileHeight").set(UnitType.Unused_Ruins, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Ruins, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Ruins, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Ruins, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Ruins, 0);
    fields.get("width").set(UnitType.Unused_Ruins, 0);
    fields.get("height").set(UnitType.Unused_Ruins, 0);
    fields.get("seekRange").set(UnitType.Unused_Ruins, 0);
    fields.get("sightRange").set(UnitType.Unused_Ruins, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Ruins, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Ruins, 0);
    fields.get("airWeapon").set(UnitType.Unused_Ruins, null);
    fields.get("maxAirHits").set(UnitType.Unused_Ruins, 0);
    fields.get("topSpeed").set(UnitType.Unused_Ruins, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Ruins, 0);
    fields.get("haltDistance").set(UnitType.Unused_Ruins, 0);
    fields.get("turnRadius").set(UnitType.Unused_Ruins, 0);
    fields.get("canProduce").set(UnitType.Unused_Ruins, false);
    fields.get("canAttack").set(UnitType.Unused_Ruins, false);
    fields.get("canMove").set(UnitType.Unused_Ruins, false);
    fields.get("flyer").set(UnitType.Unused_Ruins, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Ruins, false);
    fields.get("spellcaster").set(UnitType.Unused_Ruins, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Ruins, false);
    fields.get("invincible").set(UnitType.Unused_Ruins, false);
    fields.get("organic").set(UnitType.Unused_Ruins, false);
    fields.get("mechanical").set(UnitType.Unused_Ruins, false);
    fields.get("robotic").set(UnitType.Unused_Ruins, false);
    fields.get("detector").set(UnitType.Unused_Ruins, false);
    fields.get("resourceContainer").set(UnitType.Unused_Ruins, false);
    fields.get("resourceDepot").set(UnitType.Unused_Ruins, false);
    fields.get("refinery").set(UnitType.Unused_Ruins, false);
    fields.get("worker").set(UnitType.Unused_Ruins, false);
    fields.get("requiresPsi").set(UnitType.Unused_Ruins, false);
    fields.get("requiresCreep").set(UnitType.Unused_Ruins, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Ruins, false);
    fields.get("burrowable").set(UnitType.Unused_Ruins, false);
    fields.get("cloakable").set(UnitType.Unused_Ruins, false);
    fields.get("building").set(UnitType.Unused_Ruins, false);
    fields.get("addon").set(UnitType.Unused_Ruins, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Ruins, false);
    fields.get("neutral").set(UnitType.Unused_Ruins, false);
    fields.get("hero").set(UnitType.Unused_Ruins, false);
    fields.get("powerup").set(UnitType.Unused_Ruins, false);
    fields.get("beacon").set(UnitType.Unused_Ruins, false);
    fields.get("flagBeacon").set(UnitType.Unused_Ruins, false);
    fields.get("specialBuilding").set(UnitType.Unused_Ruins, false);
    fields.get("spell").set(UnitType.Unused_Ruins, false);
    fields.get("producesCreep").set(UnitType.Unused_Ruins, false);
    fields.get("producesLarva").set(UnitType.Unused_Ruins, false);
    fields.get("mineralField").set(UnitType.Unused_Ruins, false);
    fields.get("critter").set(UnitType.Unused_Ruins, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Ruins, false);
    fields.get("researchesWhat").set(UnitType.Unused_Ruins, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Unused_Ruins, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unused_Khaydarin_Crystal_Formation() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Khaydarin_Crystal_Formation, 187);
    fields.get("race").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
    fields.get("whatBuilds").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
    fields
        .get("buildsWhat")
        .set(UnitType.Unused_Khaydarin_Crystal_Formation, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Khaydarin_Crystal_Formation, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
    fields.get("cloakingTech").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
    fields
        .get("abilities")
        .set(UnitType.Unused_Khaydarin_Crystal_Formation, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Unused_Khaydarin_Crystal_Formation, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("maxShields").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("armor").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("gasPrice").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("buildTime").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("buildScore").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("destroyScore").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("size").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
    fields.get("tileWidth").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("tileHeight").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("width").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("height").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("seekRange").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("sightRange").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("airWeapon").set(UnitType.Unused_Khaydarin_Crystal_Formation, null);
    fields.get("maxAirHits").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("topSpeed").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("haltDistance").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("turnRadius").set(UnitType.Unused_Khaydarin_Crystal_Formation, 0);
    fields.get("canProduce").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("canAttack").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("canMove").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("flyer").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("spellcaster").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("invincible").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("organic").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("mechanical").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("robotic").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("detector").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("resourceContainer").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("resourceDepot").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("refinery").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("worker").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("requiresPsi").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("requiresCreep").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("burrowable").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("cloakable").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("building").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("addon").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("neutral").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("hero").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("powerup").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("beacon").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("flagBeacon").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("specialBuilding").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("spell").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("producesCreep").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("producesLarva").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("mineralField").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("critter").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Khaydarin_Crystal_Formation, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Unused_Khaydarin_Crystal_Formation, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Unused_Khaydarin_Crystal_Formation, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Resource_Vespene_Geyser() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Resource_Vespene_Geyser, 188);
    fields.get("race").set(UnitType.Resource_Vespene_Geyser, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Resource_Vespene_Geyser, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Resource_Vespene_Geyser, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Resource_Vespene_Geyser, toMap());
    fields.get("requiredTech").set(UnitType.Resource_Vespene_Geyser, TechType.None);
    fields.get("cloakingTech").set(UnitType.Resource_Vespene_Geyser, TechType.None);
    fields.get("abilities").set(UnitType.Resource_Vespene_Geyser, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Resource_Vespene_Geyser, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Resource_Vespene_Geyser, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Resource_Vespene_Geyser, 100000);
    fields.get("maxShields").set(UnitType.Resource_Vespene_Geyser, 0);
    fields.get("maxEnergy").set(UnitType.Resource_Vespene_Geyser, 0);
    fields.get("armor").set(UnitType.Resource_Vespene_Geyser, 0);
    fields.get("mineralPrice").set(UnitType.Resource_Vespene_Geyser, 1);
    fields.get("gasPrice").set(UnitType.Resource_Vespene_Geyser, 1);
    fields.get("buildTime").set(UnitType.Resource_Vespene_Geyser, 1);
    fields.get("supplyRequired").set(UnitType.Resource_Vespene_Geyser, 0);
    fields.get("supplyProvided").set(UnitType.Resource_Vespene_Geyser, 0);
    fields.get("spaceRequired").set(UnitType.Resource_Vespene_Geyser, 255);
    fields.get("spaceProvided").set(UnitType.Resource_Vespene_Geyser, 0);
    fields.get("buildScore").set(UnitType.Resource_Vespene_Geyser, 10);
    fields.get("destroyScore").set(UnitType.Resource_Vespene_Geyser, 10);
    fields.get("size").set(UnitType.Resource_Vespene_Geyser, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Resource_Vespene_Geyser, 4);
    fields.get("tileHeight").set(UnitType.Resource_Vespene_Geyser, 2);
    fields.get("dimensionLeft").set(UnitType.Resource_Vespene_Geyser, 64);
    fields.get("dimensionUp").set(UnitType.Resource_Vespene_Geyser, 32);
    fields.get("dimensionRight").set(UnitType.Resource_Vespene_Geyser, 63);
    fields.get("dimensionDown").set(UnitType.Resource_Vespene_Geyser, 31);
    fields.get("width").set(UnitType.Resource_Vespene_Geyser, 128);
    fields.get("height").set(UnitType.Resource_Vespene_Geyser, 64);
    fields.get("seekRange").set(UnitType.Resource_Vespene_Geyser, 0);
    fields.get("sightRange").set(UnitType.Resource_Vespene_Geyser, 288);
    fields.get("groundWeapon").set(UnitType.Resource_Vespene_Geyser, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Resource_Vespene_Geyser, 0);
    fields.get("airWeapon").set(UnitType.Resource_Vespene_Geyser, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Resource_Vespene_Geyser, 0);
    fields.get("topSpeed").set(UnitType.Resource_Vespene_Geyser, 0.0);
    fields.get("acceleration").set(UnitType.Resource_Vespene_Geyser, 0);
    fields.get("haltDistance").set(UnitType.Resource_Vespene_Geyser, 0);
    fields.get("turnRadius").set(UnitType.Resource_Vespene_Geyser, 0);
    fields.get("canProduce").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("canAttack").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("canMove").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("flyer").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("regeneratesHP").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("spellcaster").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("hasPermanentCloak").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("invincible").set(UnitType.Resource_Vespene_Geyser, true);
    fields.get("organic").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("mechanical").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("robotic").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("detector").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("resourceContainer").set(UnitType.Resource_Vespene_Geyser, true);
    fields.get("resourceDepot").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("refinery").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("worker").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("requiresPsi").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("requiresCreep").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("burrowable").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("cloakable").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("building").set(UnitType.Resource_Vespene_Geyser, true);
    fields.get("addon").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("flyingBuilding").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("neutral").set(UnitType.Resource_Vespene_Geyser, true);
    fields.get("hero").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("powerup").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("beacon").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("flagBeacon").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("specialBuilding").set(UnitType.Resource_Vespene_Geyser, true);
    fields.get("spell").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("producesCreep").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("producesLarva").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("mineralField").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("critter").set(UnitType.Resource_Vespene_Geyser, false);
    fields.get("canBuildAddon").set(UnitType.Resource_Vespene_Geyser, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Resource_Vespene_Geyser, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Resource_Vespene_Geyser, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Warp_Gate() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Warp_Gate, 189);
    fields.get("race").set(UnitType.Special_Warp_Gate, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Warp_Gate, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Warp_Gate, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Warp_Gate, toMap());
    fields.get("requiredTech").set(UnitType.Special_Warp_Gate, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Warp_Gate, TechType.None);
    fields.get("abilities").set(UnitType.Special_Warp_Gate, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Warp_Gate, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Warp_Gate, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Warp_Gate, 700);
    fields.get("maxShields").set(UnitType.Special_Warp_Gate, 0);
    fields.get("maxEnergy").set(UnitType.Special_Warp_Gate, 0);
    fields.get("armor").set(UnitType.Special_Warp_Gate, 1);
    fields.get("mineralPrice").set(UnitType.Special_Warp_Gate, 600);
    fields.get("gasPrice").set(UnitType.Special_Warp_Gate, 200);
    fields.get("buildTime").set(UnitType.Special_Warp_Gate, 2400);
    fields.get("supplyRequired").set(UnitType.Special_Warp_Gate, 0);
    fields.get("supplyProvided").set(UnitType.Special_Warp_Gate, 0);
    fields.get("spaceRequired").set(UnitType.Special_Warp_Gate, 255);
    fields.get("spaceProvided").set(UnitType.Special_Warp_Gate, 0);
    fields.get("buildScore").set(UnitType.Special_Warp_Gate, 0);
    fields.get("destroyScore").set(UnitType.Special_Warp_Gate, 2000);
    fields.get("size").set(UnitType.Special_Warp_Gate, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Warp_Gate, 3);
    fields.get("tileHeight").set(UnitType.Special_Warp_Gate, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Warp_Gate, 48);
    fields.get("dimensionUp").set(UnitType.Special_Warp_Gate, 32);
    fields.get("dimensionRight").set(UnitType.Special_Warp_Gate, 47);
    fields.get("dimensionDown").set(UnitType.Special_Warp_Gate, 31);
    fields.get("width").set(UnitType.Special_Warp_Gate, 96);
    fields.get("height").set(UnitType.Special_Warp_Gate, 64);
    fields.get("seekRange").set(UnitType.Special_Warp_Gate, 0);
    fields.get("sightRange").set(UnitType.Special_Warp_Gate, 256);
    fields.get("groundWeapon").set(UnitType.Special_Warp_Gate, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Warp_Gate, 0);
    fields.get("airWeapon").set(UnitType.Special_Warp_Gate, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Warp_Gate, 0);
    fields.get("topSpeed").set(UnitType.Special_Warp_Gate, 0.0);
    fields.get("acceleration").set(UnitType.Special_Warp_Gate, 0);
    fields.get("haltDistance").set(UnitType.Special_Warp_Gate, 0);
    fields.get("turnRadius").set(UnitType.Special_Warp_Gate, 0);
    fields.get("canProduce").set(UnitType.Special_Warp_Gate, false);
    fields.get("canAttack").set(UnitType.Special_Warp_Gate, false);
    fields.get("canMove").set(UnitType.Special_Warp_Gate, false);
    fields.get("flyer").set(UnitType.Special_Warp_Gate, false);
    fields.get("regeneratesHP").set(UnitType.Special_Warp_Gate, false);
    fields.get("spellcaster").set(UnitType.Special_Warp_Gate, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Warp_Gate, false);
    fields.get("invincible").set(UnitType.Special_Warp_Gate, false);
    fields.get("organic").set(UnitType.Special_Warp_Gate, false);
    fields.get("mechanical").set(UnitType.Special_Warp_Gate, true);
    fields.get("robotic").set(UnitType.Special_Warp_Gate, false);
    fields.get("detector").set(UnitType.Special_Warp_Gate, false);
    fields.get("resourceContainer").set(UnitType.Special_Warp_Gate, false);
    fields.get("resourceDepot").set(UnitType.Special_Warp_Gate, false);
    fields.get("refinery").set(UnitType.Special_Warp_Gate, false);
    fields.get("worker").set(UnitType.Special_Warp_Gate, false);
    fields.get("requiresPsi").set(UnitType.Special_Warp_Gate, false);
    fields.get("requiresCreep").set(UnitType.Special_Warp_Gate, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Warp_Gate, false);
    fields.get("burrowable").set(UnitType.Special_Warp_Gate, false);
    fields.get("cloakable").set(UnitType.Special_Warp_Gate, false);
    fields.get("building").set(UnitType.Special_Warp_Gate, true);
    fields.get("addon").set(UnitType.Special_Warp_Gate, false);
    fields.get("flyingBuilding").set(UnitType.Special_Warp_Gate, false);
    fields.get("neutral").set(UnitType.Special_Warp_Gate, false);
    fields.get("hero").set(UnitType.Special_Warp_Gate, false);
    fields.get("powerup").set(UnitType.Special_Warp_Gate, false);
    fields.get("beacon").set(UnitType.Special_Warp_Gate, false);
    fields.get("flagBeacon").set(UnitType.Special_Warp_Gate, false);
    fields.get("specialBuilding").set(UnitType.Special_Warp_Gate, true);
    fields.get("spell").set(UnitType.Special_Warp_Gate, false);
    fields.get("producesCreep").set(UnitType.Special_Warp_Gate, false);
    fields.get("producesLarva").set(UnitType.Special_Warp_Gate, false);
    fields.get("mineralField").set(UnitType.Special_Warp_Gate, false);
    fields.get("critter").set(UnitType.Special_Warp_Gate, false);
    fields.get("canBuildAddon").set(UnitType.Special_Warp_Gate, false);
    fields.get("researchesWhat").set(UnitType.Special_Warp_Gate, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Warp_Gate, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Psi_Disrupter() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Psi_Disrupter, 190);
    fields.get("race").set(UnitType.Special_Psi_Disrupter, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Psi_Disrupter, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Psi_Disrupter, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Psi_Disrupter, toMap());
    fields.get("requiredTech").set(UnitType.Special_Psi_Disrupter, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Psi_Disrupter, TechType.None);
    fields.get("abilities").set(UnitType.Special_Psi_Disrupter, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Psi_Disrupter, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Psi_Disrupter, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Psi_Disrupter, 2000);
    fields.get("maxShields").set(UnitType.Special_Psi_Disrupter, 0);
    fields.get("maxEnergy").set(UnitType.Special_Psi_Disrupter, 0);
    fields.get("armor").set(UnitType.Special_Psi_Disrupter, 1);
    fields.get("mineralPrice").set(UnitType.Special_Psi_Disrupter, 1000);
    fields.get("gasPrice").set(UnitType.Special_Psi_Disrupter, 400);
    fields.get("buildTime").set(UnitType.Special_Psi_Disrupter, 4800);
    fields.get("supplyRequired").set(UnitType.Special_Psi_Disrupter, 0);
    fields.get("supplyProvided").set(UnitType.Special_Psi_Disrupter, 0);
    fields.get("spaceRequired").set(UnitType.Special_Psi_Disrupter, 255);
    fields.get("spaceProvided").set(UnitType.Special_Psi_Disrupter, 0);
    fields.get("buildScore").set(UnitType.Special_Psi_Disrupter, 0);
    fields.get("destroyScore").set(UnitType.Special_Psi_Disrupter, 3600);
    fields.get("size").set(UnitType.Special_Psi_Disrupter, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Psi_Disrupter, 5);
    fields.get("tileHeight").set(UnitType.Special_Psi_Disrupter, 3);
    fields.get("dimensionLeft").set(UnitType.Special_Psi_Disrupter, 80);
    fields.get("dimensionUp").set(UnitType.Special_Psi_Disrupter, 38);
    fields.get("dimensionRight").set(UnitType.Special_Psi_Disrupter, 69);
    fields.get("dimensionDown").set(UnitType.Special_Psi_Disrupter, 47);
    fields.get("width").set(UnitType.Special_Psi_Disrupter, 150);
    fields.get("height").set(UnitType.Special_Psi_Disrupter, 86);
    fields.get("seekRange").set(UnitType.Special_Psi_Disrupter, 0);
    fields.get("sightRange").set(UnitType.Special_Psi_Disrupter, 320);
    fields.get("groundWeapon").set(UnitType.Special_Psi_Disrupter, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Psi_Disrupter, 0);
    fields.get("airWeapon").set(UnitType.Special_Psi_Disrupter, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Psi_Disrupter, 0);
    fields.get("topSpeed").set(UnitType.Special_Psi_Disrupter, 0.0);
    fields.get("acceleration").set(UnitType.Special_Psi_Disrupter, 0);
    fields.get("haltDistance").set(UnitType.Special_Psi_Disrupter, 0);
    fields.get("turnRadius").set(UnitType.Special_Psi_Disrupter, 0);
    fields.get("canProduce").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("canAttack").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("canMove").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("flyer").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("regeneratesHP").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("spellcaster").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("invincible").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("organic").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("mechanical").set(UnitType.Special_Psi_Disrupter, true);
    fields.get("robotic").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("detector").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("resourceContainer").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("resourceDepot").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("refinery").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("worker").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("requiresPsi").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("requiresCreep").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("burrowable").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("cloakable").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("building").set(UnitType.Special_Psi_Disrupter, true);
    fields.get("addon").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("flyingBuilding").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("neutral").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("hero").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("powerup").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("beacon").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("flagBeacon").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("specialBuilding").set(UnitType.Special_Psi_Disrupter, true);
    fields.get("spell").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("producesCreep").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("producesLarva").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("mineralField").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("critter").set(UnitType.Special_Psi_Disrupter, false);
    fields.get("canBuildAddon").set(UnitType.Special_Psi_Disrupter, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Psi_Disrupter, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Psi_Disrupter, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unused_Zerg_Marker() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Zerg_Marker, 191);
    fields.get("race").set(UnitType.Unused_Zerg_Marker, null);
    fields.get("whatBuilds").set(UnitType.Unused_Zerg_Marker, null);
    fields.get("buildsWhat").set(UnitType.Unused_Zerg_Marker, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Zerg_Marker, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Zerg_Marker, null);
    fields.get("cloakingTech").set(UnitType.Unused_Zerg_Marker, null);
    fields.get("abilities").set(UnitType.Unused_Zerg_Marker, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Unused_Zerg_Marker, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Zerg_Marker, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("maxShields").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("armor").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("gasPrice").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("buildTime").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("buildScore").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("destroyScore").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("size").set(UnitType.Unused_Zerg_Marker, null);
    fields.get("tileWidth").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("tileHeight").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("width").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("height").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("seekRange").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("sightRange").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Zerg_Marker, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("airWeapon").set(UnitType.Unused_Zerg_Marker, null);
    fields.get("maxAirHits").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("topSpeed").set(UnitType.Unused_Zerg_Marker, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("haltDistance").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("turnRadius").set(UnitType.Unused_Zerg_Marker, 0);
    fields.get("canProduce").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("canAttack").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("canMove").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("flyer").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("spellcaster").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("invincible").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("organic").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("mechanical").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("robotic").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("detector").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("resourceContainer").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("resourceDepot").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("refinery").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("worker").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("requiresPsi").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("requiresCreep").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("burrowable").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("cloakable").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("building").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("addon").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("neutral").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("hero").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("powerup").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("beacon").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("flagBeacon").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("specialBuilding").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("spell").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("producesCreep").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("producesLarva").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("mineralField").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("critter").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Zerg_Marker, false);
    fields.get("researchesWhat").set(UnitType.Unused_Zerg_Marker, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Unused_Zerg_Marker, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unused_Terran_Marker() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Terran_Marker, 192);
    fields.get("race").set(UnitType.Unused_Terran_Marker, null);
    fields.get("whatBuilds").set(UnitType.Unused_Terran_Marker, null);
    fields.get("buildsWhat").set(UnitType.Unused_Terran_Marker, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Terran_Marker, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Terran_Marker, null);
    fields.get("cloakingTech").set(UnitType.Unused_Terran_Marker, null);
    fields.get("abilities").set(UnitType.Unused_Terran_Marker, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Unused_Terran_Marker, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Terran_Marker, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("maxShields").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("armor").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("gasPrice").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("buildTime").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("buildScore").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("destroyScore").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("size").set(UnitType.Unused_Terran_Marker, null);
    fields.get("tileWidth").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("tileHeight").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("width").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("height").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("seekRange").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("sightRange").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Terran_Marker, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("airWeapon").set(UnitType.Unused_Terran_Marker, null);
    fields.get("maxAirHits").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("topSpeed").set(UnitType.Unused_Terran_Marker, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("haltDistance").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("turnRadius").set(UnitType.Unused_Terran_Marker, 0);
    fields.get("canProduce").set(UnitType.Unused_Terran_Marker, false);
    fields.get("canAttack").set(UnitType.Unused_Terran_Marker, false);
    fields.get("canMove").set(UnitType.Unused_Terran_Marker, false);
    fields.get("flyer").set(UnitType.Unused_Terran_Marker, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Terran_Marker, false);
    fields.get("spellcaster").set(UnitType.Unused_Terran_Marker, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Terran_Marker, false);
    fields.get("invincible").set(UnitType.Unused_Terran_Marker, false);
    fields.get("organic").set(UnitType.Unused_Terran_Marker, false);
    fields.get("mechanical").set(UnitType.Unused_Terran_Marker, false);
    fields.get("robotic").set(UnitType.Unused_Terran_Marker, false);
    fields.get("detector").set(UnitType.Unused_Terran_Marker, false);
    fields.get("resourceContainer").set(UnitType.Unused_Terran_Marker, false);
    fields.get("resourceDepot").set(UnitType.Unused_Terran_Marker, false);
    fields.get("refinery").set(UnitType.Unused_Terran_Marker, false);
    fields.get("worker").set(UnitType.Unused_Terran_Marker, false);
    fields.get("requiresPsi").set(UnitType.Unused_Terran_Marker, false);
    fields.get("requiresCreep").set(UnitType.Unused_Terran_Marker, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Terran_Marker, false);
    fields.get("burrowable").set(UnitType.Unused_Terran_Marker, false);
    fields.get("cloakable").set(UnitType.Unused_Terran_Marker, false);
    fields.get("building").set(UnitType.Unused_Terran_Marker, false);
    fields.get("addon").set(UnitType.Unused_Terran_Marker, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Terran_Marker, false);
    fields.get("neutral").set(UnitType.Unused_Terran_Marker, false);
    fields.get("hero").set(UnitType.Unused_Terran_Marker, false);
    fields.get("powerup").set(UnitType.Unused_Terran_Marker, false);
    fields.get("beacon").set(UnitType.Unused_Terran_Marker, false);
    fields.get("flagBeacon").set(UnitType.Unused_Terran_Marker, false);
    fields.get("specialBuilding").set(UnitType.Unused_Terran_Marker, false);
    fields.get("spell").set(UnitType.Unused_Terran_Marker, false);
    fields.get("producesCreep").set(UnitType.Unused_Terran_Marker, false);
    fields.get("producesLarva").set(UnitType.Unused_Terran_Marker, false);
    fields.get("mineralField").set(UnitType.Unused_Terran_Marker, false);
    fields.get("critter").set(UnitType.Unused_Terran_Marker, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Terran_Marker, false);
    fields.get("researchesWhat").set(UnitType.Unused_Terran_Marker, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Unused_Terran_Marker, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unused_Protoss_Marker() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unused_Protoss_Marker, 193);
    fields.get("race").set(UnitType.Unused_Protoss_Marker, null);
    fields.get("whatBuilds").set(UnitType.Unused_Protoss_Marker, null);
    fields.get("buildsWhat").set(UnitType.Unused_Protoss_Marker, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unused_Protoss_Marker, toMap());
    fields.get("requiredTech").set(UnitType.Unused_Protoss_Marker, null);
    fields.get("cloakingTech").set(UnitType.Unused_Protoss_Marker, null);
    fields.get("abilities").set(UnitType.Unused_Protoss_Marker, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Unused_Protoss_Marker, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unused_Protoss_Marker, null);
    fields.get("maxHitPoints").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("maxShields").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("maxEnergy").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("armor").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("mineralPrice").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("gasPrice").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("buildTime").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("supplyRequired").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("supplyProvided").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("spaceRequired").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("spaceProvided").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("buildScore").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("destroyScore").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("size").set(UnitType.Unused_Protoss_Marker, null);
    fields.get("tileWidth").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("tileHeight").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("dimensionLeft").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("dimensionUp").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("dimensionRight").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("dimensionDown").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("width").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("height").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("seekRange").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("sightRange").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("groundWeapon").set(UnitType.Unused_Protoss_Marker, null);
    fields.get("maxGroundHits").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("airWeapon").set(UnitType.Unused_Protoss_Marker, null);
    fields.get("maxAirHits").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("topSpeed").set(UnitType.Unused_Protoss_Marker, 0.0);
    fields.get("acceleration").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("haltDistance").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("turnRadius").set(UnitType.Unused_Protoss_Marker, 0);
    fields.get("canProduce").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("canAttack").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("canMove").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("flyer").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("regeneratesHP").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("spellcaster").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("hasPermanentCloak").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("invincible").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("organic").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("mechanical").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("robotic").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("detector").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("resourceContainer").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("resourceDepot").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("refinery").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("worker").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("requiresPsi").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("requiresCreep").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("burrowable").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("cloakable").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("building").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("addon").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("flyingBuilding").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("neutral").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("hero").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("powerup").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("beacon").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("flagBeacon").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("specialBuilding").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("spell").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("producesCreep").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("producesLarva").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("mineralField").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("critter").set(UnitType.Unused_Protoss_Marker, false);
    fields.get("canBuildAddon").set(UnitType.Unused_Protoss_Marker, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Unused_Protoss_Marker, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Unused_Protoss_Marker, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Zerg_Beacon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Zerg_Beacon, 194);
    fields.get("race").set(UnitType.Special_Zerg_Beacon, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Zerg_Beacon, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Zerg_Beacon, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Zerg_Beacon, toMap());
    fields.get("requiredTech").set(UnitType.Special_Zerg_Beacon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Zerg_Beacon, TechType.None);
    fields.get("abilities").set(UnitType.Special_Zerg_Beacon, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Zerg_Beacon, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Zerg_Beacon, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Zerg_Beacon, 100000);
    fields.get("maxShields").set(UnitType.Special_Zerg_Beacon, 0);
    fields.get("maxEnergy").set(UnitType.Special_Zerg_Beacon, 0);
    fields.get("armor").set(UnitType.Special_Zerg_Beacon, 0);
    fields.get("mineralPrice").set(UnitType.Special_Zerg_Beacon, 250);
    fields.get("gasPrice").set(UnitType.Special_Zerg_Beacon, 0);
    fields.get("buildTime").set(UnitType.Special_Zerg_Beacon, 1);
    fields.get("supplyRequired").set(UnitType.Special_Zerg_Beacon, 0);
    fields.get("supplyProvided").set(UnitType.Special_Zerg_Beacon, 0);
    fields.get("spaceRequired").set(UnitType.Special_Zerg_Beacon, 255);
    fields.get("spaceProvided").set(UnitType.Special_Zerg_Beacon, 0);
    fields.get("buildScore").set(UnitType.Special_Zerg_Beacon, 0);
    fields.get("destroyScore").set(UnitType.Special_Zerg_Beacon, 0);
    fields.get("size").set(UnitType.Special_Zerg_Beacon, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Special_Zerg_Beacon, 3);
    fields.get("tileHeight").set(UnitType.Special_Zerg_Beacon, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Zerg_Beacon, 48);
    fields.get("dimensionUp").set(UnitType.Special_Zerg_Beacon, 32);
    fields.get("dimensionRight").set(UnitType.Special_Zerg_Beacon, 47);
    fields.get("dimensionDown").set(UnitType.Special_Zerg_Beacon, 31);
    fields.get("width").set(UnitType.Special_Zerg_Beacon, 96);
    fields.get("height").set(UnitType.Special_Zerg_Beacon, 64);
    fields.get("seekRange").set(UnitType.Special_Zerg_Beacon, 0);
    fields.get("sightRange").set(UnitType.Special_Zerg_Beacon, 256);
    fields.get("groundWeapon").set(UnitType.Special_Zerg_Beacon, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Zerg_Beacon, 0);
    fields.get("airWeapon").set(UnitType.Special_Zerg_Beacon, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Zerg_Beacon, 0);
    fields.get("topSpeed").set(UnitType.Special_Zerg_Beacon, 0.0);
    fields.get("acceleration").set(UnitType.Special_Zerg_Beacon, 0);
    fields.get("haltDistance").set(UnitType.Special_Zerg_Beacon, 0);
    fields.get("turnRadius").set(UnitType.Special_Zerg_Beacon, 0);
    fields.get("canProduce").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("canAttack").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("canMove").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("flyer").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("regeneratesHP").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("spellcaster").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("invincible").set(UnitType.Special_Zerg_Beacon, true);
    fields.get("organic").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("mechanical").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("robotic").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("detector").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("resourceContainer").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("resourceDepot").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("refinery").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("worker").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("requiresPsi").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("requiresCreep").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("burrowable").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("cloakable").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("building").set(UnitType.Special_Zerg_Beacon, true);
    fields.get("addon").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("flyingBuilding").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("neutral").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("hero").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("powerup").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("beacon").set(UnitType.Special_Zerg_Beacon, true);
    fields.get("flagBeacon").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("specialBuilding").set(UnitType.Special_Zerg_Beacon, true);
    fields.get("spell").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("producesCreep").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("producesLarva").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("mineralField").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("critter").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("canBuildAddon").set(UnitType.Special_Zerg_Beacon, false);
    fields.get("researchesWhat").set(UnitType.Special_Zerg_Beacon, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Zerg_Beacon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Terran_Beacon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Terran_Beacon, 195);
    fields.get("race").set(UnitType.Special_Terran_Beacon, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Terran_Beacon, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Terran_Beacon, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Terran_Beacon, toMap());
    fields.get("requiredTech").set(UnitType.Special_Terran_Beacon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Terran_Beacon, TechType.None);
    fields.get("abilities").set(UnitType.Special_Terran_Beacon, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Terran_Beacon, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Terran_Beacon, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Terran_Beacon, 100000);
    fields.get("maxShields").set(UnitType.Special_Terran_Beacon, 0);
    fields.get("maxEnergy").set(UnitType.Special_Terran_Beacon, 0);
    fields.get("armor").set(UnitType.Special_Terran_Beacon, 0);
    fields.get("mineralPrice").set(UnitType.Special_Terran_Beacon, 50);
    fields.get("gasPrice").set(UnitType.Special_Terran_Beacon, 50);
    fields.get("buildTime").set(UnitType.Special_Terran_Beacon, 1);
    fields.get("supplyRequired").set(UnitType.Special_Terran_Beacon, 0);
    fields.get("supplyProvided").set(UnitType.Special_Terran_Beacon, 0);
    fields.get("spaceRequired").set(UnitType.Special_Terran_Beacon, 255);
    fields.get("spaceProvided").set(UnitType.Special_Terran_Beacon, 0);
    fields.get("buildScore").set(UnitType.Special_Terran_Beacon, 0);
    fields.get("destroyScore").set(UnitType.Special_Terran_Beacon, 0);
    fields.get("size").set(UnitType.Special_Terran_Beacon, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Special_Terran_Beacon, 3);
    fields.get("tileHeight").set(UnitType.Special_Terran_Beacon, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Terran_Beacon, 48);
    fields.get("dimensionUp").set(UnitType.Special_Terran_Beacon, 32);
    fields.get("dimensionRight").set(UnitType.Special_Terran_Beacon, 47);
    fields.get("dimensionDown").set(UnitType.Special_Terran_Beacon, 31);
    fields.get("width").set(UnitType.Special_Terran_Beacon, 96);
    fields.get("height").set(UnitType.Special_Terran_Beacon, 64);
    fields.get("seekRange").set(UnitType.Special_Terran_Beacon, 0);
    fields.get("sightRange").set(UnitType.Special_Terran_Beacon, 256);
    fields.get("groundWeapon").set(UnitType.Special_Terran_Beacon, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Terran_Beacon, 0);
    fields.get("airWeapon").set(UnitType.Special_Terran_Beacon, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Terran_Beacon, 0);
    fields.get("topSpeed").set(UnitType.Special_Terran_Beacon, 0.0);
    fields.get("acceleration").set(UnitType.Special_Terran_Beacon, 0);
    fields.get("haltDistance").set(UnitType.Special_Terran_Beacon, 0);
    fields.get("turnRadius").set(UnitType.Special_Terran_Beacon, 0);
    fields.get("canProduce").set(UnitType.Special_Terran_Beacon, false);
    fields.get("canAttack").set(UnitType.Special_Terran_Beacon, false);
    fields.get("canMove").set(UnitType.Special_Terran_Beacon, false);
    fields.get("flyer").set(UnitType.Special_Terran_Beacon, false);
    fields.get("regeneratesHP").set(UnitType.Special_Terran_Beacon, false);
    fields.get("spellcaster").set(UnitType.Special_Terran_Beacon, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Terran_Beacon, false);
    fields.get("invincible").set(UnitType.Special_Terran_Beacon, true);
    fields.get("organic").set(UnitType.Special_Terran_Beacon, false);
    fields.get("mechanical").set(UnitType.Special_Terran_Beacon, false);
    fields.get("robotic").set(UnitType.Special_Terran_Beacon, false);
    fields.get("detector").set(UnitType.Special_Terran_Beacon, false);
    fields.get("resourceContainer").set(UnitType.Special_Terran_Beacon, false);
    fields.get("resourceDepot").set(UnitType.Special_Terran_Beacon, false);
    fields.get("refinery").set(UnitType.Special_Terran_Beacon, false);
    fields.get("worker").set(UnitType.Special_Terran_Beacon, false);
    fields.get("requiresPsi").set(UnitType.Special_Terran_Beacon, false);
    fields.get("requiresCreep").set(UnitType.Special_Terran_Beacon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Terran_Beacon, false);
    fields.get("burrowable").set(UnitType.Special_Terran_Beacon, false);
    fields.get("cloakable").set(UnitType.Special_Terran_Beacon, false);
    fields.get("building").set(UnitType.Special_Terran_Beacon, true);
    fields.get("addon").set(UnitType.Special_Terran_Beacon, false);
    fields.get("flyingBuilding").set(UnitType.Special_Terran_Beacon, false);
    fields.get("neutral").set(UnitType.Special_Terran_Beacon, false);
    fields.get("hero").set(UnitType.Special_Terran_Beacon, false);
    fields.get("powerup").set(UnitType.Special_Terran_Beacon, false);
    fields.get("beacon").set(UnitType.Special_Terran_Beacon, true);
    fields.get("flagBeacon").set(UnitType.Special_Terran_Beacon, false);
    fields.get("specialBuilding").set(UnitType.Special_Terran_Beacon, true);
    fields.get("spell").set(UnitType.Special_Terran_Beacon, false);
    fields.get("producesCreep").set(UnitType.Special_Terran_Beacon, false);
    fields.get("producesLarva").set(UnitType.Special_Terran_Beacon, false);
    fields.get("mineralField").set(UnitType.Special_Terran_Beacon, false);
    fields.get("critter").set(UnitType.Special_Terran_Beacon, false);
    fields.get("canBuildAddon").set(UnitType.Special_Terran_Beacon, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Terran_Beacon, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Terran_Beacon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Protoss_Beacon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Protoss_Beacon, 196);
    fields.get("race").set(UnitType.Special_Protoss_Beacon, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Protoss_Beacon, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Protoss_Beacon, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Protoss_Beacon, toMap());
    fields.get("requiredTech").set(UnitType.Special_Protoss_Beacon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Protoss_Beacon, TechType.None);
    fields.get("abilities").set(UnitType.Special_Protoss_Beacon, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Protoss_Beacon, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Protoss_Beacon, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Protoss_Beacon, 100000);
    fields.get("maxShields").set(UnitType.Special_Protoss_Beacon, 0);
    fields.get("maxEnergy").set(UnitType.Special_Protoss_Beacon, 0);
    fields.get("armor").set(UnitType.Special_Protoss_Beacon, 0);
    fields.get("mineralPrice").set(UnitType.Special_Protoss_Beacon, 100);
    fields.get("gasPrice").set(UnitType.Special_Protoss_Beacon, 100);
    fields.get("buildTime").set(UnitType.Special_Protoss_Beacon, 1);
    fields.get("supplyRequired").set(UnitType.Special_Protoss_Beacon, 0);
    fields.get("supplyProvided").set(UnitType.Special_Protoss_Beacon, 0);
    fields.get("spaceRequired").set(UnitType.Special_Protoss_Beacon, 255);
    fields.get("spaceProvided").set(UnitType.Special_Protoss_Beacon, 0);
    fields.get("buildScore").set(UnitType.Special_Protoss_Beacon, 0);
    fields.get("destroyScore").set(UnitType.Special_Protoss_Beacon, 0);
    fields.get("size").set(UnitType.Special_Protoss_Beacon, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Special_Protoss_Beacon, 3);
    fields.get("tileHeight").set(UnitType.Special_Protoss_Beacon, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Protoss_Beacon, 48);
    fields.get("dimensionUp").set(UnitType.Special_Protoss_Beacon, 32);
    fields.get("dimensionRight").set(UnitType.Special_Protoss_Beacon, 47);
    fields.get("dimensionDown").set(UnitType.Special_Protoss_Beacon, 31);
    fields.get("width").set(UnitType.Special_Protoss_Beacon, 96);
    fields.get("height").set(UnitType.Special_Protoss_Beacon, 64);
    fields.get("seekRange").set(UnitType.Special_Protoss_Beacon, 0);
    fields.get("sightRange").set(UnitType.Special_Protoss_Beacon, 256);
    fields.get("groundWeapon").set(UnitType.Special_Protoss_Beacon, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Protoss_Beacon, 0);
    fields.get("airWeapon").set(UnitType.Special_Protoss_Beacon, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Protoss_Beacon, 0);
    fields.get("topSpeed").set(UnitType.Special_Protoss_Beacon, 0.0);
    fields.get("acceleration").set(UnitType.Special_Protoss_Beacon, 0);
    fields.get("haltDistance").set(UnitType.Special_Protoss_Beacon, 0);
    fields.get("turnRadius").set(UnitType.Special_Protoss_Beacon, 0);
    fields.get("canProduce").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("canAttack").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("canMove").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("flyer").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("regeneratesHP").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("spellcaster").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("invincible").set(UnitType.Special_Protoss_Beacon, true);
    fields.get("organic").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("mechanical").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("robotic").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("detector").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("resourceContainer").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("resourceDepot").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("refinery").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("worker").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("requiresPsi").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("requiresCreep").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("burrowable").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("cloakable").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("building").set(UnitType.Special_Protoss_Beacon, true);
    fields.get("addon").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("flyingBuilding").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("neutral").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("hero").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("powerup").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("beacon").set(UnitType.Special_Protoss_Beacon, true);
    fields.get("flagBeacon").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("specialBuilding").set(UnitType.Special_Protoss_Beacon, true);
    fields.get("spell").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("producesCreep").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("producesLarva").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("mineralField").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("critter").set(UnitType.Special_Protoss_Beacon, false);
    fields.get("canBuildAddon").set(UnitType.Special_Protoss_Beacon, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Protoss_Beacon, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Protoss_Beacon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Zerg_Flag_Beacon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Zerg_Flag_Beacon, 197);
    fields.get("race").set(UnitType.Special_Zerg_Flag_Beacon, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Zerg_Flag_Beacon, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Zerg_Flag_Beacon, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Zerg_Flag_Beacon, toMap());
    fields.get("requiredTech").set(UnitType.Special_Zerg_Flag_Beacon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Zerg_Flag_Beacon, TechType.None);
    fields.get("abilities").set(UnitType.Special_Zerg_Flag_Beacon, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Zerg_Flag_Beacon, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Zerg_Flag_Beacon, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Zerg_Flag_Beacon, 100000);
    fields.get("maxShields").set(UnitType.Special_Zerg_Flag_Beacon, 0);
    fields.get("maxEnergy").set(UnitType.Special_Zerg_Flag_Beacon, 0);
    fields.get("armor").set(UnitType.Special_Zerg_Flag_Beacon, 0);
    fields.get("mineralPrice").set(UnitType.Special_Zerg_Flag_Beacon, 250);
    fields.get("gasPrice").set(UnitType.Special_Zerg_Flag_Beacon, 0);
    fields.get("buildTime").set(UnitType.Special_Zerg_Flag_Beacon, 1);
    fields.get("supplyRequired").set(UnitType.Special_Zerg_Flag_Beacon, 0);
    fields.get("supplyProvided").set(UnitType.Special_Zerg_Flag_Beacon, 0);
    fields.get("spaceRequired").set(UnitType.Special_Zerg_Flag_Beacon, 255);
    fields.get("spaceProvided").set(UnitType.Special_Zerg_Flag_Beacon, 0);
    fields.get("buildScore").set(UnitType.Special_Zerg_Flag_Beacon, 0);
    fields.get("destroyScore").set(UnitType.Special_Zerg_Flag_Beacon, 0);
    fields.get("size").set(UnitType.Special_Zerg_Flag_Beacon, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Special_Zerg_Flag_Beacon, 3);
    fields.get("tileHeight").set(UnitType.Special_Zerg_Flag_Beacon, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Zerg_Flag_Beacon, 48);
    fields.get("dimensionUp").set(UnitType.Special_Zerg_Flag_Beacon, 32);
    fields.get("dimensionRight").set(UnitType.Special_Zerg_Flag_Beacon, 47);
    fields.get("dimensionDown").set(UnitType.Special_Zerg_Flag_Beacon, 31);
    fields.get("width").set(UnitType.Special_Zerg_Flag_Beacon, 96);
    fields.get("height").set(UnitType.Special_Zerg_Flag_Beacon, 64);
    fields.get("seekRange").set(UnitType.Special_Zerg_Flag_Beacon, 0);
    fields.get("sightRange").set(UnitType.Special_Zerg_Flag_Beacon, 256);
    fields.get("groundWeapon").set(UnitType.Special_Zerg_Flag_Beacon, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Zerg_Flag_Beacon, 0);
    fields.get("airWeapon").set(UnitType.Special_Zerg_Flag_Beacon, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Zerg_Flag_Beacon, 0);
    fields.get("topSpeed").set(UnitType.Special_Zerg_Flag_Beacon, 0.0);
    fields.get("acceleration").set(UnitType.Special_Zerg_Flag_Beacon, 0);
    fields.get("haltDistance").set(UnitType.Special_Zerg_Flag_Beacon, 0);
    fields.get("turnRadius").set(UnitType.Special_Zerg_Flag_Beacon, 0);
    fields.get("canProduce").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("canAttack").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("canMove").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("flyer").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("regeneratesHP").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("spellcaster").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("invincible").set(UnitType.Special_Zerg_Flag_Beacon, true);
    fields.get("organic").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("mechanical").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("robotic").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("detector").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("resourceContainer").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("resourceDepot").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("refinery").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("worker").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("requiresPsi").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("requiresCreep").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("burrowable").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("cloakable").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("building").set(UnitType.Special_Zerg_Flag_Beacon, true);
    fields.get("addon").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("flyingBuilding").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("neutral").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("hero").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("powerup").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("beacon").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("flagBeacon").set(UnitType.Special_Zerg_Flag_Beacon, true);
    fields.get("specialBuilding").set(UnitType.Special_Zerg_Flag_Beacon, true);
    fields.get("spell").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("producesCreep").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("producesLarva").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("mineralField").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("critter").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields.get("canBuildAddon").set(UnitType.Special_Zerg_Flag_Beacon, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Zerg_Flag_Beacon, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Zerg_Flag_Beacon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Terran_Flag_Beacon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Terran_Flag_Beacon, 198);
    fields.get("race").set(UnitType.Special_Terran_Flag_Beacon, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Terran_Flag_Beacon, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Special_Terran_Flag_Beacon, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Terran_Flag_Beacon, toMap());
    fields.get("requiredTech").set(UnitType.Special_Terran_Flag_Beacon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Terran_Flag_Beacon, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Special_Terran_Flag_Beacon, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Terran_Flag_Beacon, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Terran_Flag_Beacon, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Terran_Flag_Beacon, 100000);
    fields.get("maxShields").set(UnitType.Special_Terran_Flag_Beacon, 0);
    fields.get("maxEnergy").set(UnitType.Special_Terran_Flag_Beacon, 0);
    fields.get("armor").set(UnitType.Special_Terran_Flag_Beacon, 0);
    fields.get("mineralPrice").set(UnitType.Special_Terran_Flag_Beacon, 50);
    fields.get("gasPrice").set(UnitType.Special_Terran_Flag_Beacon, 50);
    fields.get("buildTime").set(UnitType.Special_Terran_Flag_Beacon, 1);
    fields.get("supplyRequired").set(UnitType.Special_Terran_Flag_Beacon, 0);
    fields.get("supplyProvided").set(UnitType.Special_Terran_Flag_Beacon, 0);
    fields.get("spaceRequired").set(UnitType.Special_Terran_Flag_Beacon, 255);
    fields.get("spaceProvided").set(UnitType.Special_Terran_Flag_Beacon, 0);
    fields.get("buildScore").set(UnitType.Special_Terran_Flag_Beacon, 0);
    fields.get("destroyScore").set(UnitType.Special_Terran_Flag_Beacon, 0);
    fields.get("size").set(UnitType.Special_Terran_Flag_Beacon, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Special_Terran_Flag_Beacon, 3);
    fields.get("tileHeight").set(UnitType.Special_Terran_Flag_Beacon, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Terran_Flag_Beacon, 48);
    fields.get("dimensionUp").set(UnitType.Special_Terran_Flag_Beacon, 32);
    fields.get("dimensionRight").set(UnitType.Special_Terran_Flag_Beacon, 47);
    fields.get("dimensionDown").set(UnitType.Special_Terran_Flag_Beacon, 31);
    fields.get("width").set(UnitType.Special_Terran_Flag_Beacon, 96);
    fields.get("height").set(UnitType.Special_Terran_Flag_Beacon, 64);
    fields.get("seekRange").set(UnitType.Special_Terran_Flag_Beacon, 0);
    fields.get("sightRange").set(UnitType.Special_Terran_Flag_Beacon, 256);
    fields.get("groundWeapon").set(UnitType.Special_Terran_Flag_Beacon, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Terran_Flag_Beacon, 0);
    fields.get("airWeapon").set(UnitType.Special_Terran_Flag_Beacon, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Terran_Flag_Beacon, 0);
    fields.get("topSpeed").set(UnitType.Special_Terran_Flag_Beacon, 0.0);
    fields.get("acceleration").set(UnitType.Special_Terran_Flag_Beacon, 0);
    fields.get("haltDistance").set(UnitType.Special_Terran_Flag_Beacon, 0);
    fields.get("turnRadius").set(UnitType.Special_Terran_Flag_Beacon, 0);
    fields.get("canProduce").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("canAttack").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("canMove").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("flyer").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("regeneratesHP").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("spellcaster").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("invincible").set(UnitType.Special_Terran_Flag_Beacon, true);
    fields.get("organic").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("mechanical").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("robotic").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("detector").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("resourceContainer").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("resourceDepot").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("refinery").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("worker").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("requiresPsi").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("requiresCreep").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("burrowable").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("cloakable").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("building").set(UnitType.Special_Terran_Flag_Beacon, true);
    fields.get("addon").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("flyingBuilding").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("neutral").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("hero").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("powerup").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("beacon").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("flagBeacon").set(UnitType.Special_Terran_Flag_Beacon, true);
    fields.get("specialBuilding").set(UnitType.Special_Terran_Flag_Beacon, true);
    fields.get("spell").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("producesCreep").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("producesLarva").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("mineralField").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("critter").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields.get("canBuildAddon").set(UnitType.Special_Terran_Flag_Beacon, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Terran_Flag_Beacon, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Terran_Flag_Beacon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Protoss_Flag_Beacon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Protoss_Flag_Beacon, 199);
    fields.get("race").set(UnitType.Special_Protoss_Flag_Beacon, Race.Protoss);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Protoss_Flag_Beacon, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Special_Protoss_Flag_Beacon, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Protoss_Flag_Beacon, toMap());
    fields.get("requiredTech").set(UnitType.Special_Protoss_Flag_Beacon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Protoss_Flag_Beacon, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Special_Protoss_Flag_Beacon, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Special_Protoss_Flag_Beacon, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Protoss_Flag_Beacon, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Protoss_Flag_Beacon, 100000);
    fields.get("maxShields").set(UnitType.Special_Protoss_Flag_Beacon, 0);
    fields.get("maxEnergy").set(UnitType.Special_Protoss_Flag_Beacon, 0);
    fields.get("armor").set(UnitType.Special_Protoss_Flag_Beacon, 0);
    fields.get("mineralPrice").set(UnitType.Special_Protoss_Flag_Beacon, 100);
    fields.get("gasPrice").set(UnitType.Special_Protoss_Flag_Beacon, 100);
    fields.get("buildTime").set(UnitType.Special_Protoss_Flag_Beacon, 1);
    fields.get("supplyRequired").set(UnitType.Special_Protoss_Flag_Beacon, 0);
    fields.get("supplyProvided").set(UnitType.Special_Protoss_Flag_Beacon, 0);
    fields.get("spaceRequired").set(UnitType.Special_Protoss_Flag_Beacon, 255);
    fields.get("spaceProvided").set(UnitType.Special_Protoss_Flag_Beacon, 0);
    fields.get("buildScore").set(UnitType.Special_Protoss_Flag_Beacon, 0);
    fields.get("destroyScore").set(UnitType.Special_Protoss_Flag_Beacon, 0);
    fields.get("size").set(UnitType.Special_Protoss_Flag_Beacon, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Special_Protoss_Flag_Beacon, 3);
    fields.get("tileHeight").set(UnitType.Special_Protoss_Flag_Beacon, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Protoss_Flag_Beacon, 48);
    fields.get("dimensionUp").set(UnitType.Special_Protoss_Flag_Beacon, 32);
    fields.get("dimensionRight").set(UnitType.Special_Protoss_Flag_Beacon, 47);
    fields.get("dimensionDown").set(UnitType.Special_Protoss_Flag_Beacon, 31);
    fields.get("width").set(UnitType.Special_Protoss_Flag_Beacon, 96);
    fields.get("height").set(UnitType.Special_Protoss_Flag_Beacon, 64);
    fields.get("seekRange").set(UnitType.Special_Protoss_Flag_Beacon, 0);
    fields.get("sightRange").set(UnitType.Special_Protoss_Flag_Beacon, 256);
    fields.get("groundWeapon").set(UnitType.Special_Protoss_Flag_Beacon, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Protoss_Flag_Beacon, 0);
    fields.get("airWeapon").set(UnitType.Special_Protoss_Flag_Beacon, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Protoss_Flag_Beacon, 0);
    fields.get("topSpeed").set(UnitType.Special_Protoss_Flag_Beacon, 0.0);
    fields.get("acceleration").set(UnitType.Special_Protoss_Flag_Beacon, 0);
    fields.get("haltDistance").set(UnitType.Special_Protoss_Flag_Beacon, 0);
    fields.get("turnRadius").set(UnitType.Special_Protoss_Flag_Beacon, 0);
    fields.get("canProduce").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("canAttack").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("canMove").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("flyer").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("regeneratesHP").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("spellcaster").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("invincible").set(UnitType.Special_Protoss_Flag_Beacon, true);
    fields.get("organic").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("mechanical").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("robotic").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("detector").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("resourceContainer").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("resourceDepot").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("refinery").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("worker").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("requiresPsi").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("requiresCreep").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("burrowable").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("cloakable").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("building").set(UnitType.Special_Protoss_Flag_Beacon, true);
    fields.get("addon").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("flyingBuilding").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("neutral").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("hero").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("powerup").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("beacon").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("flagBeacon").set(UnitType.Special_Protoss_Flag_Beacon, true);
    fields.get("specialBuilding").set(UnitType.Special_Protoss_Flag_Beacon, true);
    fields.get("spell").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("producesCreep").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("producesLarva").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("mineralField").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("critter").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields.get("canBuildAddon").set(UnitType.Special_Protoss_Flag_Beacon, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Protoss_Flag_Beacon, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Protoss_Flag_Beacon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Power_Generator() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Power_Generator, 200);
    fields.get("race").set(UnitType.Special_Power_Generator, Race.Terran);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Power_Generator, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Power_Generator, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Power_Generator, toMap());
    fields.get("requiredTech").set(UnitType.Special_Power_Generator, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Power_Generator, TechType.None);
    fields.get("abilities").set(UnitType.Special_Power_Generator, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Power_Generator, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Power_Generator, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Power_Generator, 800);
    fields.get("maxShields").set(UnitType.Special_Power_Generator, 0);
    fields.get("maxEnergy").set(UnitType.Special_Power_Generator, 0);
    fields.get("armor").set(UnitType.Special_Power_Generator, 1);
    fields.get("mineralPrice").set(UnitType.Special_Power_Generator, 200);
    fields.get("gasPrice").set(UnitType.Special_Power_Generator, 50);
    fields.get("buildTime").set(UnitType.Special_Power_Generator, 2400);
    fields.get("supplyRequired").set(UnitType.Special_Power_Generator, 0);
    fields.get("supplyProvided").set(UnitType.Special_Power_Generator, 0);
    fields.get("spaceRequired").set(UnitType.Special_Power_Generator, 255);
    fields.get("spaceProvided").set(UnitType.Special_Power_Generator, 0);
    fields.get("buildScore").set(UnitType.Special_Power_Generator, 0);
    fields.get("destroyScore").set(UnitType.Special_Power_Generator, 600);
    fields.get("size").set(UnitType.Special_Power_Generator, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Power_Generator, 4);
    fields.get("tileHeight").set(UnitType.Special_Power_Generator, 3);
    fields.get("dimensionLeft").set(UnitType.Special_Power_Generator, 56);
    fields.get("dimensionUp").set(UnitType.Special_Power_Generator, 28);
    fields.get("dimensionRight").set(UnitType.Special_Power_Generator, 63);
    fields.get("dimensionDown").set(UnitType.Special_Power_Generator, 43);
    fields.get("width").set(UnitType.Special_Power_Generator, 120);
    fields.get("height").set(UnitType.Special_Power_Generator, 72);
    fields.get("seekRange").set(UnitType.Special_Power_Generator, 0);
    fields.get("sightRange").set(UnitType.Special_Power_Generator, 256);
    fields.get("groundWeapon").set(UnitType.Special_Power_Generator, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Power_Generator, 0);
    fields.get("airWeapon").set(UnitType.Special_Power_Generator, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Power_Generator, 0);
    fields.get("topSpeed").set(UnitType.Special_Power_Generator, 0.0);
    fields.get("acceleration").set(UnitType.Special_Power_Generator, 0);
    fields.get("haltDistance").set(UnitType.Special_Power_Generator, 0);
    fields.get("turnRadius").set(UnitType.Special_Power_Generator, 0);
    fields.get("canProduce").set(UnitType.Special_Power_Generator, false);
    fields.get("canAttack").set(UnitType.Special_Power_Generator, false);
    fields.get("canMove").set(UnitType.Special_Power_Generator, false);
    fields.get("flyer").set(UnitType.Special_Power_Generator, false);
    fields.get("regeneratesHP").set(UnitType.Special_Power_Generator, false);
    fields.get("spellcaster").set(UnitType.Special_Power_Generator, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Power_Generator, false);
    fields.get("invincible").set(UnitType.Special_Power_Generator, false);
    fields.get("organic").set(UnitType.Special_Power_Generator, false);
    fields.get("mechanical").set(UnitType.Special_Power_Generator, true);
    fields.get("robotic").set(UnitType.Special_Power_Generator, false);
    fields.get("detector").set(UnitType.Special_Power_Generator, false);
    fields.get("resourceContainer").set(UnitType.Special_Power_Generator, false);
    fields.get("resourceDepot").set(UnitType.Special_Power_Generator, false);
    fields.get("refinery").set(UnitType.Special_Power_Generator, false);
    fields.get("worker").set(UnitType.Special_Power_Generator, false);
    fields.get("requiresPsi").set(UnitType.Special_Power_Generator, false);
    fields.get("requiresCreep").set(UnitType.Special_Power_Generator, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Power_Generator, false);
    fields.get("burrowable").set(UnitType.Special_Power_Generator, false);
    fields.get("cloakable").set(UnitType.Special_Power_Generator, false);
    fields.get("building").set(UnitType.Special_Power_Generator, true);
    fields.get("addon").set(UnitType.Special_Power_Generator, false);
    fields.get("flyingBuilding").set(UnitType.Special_Power_Generator, false);
    fields.get("neutral").set(UnitType.Special_Power_Generator, false);
    fields.get("hero").set(UnitType.Special_Power_Generator, false);
    fields.get("powerup").set(UnitType.Special_Power_Generator, false);
    fields.get("beacon").set(UnitType.Special_Power_Generator, false);
    fields.get("flagBeacon").set(UnitType.Special_Power_Generator, false);
    fields.get("specialBuilding").set(UnitType.Special_Power_Generator, true);
    fields.get("spell").set(UnitType.Special_Power_Generator, false);
    fields.get("producesCreep").set(UnitType.Special_Power_Generator, false);
    fields.get("producesLarva").set(UnitType.Special_Power_Generator, false);
    fields.get("mineralField").set(UnitType.Special_Power_Generator, false);
    fields.get("critter").set(UnitType.Special_Power_Generator, false);
    fields.get("canBuildAddon").set(UnitType.Special_Power_Generator, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Power_Generator, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Power_Generator, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Overmind_Cocoon() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Overmind_Cocoon, 201);
    fields.get("race").set(UnitType.Special_Overmind_Cocoon, Race.Zerg);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Overmind_Cocoon, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Overmind_Cocoon, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Overmind_Cocoon, toMap());
    fields.get("requiredTech").set(UnitType.Special_Overmind_Cocoon, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Overmind_Cocoon, TechType.None);
    fields.get("abilities").set(UnitType.Special_Overmind_Cocoon, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Overmind_Cocoon, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Overmind_Cocoon, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Overmind_Cocoon, 2500);
    fields.get("maxShields").set(UnitType.Special_Overmind_Cocoon, 0);
    fields.get("maxEnergy").set(UnitType.Special_Overmind_Cocoon, 0);
    fields.get("armor").set(UnitType.Special_Overmind_Cocoon, 1);
    fields.get("mineralPrice").set(UnitType.Special_Overmind_Cocoon, 1000);
    fields.get("gasPrice").set(UnitType.Special_Overmind_Cocoon, 500);
    fields.get("buildTime").set(UnitType.Special_Overmind_Cocoon, 2400);
    fields.get("supplyRequired").set(UnitType.Special_Overmind_Cocoon, 0);
    fields.get("supplyProvided").set(UnitType.Special_Overmind_Cocoon, 0);
    fields.get("spaceRequired").set(UnitType.Special_Overmind_Cocoon, 255);
    fields.get("spaceProvided").set(UnitType.Special_Overmind_Cocoon, 0);
    fields.get("buildScore").set(UnitType.Special_Overmind_Cocoon, 0);
    fields.get("destroyScore").set(UnitType.Special_Overmind_Cocoon, 4000);
    fields.get("size").set(UnitType.Special_Overmind_Cocoon, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Overmind_Cocoon, 3);
    fields.get("tileHeight").set(UnitType.Special_Overmind_Cocoon, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Overmind_Cocoon, 48);
    fields.get("dimensionUp").set(UnitType.Special_Overmind_Cocoon, 32);
    fields.get("dimensionRight").set(UnitType.Special_Overmind_Cocoon, 47);
    fields.get("dimensionDown").set(UnitType.Special_Overmind_Cocoon, 31);
    fields.get("width").set(UnitType.Special_Overmind_Cocoon, 96);
    fields.get("height").set(UnitType.Special_Overmind_Cocoon, 64);
    fields.get("seekRange").set(UnitType.Special_Overmind_Cocoon, 0);
    fields.get("sightRange").set(UnitType.Special_Overmind_Cocoon, 320);
    fields.get("groundWeapon").set(UnitType.Special_Overmind_Cocoon, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Overmind_Cocoon, 0);
    fields.get("airWeapon").set(UnitType.Special_Overmind_Cocoon, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Overmind_Cocoon, 0);
    fields.get("topSpeed").set(UnitType.Special_Overmind_Cocoon, 0.0);
    fields.get("acceleration").set(UnitType.Special_Overmind_Cocoon, 0);
    fields.get("haltDistance").set(UnitType.Special_Overmind_Cocoon, 0);
    fields.get("turnRadius").set(UnitType.Special_Overmind_Cocoon, 0);
    fields.get("canProduce").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("canAttack").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("canMove").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("flyer").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("regeneratesHP").set(UnitType.Special_Overmind_Cocoon, true);
    fields.get("spellcaster").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("invincible").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("organic").set(UnitType.Special_Overmind_Cocoon, true);
    fields.get("mechanical").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("robotic").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("detector").set(UnitType.Special_Overmind_Cocoon, true);
    fields.get("resourceContainer").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("resourceDepot").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("refinery").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("worker").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("requiresPsi").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("requiresCreep").set(UnitType.Special_Overmind_Cocoon, true);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("burrowable").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("cloakable").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("building").set(UnitType.Special_Overmind_Cocoon, true);
    fields.get("addon").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("flyingBuilding").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("neutral").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("hero").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("powerup").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("beacon").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("flagBeacon").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("specialBuilding").set(UnitType.Special_Overmind_Cocoon, true);
    fields.get("spell").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("producesCreep").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("producesLarva").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("mineralField").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("critter").set(UnitType.Special_Overmind_Cocoon, false);
    fields.get("canBuildAddon").set(UnitType.Special_Overmind_Cocoon, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Overmind_Cocoon, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Overmind_Cocoon, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Spell_Dark_Swarm() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Spell_Dark_Swarm, 202);
    fields.get("race").set(UnitType.Spell_Dark_Swarm, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Spell_Dark_Swarm, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Spell_Dark_Swarm, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Spell_Dark_Swarm, toMap());
    fields.get("requiredTech").set(UnitType.Spell_Dark_Swarm, TechType.None);
    fields.get("cloakingTech").set(UnitType.Spell_Dark_Swarm, TechType.None);
    fields.get("abilities").set(UnitType.Spell_Dark_Swarm, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Spell_Dark_Swarm, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Spell_Dark_Swarm, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Spell_Dark_Swarm, 800);
    fields.get("maxShields").set(UnitType.Spell_Dark_Swarm, 0);
    fields.get("maxEnergy").set(UnitType.Spell_Dark_Swarm, 0);
    fields.get("armor").set(UnitType.Spell_Dark_Swarm, 0);
    fields.get("mineralPrice").set(UnitType.Spell_Dark_Swarm, 250);
    fields.get("gasPrice").set(UnitType.Spell_Dark_Swarm, 200);
    fields.get("buildTime").set(UnitType.Spell_Dark_Swarm, 2400);
    fields.get("supplyRequired").set(UnitType.Spell_Dark_Swarm, 0);
    fields.get("supplyProvided").set(UnitType.Spell_Dark_Swarm, 0);
    fields.get("spaceRequired").set(UnitType.Spell_Dark_Swarm, 255);
    fields.get("spaceProvided").set(UnitType.Spell_Dark_Swarm, 0);
    fields.get("buildScore").set(UnitType.Spell_Dark_Swarm, 0);
    fields.get("destroyScore").set(UnitType.Spell_Dark_Swarm, 0);
    fields.get("size").set(UnitType.Spell_Dark_Swarm, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Spell_Dark_Swarm, 5);
    fields.get("tileHeight").set(UnitType.Spell_Dark_Swarm, 5);
    fields.get("dimensionLeft").set(UnitType.Spell_Dark_Swarm, 80);
    fields.get("dimensionUp").set(UnitType.Spell_Dark_Swarm, 80);
    fields.get("dimensionRight").set(UnitType.Spell_Dark_Swarm, 79);
    fields.get("dimensionDown").set(UnitType.Spell_Dark_Swarm, 79);
    fields.get("width").set(UnitType.Spell_Dark_Swarm, 160);
    fields.get("height").set(UnitType.Spell_Dark_Swarm, 160);
    fields.get("seekRange").set(UnitType.Spell_Dark_Swarm, 0);
    fields.get("sightRange").set(UnitType.Spell_Dark_Swarm, 256);
    fields.get("groundWeapon").set(UnitType.Spell_Dark_Swarm, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Spell_Dark_Swarm, 0);
    fields.get("airWeapon").set(UnitType.Spell_Dark_Swarm, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Spell_Dark_Swarm, 0);
    fields.get("topSpeed").set(UnitType.Spell_Dark_Swarm, 0.0);
    fields.get("acceleration").set(UnitType.Spell_Dark_Swarm, 0);
    fields.get("haltDistance").set(UnitType.Spell_Dark_Swarm, 0);
    fields.get("turnRadius").set(UnitType.Spell_Dark_Swarm, 0);
    fields.get("canProduce").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("canAttack").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("canMove").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("flyer").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("regeneratesHP").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("spellcaster").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("hasPermanentCloak").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("invincible").set(UnitType.Spell_Dark_Swarm, true);
    fields.get("organic").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("mechanical").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("robotic").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("detector").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("resourceContainer").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("resourceDepot").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("refinery").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("worker").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("requiresPsi").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("requiresCreep").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("burrowable").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("cloakable").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("building").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("addon").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("flyingBuilding").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("neutral").set(UnitType.Spell_Dark_Swarm, true);
    fields.get("hero").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("powerup").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("beacon").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("flagBeacon").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("specialBuilding").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("spell").set(UnitType.Spell_Dark_Swarm, true);
    fields.get("producesCreep").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("producesLarva").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("mineralField").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("critter").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("canBuildAddon").set(UnitType.Spell_Dark_Swarm, false);
    fields.get("researchesWhat").set(UnitType.Spell_Dark_Swarm, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Spell_Dark_Swarm, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Floor_Missile_Trap() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Floor_Missile_Trap, 203);
    fields.get("race").set(UnitType.Special_Floor_Missile_Trap, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Floor_Missile_Trap, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Special_Floor_Missile_Trap, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Floor_Missile_Trap, toMap());
    fields.get("requiredTech").set(UnitType.Special_Floor_Missile_Trap, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Floor_Missile_Trap, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Special_Floor_Missile_Trap, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Special_Floor_Missile_Trap,
            new ArrayList(Arrays.asList(UpgradeType.Terran_Vehicle_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Special_Floor_Missile_Trap, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Floor_Missile_Trap, 50);
    fields.get("maxShields").set(UnitType.Special_Floor_Missile_Trap, 0);
    fields.get("maxEnergy").set(UnitType.Special_Floor_Missile_Trap, 0);
    fields.get("armor").set(UnitType.Special_Floor_Missile_Trap, 0);
    fields.get("mineralPrice").set(UnitType.Special_Floor_Missile_Trap, 1);
    fields.get("gasPrice").set(UnitType.Special_Floor_Missile_Trap, 1);
    fields.get("buildTime").set(UnitType.Special_Floor_Missile_Trap, 1);
    fields.get("supplyRequired").set(UnitType.Special_Floor_Missile_Trap, 0);
    fields.get("supplyProvided").set(UnitType.Special_Floor_Missile_Trap, 0);
    fields.get("spaceRequired").set(UnitType.Special_Floor_Missile_Trap, 255);
    fields.get("spaceProvided").set(UnitType.Special_Floor_Missile_Trap, 0);
    fields.get("buildScore").set(UnitType.Special_Floor_Missile_Trap, 0);
    fields.get("destroyScore").set(UnitType.Special_Floor_Missile_Trap, 100);
    fields.get("size").set(UnitType.Special_Floor_Missile_Trap, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Floor_Missile_Trap, 2);
    fields.get("tileHeight").set(UnitType.Special_Floor_Missile_Trap, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Floor_Missile_Trap, 32);
    fields.get("dimensionUp").set(UnitType.Special_Floor_Missile_Trap, 32);
    fields.get("dimensionRight").set(UnitType.Special_Floor_Missile_Trap, 31);
    fields.get("dimensionDown").set(UnitType.Special_Floor_Missile_Trap, 31);
    fields.get("width").set(UnitType.Special_Floor_Missile_Trap, 64);
    fields.get("height").set(UnitType.Special_Floor_Missile_Trap, 64);
    fields.get("seekRange").set(UnitType.Special_Floor_Missile_Trap, 160);
    fields.get("sightRange").set(UnitType.Special_Floor_Missile_Trap, 192);
    fields
        .get("groundWeapon")
        .set(UnitType.Special_Floor_Missile_Trap, WeaponType.Hellfire_Missile_Pack_Floor_Trap);
    fields.get("maxGroundHits").set(UnitType.Special_Floor_Missile_Trap, 1);
    fields.get("airWeapon").set(UnitType.Special_Floor_Missile_Trap, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Floor_Missile_Trap, 0);
    fields.get("topSpeed").set(UnitType.Special_Floor_Missile_Trap, 0.0);
    fields.get("acceleration").set(UnitType.Special_Floor_Missile_Trap, 0);
    fields.get("haltDistance").set(UnitType.Special_Floor_Missile_Trap, 0);
    fields.get("turnRadius").set(UnitType.Special_Floor_Missile_Trap, 20);
    fields.get("canProduce").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("canAttack").set(UnitType.Special_Floor_Missile_Trap, true);
    fields.get("canMove").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("flyer").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("regeneratesHP").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("spellcaster").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("invincible").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("organic").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("mechanical").set(UnitType.Special_Floor_Missile_Trap, true);
    fields.get("robotic").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("detector").set(UnitType.Special_Floor_Missile_Trap, true);
    fields.get("resourceContainer").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("resourceDepot").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("refinery").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("worker").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("requiresPsi").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("requiresCreep").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("burrowable").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("cloakable").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("building").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("addon").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("flyingBuilding").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("neutral").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("hero").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("powerup").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("beacon").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("flagBeacon").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("specialBuilding").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("spell").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("producesCreep").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("producesLarva").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("mineralField").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("critter").set(UnitType.Special_Floor_Missile_Trap, false);
    fields.get("canBuildAddon").set(UnitType.Special_Floor_Missile_Trap, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Floor_Missile_Trap, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Floor_Missile_Trap, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Floor_Hatch() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Floor_Hatch, 204);
    fields.get("race").set(UnitType.Special_Floor_Hatch, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Floor_Hatch, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Floor_Hatch, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Floor_Hatch, toMap());
    fields.get("requiredTech").set(UnitType.Special_Floor_Hatch, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Floor_Hatch, TechType.None);
    fields.get("abilities").set(UnitType.Special_Floor_Hatch, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Floor_Hatch, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Floor_Hatch, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Floor_Hatch, 100000);
    fields.get("maxShields").set(UnitType.Special_Floor_Hatch, 0);
    fields.get("maxEnergy").set(UnitType.Special_Floor_Hatch, 0);
    fields.get("armor").set(UnitType.Special_Floor_Hatch, 0);
    fields.get("mineralPrice").set(UnitType.Special_Floor_Hatch, 1);
    fields.get("gasPrice").set(UnitType.Special_Floor_Hatch, 1);
    fields.get("buildTime").set(UnitType.Special_Floor_Hatch, 1);
    fields.get("supplyRequired").set(UnitType.Special_Floor_Hatch, 0);
    fields.get("supplyProvided").set(UnitType.Special_Floor_Hatch, 0);
    fields.get("spaceRequired").set(UnitType.Special_Floor_Hatch, 255);
    fields.get("spaceProvided").set(UnitType.Special_Floor_Hatch, 0);
    fields.get("buildScore").set(UnitType.Special_Floor_Hatch, 0);
    fields.get("destroyScore").set(UnitType.Special_Floor_Hatch, 10);
    fields.get("size").set(UnitType.Special_Floor_Hatch, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Special_Floor_Hatch, 8);
    fields.get("tileHeight").set(UnitType.Special_Floor_Hatch, 4);
    fields.get("dimensionLeft").set(UnitType.Special_Floor_Hatch, 128);
    fields.get("dimensionUp").set(UnitType.Special_Floor_Hatch, 64);
    fields.get("dimensionRight").set(UnitType.Special_Floor_Hatch, 127);
    fields.get("dimensionDown").set(UnitType.Special_Floor_Hatch, 63);
    fields.get("width").set(UnitType.Special_Floor_Hatch, 256);
    fields.get("height").set(UnitType.Special_Floor_Hatch, 128);
    fields.get("seekRange").set(UnitType.Special_Floor_Hatch, 0);
    fields.get("sightRange").set(UnitType.Special_Floor_Hatch, 224);
    fields.get("groundWeapon").set(UnitType.Special_Floor_Hatch, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Floor_Hatch, 0);
    fields.get("airWeapon").set(UnitType.Special_Floor_Hatch, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Floor_Hatch, 0);
    fields.get("topSpeed").set(UnitType.Special_Floor_Hatch, 0.0);
    fields.get("acceleration").set(UnitType.Special_Floor_Hatch, 0);
    fields.get("haltDistance").set(UnitType.Special_Floor_Hatch, 0);
    fields.get("turnRadius").set(UnitType.Special_Floor_Hatch, 0);
    fields.get("canProduce").set(UnitType.Special_Floor_Hatch, false);
    fields.get("canAttack").set(UnitType.Special_Floor_Hatch, false);
    fields.get("canMove").set(UnitType.Special_Floor_Hatch, false);
    fields.get("flyer").set(UnitType.Special_Floor_Hatch, false);
    fields.get("regeneratesHP").set(UnitType.Special_Floor_Hatch, false);
    fields.get("spellcaster").set(UnitType.Special_Floor_Hatch, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Floor_Hatch, false);
    fields.get("invincible").set(UnitType.Special_Floor_Hatch, true);
    fields.get("organic").set(UnitType.Special_Floor_Hatch, false);
    fields.get("mechanical").set(UnitType.Special_Floor_Hatch, false);
    fields.get("robotic").set(UnitType.Special_Floor_Hatch, false);
    fields.get("detector").set(UnitType.Special_Floor_Hatch, false);
    fields.get("resourceContainer").set(UnitType.Special_Floor_Hatch, false);
    fields.get("resourceDepot").set(UnitType.Special_Floor_Hatch, false);
    fields.get("refinery").set(UnitType.Special_Floor_Hatch, false);
    fields.get("worker").set(UnitType.Special_Floor_Hatch, false);
    fields.get("requiresPsi").set(UnitType.Special_Floor_Hatch, false);
    fields.get("requiresCreep").set(UnitType.Special_Floor_Hatch, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Floor_Hatch, false);
    fields.get("burrowable").set(UnitType.Special_Floor_Hatch, false);
    fields.get("cloakable").set(UnitType.Special_Floor_Hatch, false);
    fields.get("building").set(UnitType.Special_Floor_Hatch, false);
    fields.get("addon").set(UnitType.Special_Floor_Hatch, false);
    fields.get("flyingBuilding").set(UnitType.Special_Floor_Hatch, false);
    fields.get("neutral").set(UnitType.Special_Floor_Hatch, false);
    fields.get("hero").set(UnitType.Special_Floor_Hatch, false);
    fields.get("powerup").set(UnitType.Special_Floor_Hatch, false);
    fields.get("beacon").set(UnitType.Special_Floor_Hatch, false);
    fields.get("flagBeacon").set(UnitType.Special_Floor_Hatch, false);
    fields.get("specialBuilding").set(UnitType.Special_Floor_Hatch, false);
    fields.get("spell").set(UnitType.Special_Floor_Hatch, false);
    fields.get("producesCreep").set(UnitType.Special_Floor_Hatch, false);
    fields.get("producesLarva").set(UnitType.Special_Floor_Hatch, false);
    fields.get("mineralField").set(UnitType.Special_Floor_Hatch, false);
    fields.get("critter").set(UnitType.Special_Floor_Hatch, false);
    fields.get("canBuildAddon").set(UnitType.Special_Floor_Hatch, false);
    fields.get("researchesWhat").set(UnitType.Special_Floor_Hatch, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Floor_Hatch, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Upper_Level_Door() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Upper_Level_Door, 205);
    fields.get("race").set(UnitType.Special_Upper_Level_Door, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Upper_Level_Door, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Upper_Level_Door, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Upper_Level_Door, toMap());
    fields.get("requiredTech").set(UnitType.Special_Upper_Level_Door, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Upper_Level_Door, TechType.None);
    fields.get("abilities").set(UnitType.Special_Upper_Level_Door, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Upper_Level_Door, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Upper_Level_Door, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Upper_Level_Door, 100000);
    fields.get("maxShields").set(UnitType.Special_Upper_Level_Door, 0);
    fields.get("maxEnergy").set(UnitType.Special_Upper_Level_Door, 0);
    fields.get("armor").set(UnitType.Special_Upper_Level_Door, 0);
    fields.get("mineralPrice").set(UnitType.Special_Upper_Level_Door, 1);
    fields.get("gasPrice").set(UnitType.Special_Upper_Level_Door, 1);
    fields.get("buildTime").set(UnitType.Special_Upper_Level_Door, 1);
    fields.get("supplyRequired").set(UnitType.Special_Upper_Level_Door, 0);
    fields.get("supplyProvided").set(UnitType.Special_Upper_Level_Door, 0);
    fields.get("spaceRequired").set(UnitType.Special_Upper_Level_Door, 255);
    fields.get("spaceProvided").set(UnitType.Special_Upper_Level_Door, 0);
    fields.get("buildScore").set(UnitType.Special_Upper_Level_Door, 0);
    fields.get("destroyScore").set(UnitType.Special_Upper_Level_Door, 10);
    fields.get("size").set(UnitType.Special_Upper_Level_Door, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Special_Upper_Level_Door, 3);
    fields.get("tileHeight").set(UnitType.Special_Upper_Level_Door, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Upper_Level_Door, 25);
    fields.get("dimensionUp").set(UnitType.Special_Upper_Level_Door, 17);
    fields.get("dimensionRight").set(UnitType.Special_Upper_Level_Door, 44);
    fields.get("dimensionDown").set(UnitType.Special_Upper_Level_Door, 20);
    fields.get("width").set(UnitType.Special_Upper_Level_Door, 70);
    fields.get("height").set(UnitType.Special_Upper_Level_Door, 38);
    fields.get("seekRange").set(UnitType.Special_Upper_Level_Door, 0);
    fields.get("sightRange").set(UnitType.Special_Upper_Level_Door, 32);
    fields.get("groundWeapon").set(UnitType.Special_Upper_Level_Door, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Upper_Level_Door, 0);
    fields.get("airWeapon").set(UnitType.Special_Upper_Level_Door, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Upper_Level_Door, 0);
    fields.get("topSpeed").set(UnitType.Special_Upper_Level_Door, 0.0);
    fields.get("acceleration").set(UnitType.Special_Upper_Level_Door, 0);
    fields.get("haltDistance").set(UnitType.Special_Upper_Level_Door, 0);
    fields.get("turnRadius").set(UnitType.Special_Upper_Level_Door, 0);
    fields.get("canProduce").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("canAttack").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("canMove").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("flyer").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("regeneratesHP").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("spellcaster").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("invincible").set(UnitType.Special_Upper_Level_Door, true);
    fields.get("organic").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("mechanical").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("robotic").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("detector").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("resourceContainer").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("resourceDepot").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("refinery").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("worker").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("requiresPsi").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("requiresCreep").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("burrowable").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("cloakable").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("building").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("addon").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("flyingBuilding").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("neutral").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("hero").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("powerup").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("beacon").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("flagBeacon").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("specialBuilding").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("spell").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("producesCreep").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("producesLarva").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("mineralField").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("critter").set(UnitType.Special_Upper_Level_Door, false);
    fields.get("canBuildAddon").set(UnitType.Special_Upper_Level_Door, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Upper_Level_Door, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Upper_Level_Door, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Right_Upper_Level_Door() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Right_Upper_Level_Door, 206);
    fields.get("race").set(UnitType.Special_Right_Upper_Level_Door, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Right_Upper_Level_Door, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Special_Right_Upper_Level_Door, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Right_Upper_Level_Door, toMap());
    fields.get("requiredTech").set(UnitType.Special_Right_Upper_Level_Door, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Right_Upper_Level_Door, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Special_Right_Upper_Level_Door, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Special_Right_Upper_Level_Door, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Right_Upper_Level_Door, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Right_Upper_Level_Door, 100000);
    fields.get("maxShields").set(UnitType.Special_Right_Upper_Level_Door, 0);
    fields.get("maxEnergy").set(UnitType.Special_Right_Upper_Level_Door, 0);
    fields.get("armor").set(UnitType.Special_Right_Upper_Level_Door, 0);
    fields.get("mineralPrice").set(UnitType.Special_Right_Upper_Level_Door, 1);
    fields.get("gasPrice").set(UnitType.Special_Right_Upper_Level_Door, 1);
    fields.get("buildTime").set(UnitType.Special_Right_Upper_Level_Door, 1);
    fields.get("supplyRequired").set(UnitType.Special_Right_Upper_Level_Door, 0);
    fields.get("supplyProvided").set(UnitType.Special_Right_Upper_Level_Door, 0);
    fields.get("spaceRequired").set(UnitType.Special_Right_Upper_Level_Door, 255);
    fields.get("spaceProvided").set(UnitType.Special_Right_Upper_Level_Door, 0);
    fields.get("buildScore").set(UnitType.Special_Right_Upper_Level_Door, 0);
    fields.get("destroyScore").set(UnitType.Special_Right_Upper_Level_Door, 10);
    fields.get("size").set(UnitType.Special_Right_Upper_Level_Door, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Special_Right_Upper_Level_Door, 3);
    fields.get("tileHeight").set(UnitType.Special_Right_Upper_Level_Door, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Right_Upper_Level_Door, 44);
    fields.get("dimensionUp").set(UnitType.Special_Right_Upper_Level_Door, 17);
    fields.get("dimensionRight").set(UnitType.Special_Right_Upper_Level_Door, 25);
    fields.get("dimensionDown").set(UnitType.Special_Right_Upper_Level_Door, 20);
    fields.get("width").set(UnitType.Special_Right_Upper_Level_Door, 70);
    fields.get("height").set(UnitType.Special_Right_Upper_Level_Door, 38);
    fields.get("seekRange").set(UnitType.Special_Right_Upper_Level_Door, 0);
    fields.get("sightRange").set(UnitType.Special_Right_Upper_Level_Door, 32);
    fields.get("groundWeapon").set(UnitType.Special_Right_Upper_Level_Door, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Right_Upper_Level_Door, 0);
    fields.get("airWeapon").set(UnitType.Special_Right_Upper_Level_Door, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Right_Upper_Level_Door, 0);
    fields.get("topSpeed").set(UnitType.Special_Right_Upper_Level_Door, 0.0);
    fields.get("acceleration").set(UnitType.Special_Right_Upper_Level_Door, 0);
    fields.get("haltDistance").set(UnitType.Special_Right_Upper_Level_Door, 0);
    fields.get("turnRadius").set(UnitType.Special_Right_Upper_Level_Door, 0);
    fields.get("canProduce").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("canAttack").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("canMove").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("flyer").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("regeneratesHP").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("spellcaster").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("invincible").set(UnitType.Special_Right_Upper_Level_Door, true);
    fields.get("organic").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("mechanical").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("robotic").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("detector").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("resourceContainer").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("resourceDepot").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("refinery").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("worker").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("requiresPsi").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("requiresCreep").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("burrowable").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("cloakable").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("building").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("addon").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("flyingBuilding").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("neutral").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("hero").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("powerup").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("beacon").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("flagBeacon").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("specialBuilding").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("spell").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("producesCreep").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("producesLarva").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("mineralField").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("critter").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields.get("canBuildAddon").set(UnitType.Special_Right_Upper_Level_Door, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Right_Upper_Level_Door, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Right_Upper_Level_Door, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Pit_Door() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Pit_Door, 207);
    fields.get("race").set(UnitType.Special_Pit_Door, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Pit_Door, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Pit_Door, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Pit_Door, toMap());
    fields.get("requiredTech").set(UnitType.Special_Pit_Door, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Pit_Door, TechType.None);
    fields.get("abilities").set(UnitType.Special_Pit_Door, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Pit_Door, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Pit_Door, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Pit_Door, 100000);
    fields.get("maxShields").set(UnitType.Special_Pit_Door, 0);
    fields.get("maxEnergy").set(UnitType.Special_Pit_Door, 0);
    fields.get("armor").set(UnitType.Special_Pit_Door, 0);
    fields.get("mineralPrice").set(UnitType.Special_Pit_Door, 1);
    fields.get("gasPrice").set(UnitType.Special_Pit_Door, 1);
    fields.get("buildTime").set(UnitType.Special_Pit_Door, 1);
    fields.get("supplyRequired").set(UnitType.Special_Pit_Door, 0);
    fields.get("supplyProvided").set(UnitType.Special_Pit_Door, 0);
    fields.get("spaceRequired").set(UnitType.Special_Pit_Door, 255);
    fields.get("spaceProvided").set(UnitType.Special_Pit_Door, 0);
    fields.get("buildScore").set(UnitType.Special_Pit_Door, 0);
    fields.get("destroyScore").set(UnitType.Special_Pit_Door, 10);
    fields.get("size").set(UnitType.Special_Pit_Door, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Special_Pit_Door, 3);
    fields.get("tileHeight").set(UnitType.Special_Pit_Door, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Pit_Door, 41);
    fields.get("dimensionUp").set(UnitType.Special_Pit_Door, 17);
    fields.get("dimensionRight").set(UnitType.Special_Pit_Door, 28);
    fields.get("dimensionDown").set(UnitType.Special_Pit_Door, 20);
    fields.get("width").set(UnitType.Special_Pit_Door, 70);
    fields.get("height").set(UnitType.Special_Pit_Door, 38);
    fields.get("seekRange").set(UnitType.Special_Pit_Door, 0);
    fields.get("sightRange").set(UnitType.Special_Pit_Door, 32);
    fields.get("groundWeapon").set(UnitType.Special_Pit_Door, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Pit_Door, 0);
    fields.get("airWeapon").set(UnitType.Special_Pit_Door, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Pit_Door, 0);
    fields.get("topSpeed").set(UnitType.Special_Pit_Door, 0.0);
    fields.get("acceleration").set(UnitType.Special_Pit_Door, 0);
    fields.get("haltDistance").set(UnitType.Special_Pit_Door, 0);
    fields.get("turnRadius").set(UnitType.Special_Pit_Door, 0);
    fields.get("canProduce").set(UnitType.Special_Pit_Door, false);
    fields.get("canAttack").set(UnitType.Special_Pit_Door, false);
    fields.get("canMove").set(UnitType.Special_Pit_Door, false);
    fields.get("flyer").set(UnitType.Special_Pit_Door, false);
    fields.get("regeneratesHP").set(UnitType.Special_Pit_Door, false);
    fields.get("spellcaster").set(UnitType.Special_Pit_Door, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Pit_Door, false);
    fields.get("invincible").set(UnitType.Special_Pit_Door, true);
    fields.get("organic").set(UnitType.Special_Pit_Door, false);
    fields.get("mechanical").set(UnitType.Special_Pit_Door, false);
    fields.get("robotic").set(UnitType.Special_Pit_Door, false);
    fields.get("detector").set(UnitType.Special_Pit_Door, false);
    fields.get("resourceContainer").set(UnitType.Special_Pit_Door, false);
    fields.get("resourceDepot").set(UnitType.Special_Pit_Door, false);
    fields.get("refinery").set(UnitType.Special_Pit_Door, false);
    fields.get("worker").set(UnitType.Special_Pit_Door, false);
    fields.get("requiresPsi").set(UnitType.Special_Pit_Door, false);
    fields.get("requiresCreep").set(UnitType.Special_Pit_Door, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Pit_Door, false);
    fields.get("burrowable").set(UnitType.Special_Pit_Door, false);
    fields.get("cloakable").set(UnitType.Special_Pit_Door, false);
    fields.get("building").set(UnitType.Special_Pit_Door, false);
    fields.get("addon").set(UnitType.Special_Pit_Door, false);
    fields.get("flyingBuilding").set(UnitType.Special_Pit_Door, false);
    fields.get("neutral").set(UnitType.Special_Pit_Door, false);
    fields.get("hero").set(UnitType.Special_Pit_Door, false);
    fields.get("powerup").set(UnitType.Special_Pit_Door, false);
    fields.get("beacon").set(UnitType.Special_Pit_Door, false);
    fields.get("flagBeacon").set(UnitType.Special_Pit_Door, false);
    fields.get("specialBuilding").set(UnitType.Special_Pit_Door, false);
    fields.get("spell").set(UnitType.Special_Pit_Door, false);
    fields.get("producesCreep").set(UnitType.Special_Pit_Door, false);
    fields.get("producesLarva").set(UnitType.Special_Pit_Door, false);
    fields.get("mineralField").set(UnitType.Special_Pit_Door, false);
    fields.get("critter").set(UnitType.Special_Pit_Door, false);
    fields.get("canBuildAddon").set(UnitType.Special_Pit_Door, false);
    fields.get("researchesWhat").set(UnitType.Special_Pit_Door, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Pit_Door, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Right_Pit_Door() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Right_Pit_Door, 208);
    fields.get("race").set(UnitType.Special_Right_Pit_Door, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Right_Pit_Door, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Right_Pit_Door, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Right_Pit_Door, toMap());
    fields.get("requiredTech").set(UnitType.Special_Right_Pit_Door, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Right_Pit_Door, TechType.None);
    fields.get("abilities").set(UnitType.Special_Right_Pit_Door, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Right_Pit_Door, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Right_Pit_Door, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Right_Pit_Door, 100000);
    fields.get("maxShields").set(UnitType.Special_Right_Pit_Door, 0);
    fields.get("maxEnergy").set(UnitType.Special_Right_Pit_Door, 0);
    fields.get("armor").set(UnitType.Special_Right_Pit_Door, 0);
    fields.get("mineralPrice").set(UnitType.Special_Right_Pit_Door, 1);
    fields.get("gasPrice").set(UnitType.Special_Right_Pit_Door, 1);
    fields.get("buildTime").set(UnitType.Special_Right_Pit_Door, 1);
    fields.get("supplyRequired").set(UnitType.Special_Right_Pit_Door, 0);
    fields.get("supplyProvided").set(UnitType.Special_Right_Pit_Door, 0);
    fields.get("spaceRequired").set(UnitType.Special_Right_Pit_Door, 255);
    fields.get("spaceProvided").set(UnitType.Special_Right_Pit_Door, 0);
    fields.get("buildScore").set(UnitType.Special_Right_Pit_Door, 0);
    fields.get("destroyScore").set(UnitType.Special_Right_Pit_Door, 10);
    fields.get("size").set(UnitType.Special_Right_Pit_Door, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Special_Right_Pit_Door, 3);
    fields.get("tileHeight").set(UnitType.Special_Right_Pit_Door, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Right_Pit_Door, 28);
    fields.get("dimensionUp").set(UnitType.Special_Right_Pit_Door, 17);
    fields.get("dimensionRight").set(UnitType.Special_Right_Pit_Door, 41);
    fields.get("dimensionDown").set(UnitType.Special_Right_Pit_Door, 20);
    fields.get("width").set(UnitType.Special_Right_Pit_Door, 70);
    fields.get("height").set(UnitType.Special_Right_Pit_Door, 38);
    fields.get("seekRange").set(UnitType.Special_Right_Pit_Door, 0);
    fields.get("sightRange").set(UnitType.Special_Right_Pit_Door, 32);
    fields.get("groundWeapon").set(UnitType.Special_Right_Pit_Door, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Right_Pit_Door, 0);
    fields.get("airWeapon").set(UnitType.Special_Right_Pit_Door, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Right_Pit_Door, 0);
    fields.get("topSpeed").set(UnitType.Special_Right_Pit_Door, 0.0);
    fields.get("acceleration").set(UnitType.Special_Right_Pit_Door, 0);
    fields.get("haltDistance").set(UnitType.Special_Right_Pit_Door, 0);
    fields.get("turnRadius").set(UnitType.Special_Right_Pit_Door, 0);
    fields.get("canProduce").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("canAttack").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("canMove").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("flyer").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("regeneratesHP").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("spellcaster").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("invincible").set(UnitType.Special_Right_Pit_Door, true);
    fields.get("organic").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("mechanical").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("robotic").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("detector").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("resourceContainer").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("resourceDepot").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("refinery").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("worker").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("requiresPsi").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("requiresCreep").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("burrowable").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("cloakable").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("building").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("addon").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("flyingBuilding").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("neutral").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("hero").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("powerup").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("beacon").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("flagBeacon").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("specialBuilding").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("spell").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("producesCreep").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("producesLarva").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("mineralField").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("critter").set(UnitType.Special_Right_Pit_Door, false);
    fields.get("canBuildAddon").set(UnitType.Special_Right_Pit_Door, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Right_Pit_Door, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Right_Pit_Door, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Floor_Gun_Trap() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Floor_Gun_Trap, 209);
    fields.get("race").set(UnitType.Special_Floor_Gun_Trap, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Floor_Gun_Trap, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Floor_Gun_Trap, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Floor_Gun_Trap, toMap());
    fields.get("requiredTech").set(UnitType.Special_Floor_Gun_Trap, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Floor_Gun_Trap, TechType.None);
    fields.get("abilities").set(UnitType.Special_Floor_Gun_Trap, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Special_Floor_Gun_Trap,
            new ArrayList(Arrays.asList(UpgradeType.Terran_Vehicle_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Special_Floor_Gun_Trap, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Floor_Gun_Trap, 50);
    fields.get("maxShields").set(UnitType.Special_Floor_Gun_Trap, 0);
    fields.get("maxEnergy").set(UnitType.Special_Floor_Gun_Trap, 0);
    fields.get("armor").set(UnitType.Special_Floor_Gun_Trap, 0);
    fields.get("mineralPrice").set(UnitType.Special_Floor_Gun_Trap, 1);
    fields.get("gasPrice").set(UnitType.Special_Floor_Gun_Trap, 1);
    fields.get("buildTime").set(UnitType.Special_Floor_Gun_Trap, 1);
    fields.get("supplyRequired").set(UnitType.Special_Floor_Gun_Trap, 0);
    fields.get("supplyProvided").set(UnitType.Special_Floor_Gun_Trap, 0);
    fields.get("spaceRequired").set(UnitType.Special_Floor_Gun_Trap, 255);
    fields.get("spaceProvided").set(UnitType.Special_Floor_Gun_Trap, 0);
    fields.get("buildScore").set(UnitType.Special_Floor_Gun_Trap, 0);
    fields.get("destroyScore").set(UnitType.Special_Floor_Gun_Trap, 100);
    fields.get("size").set(UnitType.Special_Floor_Gun_Trap, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Floor_Gun_Trap, 2);
    fields.get("tileHeight").set(UnitType.Special_Floor_Gun_Trap, 2);
    fields.get("dimensionLeft").set(UnitType.Special_Floor_Gun_Trap, 32);
    fields.get("dimensionUp").set(UnitType.Special_Floor_Gun_Trap, 32);
    fields.get("dimensionRight").set(UnitType.Special_Floor_Gun_Trap, 31);
    fields.get("dimensionDown").set(UnitType.Special_Floor_Gun_Trap, 31);
    fields.get("width").set(UnitType.Special_Floor_Gun_Trap, 64);
    fields.get("height").set(UnitType.Special_Floor_Gun_Trap, 64);
    fields.get("seekRange").set(UnitType.Special_Floor_Gun_Trap, 160);
    fields.get("sightRange").set(UnitType.Special_Floor_Gun_Trap, 192);
    fields
        .get("groundWeapon")
        .set(UnitType.Special_Floor_Gun_Trap, WeaponType.Twin_Autocannons_Floor_Trap);
    fields.get("maxGroundHits").set(UnitType.Special_Floor_Gun_Trap, 1);
    fields.get("airWeapon").set(UnitType.Special_Floor_Gun_Trap, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Floor_Gun_Trap, 0);
    fields.get("topSpeed").set(UnitType.Special_Floor_Gun_Trap, 0.0);
    fields.get("acceleration").set(UnitType.Special_Floor_Gun_Trap, 0);
    fields.get("haltDistance").set(UnitType.Special_Floor_Gun_Trap, 0);
    fields.get("turnRadius").set(UnitType.Special_Floor_Gun_Trap, 127);
    fields.get("canProduce").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("canAttack").set(UnitType.Special_Floor_Gun_Trap, true);
    fields.get("canMove").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("flyer").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("regeneratesHP").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("spellcaster").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("invincible").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("organic").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("mechanical").set(UnitType.Special_Floor_Gun_Trap, true);
    fields.get("robotic").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("detector").set(UnitType.Special_Floor_Gun_Trap, true);
    fields.get("resourceContainer").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("resourceDepot").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("refinery").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("worker").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("requiresPsi").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("requiresCreep").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("burrowable").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("cloakable").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("building").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("addon").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("flyingBuilding").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("neutral").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("hero").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("powerup").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("beacon").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("flagBeacon").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("specialBuilding").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("spell").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("producesCreep").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("producesLarva").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("mineralField").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("critter").set(UnitType.Special_Floor_Gun_Trap, false);
    fields.get("canBuildAddon").set(UnitType.Special_Floor_Gun_Trap, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Floor_Gun_Trap, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Floor_Gun_Trap, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Wall_Missile_Trap() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Wall_Missile_Trap, 210);
    fields.get("race").set(UnitType.Special_Wall_Missile_Trap, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Wall_Missile_Trap, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Special_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Wall_Missile_Trap, toMap());
    fields.get("requiredTech").set(UnitType.Special_Wall_Missile_Trap, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Wall_Missile_Trap, TechType.None);
    fields.get("abilities").set(UnitType.Special_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Special_Wall_Missile_Trap,
            new ArrayList(Arrays.asList(UpgradeType.Terran_Vehicle_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Special_Wall_Missile_Trap, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Wall_Missile_Trap, 50);
    fields.get("maxShields").set(UnitType.Special_Wall_Missile_Trap, 0);
    fields.get("maxEnergy").set(UnitType.Special_Wall_Missile_Trap, 0);
    fields.get("armor").set(UnitType.Special_Wall_Missile_Trap, 0);
    fields.get("mineralPrice").set(UnitType.Special_Wall_Missile_Trap, 1);
    fields.get("gasPrice").set(UnitType.Special_Wall_Missile_Trap, 1);
    fields.get("buildTime").set(UnitType.Special_Wall_Missile_Trap, 1);
    fields.get("supplyRequired").set(UnitType.Special_Wall_Missile_Trap, 0);
    fields.get("supplyProvided").set(UnitType.Special_Wall_Missile_Trap, 0);
    fields.get("spaceRequired").set(UnitType.Special_Wall_Missile_Trap, 255);
    fields.get("spaceProvided").set(UnitType.Special_Wall_Missile_Trap, 0);
    fields.get("buildScore").set(UnitType.Special_Wall_Missile_Trap, 0);
    fields.get("destroyScore").set(UnitType.Special_Wall_Missile_Trap, 100);
    fields.get("size").set(UnitType.Special_Wall_Missile_Trap, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Wall_Missile_Trap, 1);
    fields.get("tileHeight").set(UnitType.Special_Wall_Missile_Trap, 1);
    fields.get("dimensionLeft").set(UnitType.Special_Wall_Missile_Trap, 16);
    fields.get("dimensionUp").set(UnitType.Special_Wall_Missile_Trap, 16);
    fields.get("dimensionRight").set(UnitType.Special_Wall_Missile_Trap, 15);
    fields.get("dimensionDown").set(UnitType.Special_Wall_Missile_Trap, 15);
    fields.get("width").set(UnitType.Special_Wall_Missile_Trap, 32);
    fields.get("height").set(UnitType.Special_Wall_Missile_Trap, 32);
    fields.get("seekRange").set(UnitType.Special_Wall_Missile_Trap, 160);
    fields.get("sightRange").set(UnitType.Special_Wall_Missile_Trap, 192);
    fields
        .get("groundWeapon")
        .set(UnitType.Special_Wall_Missile_Trap, WeaponType.Hellfire_Missile_Pack_Wall_Trap);
    fields.get("maxGroundHits").set(UnitType.Special_Wall_Missile_Trap, 1);
    fields.get("airWeapon").set(UnitType.Special_Wall_Missile_Trap, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Wall_Missile_Trap, 0);
    fields.get("topSpeed").set(UnitType.Special_Wall_Missile_Trap, 0.0);
    fields.get("acceleration").set(UnitType.Special_Wall_Missile_Trap, 0);
    fields.get("haltDistance").set(UnitType.Special_Wall_Missile_Trap, 0);
    fields.get("turnRadius").set(UnitType.Special_Wall_Missile_Trap, 0);
    fields.get("canProduce").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("canAttack").set(UnitType.Special_Wall_Missile_Trap, true);
    fields.get("canMove").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("flyer").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("regeneratesHP").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("spellcaster").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("invincible").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("organic").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("mechanical").set(UnitType.Special_Wall_Missile_Trap, true);
    fields.get("robotic").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("detector").set(UnitType.Special_Wall_Missile_Trap, true);
    fields.get("resourceContainer").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("resourceDepot").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("refinery").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("worker").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("requiresPsi").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("requiresCreep").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("burrowable").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("cloakable").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("building").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("addon").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("flyingBuilding").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("neutral").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("hero").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("powerup").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("beacon").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("flagBeacon").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("specialBuilding").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("spell").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("producesCreep").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("producesLarva").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("mineralField").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("critter").set(UnitType.Special_Wall_Missile_Trap, false);
    fields.get("canBuildAddon").set(UnitType.Special_Wall_Missile_Trap, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Wall_Flame_Trap() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Wall_Flame_Trap, 211);
    fields.get("race").set(UnitType.Special_Wall_Flame_Trap, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Wall_Flame_Trap, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Wall_Flame_Trap, toMap());
    fields.get("requiredTech").set(UnitType.Special_Wall_Flame_Trap, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Wall_Flame_Trap, TechType.None);
    fields.get("abilities").set(UnitType.Special_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Special_Wall_Flame_Trap,
            new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Special_Wall_Flame_Trap, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Wall_Flame_Trap, 50);
    fields.get("maxShields").set(UnitType.Special_Wall_Flame_Trap, 0);
    fields.get("maxEnergy").set(UnitType.Special_Wall_Flame_Trap, 0);
    fields.get("armor").set(UnitType.Special_Wall_Flame_Trap, 0);
    fields.get("mineralPrice").set(UnitType.Special_Wall_Flame_Trap, 1);
    fields.get("gasPrice").set(UnitType.Special_Wall_Flame_Trap, 1);
    fields.get("buildTime").set(UnitType.Special_Wall_Flame_Trap, 1);
    fields.get("supplyRequired").set(UnitType.Special_Wall_Flame_Trap, 0);
    fields.get("supplyProvided").set(UnitType.Special_Wall_Flame_Trap, 0);
    fields.get("spaceRequired").set(UnitType.Special_Wall_Flame_Trap, 255);
    fields.get("spaceProvided").set(UnitType.Special_Wall_Flame_Trap, 0);
    fields.get("buildScore").set(UnitType.Special_Wall_Flame_Trap, 0);
    fields.get("destroyScore").set(UnitType.Special_Wall_Flame_Trap, 100);
    fields.get("size").set(UnitType.Special_Wall_Flame_Trap, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Wall_Flame_Trap, 1);
    fields.get("tileHeight").set(UnitType.Special_Wall_Flame_Trap, 1);
    fields.get("dimensionLeft").set(UnitType.Special_Wall_Flame_Trap, 16);
    fields.get("dimensionUp").set(UnitType.Special_Wall_Flame_Trap, 16);
    fields.get("dimensionRight").set(UnitType.Special_Wall_Flame_Trap, 15);
    fields.get("dimensionDown").set(UnitType.Special_Wall_Flame_Trap, 15);
    fields.get("width").set(UnitType.Special_Wall_Flame_Trap, 32);
    fields.get("height").set(UnitType.Special_Wall_Flame_Trap, 32);
    fields.get("seekRange").set(UnitType.Special_Wall_Flame_Trap, 64);
    fields.get("sightRange").set(UnitType.Special_Wall_Flame_Trap, 96);
    fields
        .get("groundWeapon")
        .set(UnitType.Special_Wall_Flame_Trap, WeaponType.Flame_Thrower_Wall_Trap);
    fields.get("maxGroundHits").set(UnitType.Special_Wall_Flame_Trap, 1);
    fields.get("airWeapon").set(UnitType.Special_Wall_Flame_Trap, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Wall_Flame_Trap, 0);
    fields.get("topSpeed").set(UnitType.Special_Wall_Flame_Trap, 0.0);
    fields.get("acceleration").set(UnitType.Special_Wall_Flame_Trap, 0);
    fields.get("haltDistance").set(UnitType.Special_Wall_Flame_Trap, 0);
    fields.get("turnRadius").set(UnitType.Special_Wall_Flame_Trap, 0);
    fields.get("canProduce").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("canAttack").set(UnitType.Special_Wall_Flame_Trap, true);
    fields.get("canMove").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("flyer").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("regeneratesHP").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("spellcaster").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("invincible").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("organic").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("mechanical").set(UnitType.Special_Wall_Flame_Trap, true);
    fields.get("robotic").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("detector").set(UnitType.Special_Wall_Flame_Trap, true);
    fields.get("resourceContainer").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("resourceDepot").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("refinery").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("worker").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("requiresPsi").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("requiresCreep").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("burrowable").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("cloakable").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("building").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("addon").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("flyingBuilding").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("neutral").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("hero").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("powerup").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("beacon").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("flagBeacon").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("specialBuilding").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("spell").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("producesCreep").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("producesLarva").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("mineralField").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("critter").set(UnitType.Special_Wall_Flame_Trap, false);
    fields.get("canBuildAddon").set(UnitType.Special_Wall_Flame_Trap, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Right_Wall_Missile_Trap() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Right_Wall_Missile_Trap, 212);
    fields.get("race").set(UnitType.Special_Right_Wall_Missile_Trap, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Right_Wall_Missile_Trap, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Special_Right_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Right_Wall_Missile_Trap, toMap());
    fields.get("requiredTech").set(UnitType.Special_Right_Wall_Missile_Trap, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Right_Wall_Missile_Trap, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Special_Right_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Special_Right_Wall_Missile_Trap,
            new ArrayList(Arrays.asList(UpgradeType.Terran_Vehicle_Weapons)));
    fields
        .get("armorUpgrade")
        .set(UnitType.Special_Right_Wall_Missile_Trap, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Right_Wall_Missile_Trap, 50);
    fields.get("maxShields").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
    fields.get("maxEnergy").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
    fields.get("armor").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
    fields.get("mineralPrice").set(UnitType.Special_Right_Wall_Missile_Trap, 1);
    fields.get("gasPrice").set(UnitType.Special_Right_Wall_Missile_Trap, 1);
    fields.get("buildTime").set(UnitType.Special_Right_Wall_Missile_Trap, 1);
    fields.get("supplyRequired").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
    fields.get("supplyProvided").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
    fields.get("spaceRequired").set(UnitType.Special_Right_Wall_Missile_Trap, 255);
    fields.get("spaceProvided").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
    fields.get("buildScore").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
    fields.get("destroyScore").set(UnitType.Special_Right_Wall_Missile_Trap, 100);
    fields.get("size").set(UnitType.Special_Right_Wall_Missile_Trap, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Right_Wall_Missile_Trap, 1);
    fields.get("tileHeight").set(UnitType.Special_Right_Wall_Missile_Trap, 1);
    fields.get("dimensionLeft").set(UnitType.Special_Right_Wall_Missile_Trap, 16);
    fields.get("dimensionUp").set(UnitType.Special_Right_Wall_Missile_Trap, 16);
    fields.get("dimensionRight").set(UnitType.Special_Right_Wall_Missile_Trap, 15);
    fields.get("dimensionDown").set(UnitType.Special_Right_Wall_Missile_Trap, 15);
    fields.get("width").set(UnitType.Special_Right_Wall_Missile_Trap, 32);
    fields.get("height").set(UnitType.Special_Right_Wall_Missile_Trap, 32);
    fields.get("seekRange").set(UnitType.Special_Right_Wall_Missile_Trap, 160);
    fields.get("sightRange").set(UnitType.Special_Right_Wall_Missile_Trap, 192);
    fields
        .get("groundWeapon")
        .set(UnitType.Special_Right_Wall_Missile_Trap, WeaponType.Hellfire_Missile_Pack_Wall_Trap);
    fields.get("maxGroundHits").set(UnitType.Special_Right_Wall_Missile_Trap, 1);
    fields.get("airWeapon").set(UnitType.Special_Right_Wall_Missile_Trap, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
    fields.get("topSpeed").set(UnitType.Special_Right_Wall_Missile_Trap, 0.0);
    fields.get("acceleration").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
    fields.get("haltDistance").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
    fields.get("turnRadius").set(UnitType.Special_Right_Wall_Missile_Trap, 0);
    fields.get("canProduce").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("canAttack").set(UnitType.Special_Right_Wall_Missile_Trap, true);
    fields.get("canMove").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("flyer").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("regeneratesHP").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("spellcaster").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("invincible").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("organic").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("mechanical").set(UnitType.Special_Right_Wall_Missile_Trap, true);
    fields.get("robotic").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("detector").set(UnitType.Special_Right_Wall_Missile_Trap, true);
    fields.get("resourceContainer").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("resourceDepot").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("refinery").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("worker").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("requiresPsi").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("requiresCreep").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("burrowable").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("cloakable").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("building").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("addon").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("flyingBuilding").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("neutral").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("hero").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("powerup").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("beacon").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("flagBeacon").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("specialBuilding").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("spell").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("producesCreep").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("producesLarva").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("mineralField").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("critter").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields.get("canBuildAddon").set(UnitType.Special_Right_Wall_Missile_Trap, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Right_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Right_Wall_Missile_Trap, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Right_Wall_Flame_Trap() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Right_Wall_Flame_Trap, 213);
    fields.get("race").set(UnitType.Special_Right_Wall_Flame_Trap, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Right_Wall_Flame_Trap, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Special_Right_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Right_Wall_Flame_Trap, toMap());
    fields.get("requiredTech").set(UnitType.Special_Right_Wall_Flame_Trap, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Right_Wall_Flame_Trap, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Special_Right_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(
            UnitType.Special_Right_Wall_Flame_Trap,
            new ArrayList(Arrays.asList(UpgradeType.Terran_Infantry_Weapons)));
    fields.get("armorUpgrade").set(UnitType.Special_Right_Wall_Flame_Trap, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Right_Wall_Flame_Trap, 50);
    fields.get("maxShields").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
    fields.get("maxEnergy").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
    fields.get("armor").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
    fields.get("mineralPrice").set(UnitType.Special_Right_Wall_Flame_Trap, 1);
    fields.get("gasPrice").set(UnitType.Special_Right_Wall_Flame_Trap, 1);
    fields.get("buildTime").set(UnitType.Special_Right_Wall_Flame_Trap, 1);
    fields.get("supplyRequired").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
    fields.get("supplyProvided").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
    fields.get("spaceRequired").set(UnitType.Special_Right_Wall_Flame_Trap, 255);
    fields.get("spaceProvided").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
    fields.get("buildScore").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
    fields.get("destroyScore").set(UnitType.Special_Right_Wall_Flame_Trap, 100);
    fields.get("size").set(UnitType.Special_Right_Wall_Flame_Trap, UnitSizeType.Large);
    fields.get("tileWidth").set(UnitType.Special_Right_Wall_Flame_Trap, 1);
    fields.get("tileHeight").set(UnitType.Special_Right_Wall_Flame_Trap, 1);
    fields.get("dimensionLeft").set(UnitType.Special_Right_Wall_Flame_Trap, 16);
    fields.get("dimensionUp").set(UnitType.Special_Right_Wall_Flame_Trap, 16);
    fields.get("dimensionRight").set(UnitType.Special_Right_Wall_Flame_Trap, 15);
    fields.get("dimensionDown").set(UnitType.Special_Right_Wall_Flame_Trap, 15);
    fields.get("width").set(UnitType.Special_Right_Wall_Flame_Trap, 32);
    fields.get("height").set(UnitType.Special_Right_Wall_Flame_Trap, 32);
    fields.get("seekRange").set(UnitType.Special_Right_Wall_Flame_Trap, 64);
    fields.get("sightRange").set(UnitType.Special_Right_Wall_Flame_Trap, 96);
    fields
        .get("groundWeapon")
        .set(UnitType.Special_Right_Wall_Flame_Trap, WeaponType.Flame_Thrower_Wall_Trap);
    fields.get("maxGroundHits").set(UnitType.Special_Right_Wall_Flame_Trap, 1);
    fields.get("airWeapon").set(UnitType.Special_Right_Wall_Flame_Trap, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
    fields.get("topSpeed").set(UnitType.Special_Right_Wall_Flame_Trap, 0.0);
    fields.get("acceleration").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
    fields.get("haltDistance").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
    fields.get("turnRadius").set(UnitType.Special_Right_Wall_Flame_Trap, 0);
    fields.get("canProduce").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("canAttack").set(UnitType.Special_Right_Wall_Flame_Trap, true);
    fields.get("canMove").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("flyer").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("regeneratesHP").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("spellcaster").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("invincible").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("organic").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("mechanical").set(UnitType.Special_Right_Wall_Flame_Trap, true);
    fields.get("robotic").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("detector").set(UnitType.Special_Right_Wall_Flame_Trap, true);
    fields.get("resourceContainer").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("resourceDepot").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("refinery").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("worker").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("requiresPsi").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("requiresCreep").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("burrowable").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("cloakable").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("building").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("addon").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("flyingBuilding").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("neutral").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("hero").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("powerup").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("beacon").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("flagBeacon").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("specialBuilding").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("spell").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("producesCreep").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("producesLarva").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("mineralField").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("critter").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields.get("canBuildAddon").set(UnitType.Special_Right_Wall_Flame_Trap, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Right_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Special_Right_Wall_Flame_Trap, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Special_Start_Location() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Special_Start_Location, 214);
    fields.get("race").set(UnitType.Special_Start_Location, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Special_Start_Location, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Special_Start_Location, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Special_Start_Location, toMap());
    fields.get("requiredTech").set(UnitType.Special_Start_Location, TechType.None);
    fields.get("cloakingTech").set(UnitType.Special_Start_Location, TechType.None);
    fields.get("abilities").set(UnitType.Special_Start_Location, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Special_Start_Location, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Special_Start_Location, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Special_Start_Location, 800);
    fields.get("maxShields").set(UnitType.Special_Start_Location, 0);
    fields.get("maxEnergy").set(UnitType.Special_Start_Location, 0);
    fields.get("armor").set(UnitType.Special_Start_Location, 0);
    fields.get("mineralPrice").set(UnitType.Special_Start_Location, 0);
    fields.get("gasPrice").set(UnitType.Special_Start_Location, 0);
    fields.get("buildTime").set(UnitType.Special_Start_Location, 0);
    fields.get("supplyRequired").set(UnitType.Special_Start_Location, 0);
    fields.get("supplyProvided").set(UnitType.Special_Start_Location, 0);
    fields.get("spaceRequired").set(UnitType.Special_Start_Location, 255);
    fields.get("spaceProvided").set(UnitType.Special_Start_Location, 0);
    fields.get("buildScore").set(UnitType.Special_Start_Location, 0);
    fields.get("destroyScore").set(UnitType.Special_Start_Location, 0);
    fields.get("size").set(UnitType.Special_Start_Location, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Special_Start_Location, 4);
    fields.get("tileHeight").set(UnitType.Special_Start_Location, 3);
    fields.get("dimensionLeft").set(UnitType.Special_Start_Location, 48);
    fields.get("dimensionUp").set(UnitType.Special_Start_Location, 32);
    fields.get("dimensionRight").set(UnitType.Special_Start_Location, 48);
    fields.get("dimensionDown").set(UnitType.Special_Start_Location, 32);
    fields.get("width").set(UnitType.Special_Start_Location, 97);
    fields.get("height").set(UnitType.Special_Start_Location, 65);
    fields.get("seekRange").set(UnitType.Special_Start_Location, 0);
    fields.get("sightRange").set(UnitType.Special_Start_Location, 32);
    fields.get("groundWeapon").set(UnitType.Special_Start_Location, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Special_Start_Location, 0);
    fields.get("airWeapon").set(UnitType.Special_Start_Location, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Special_Start_Location, 0);
    fields.get("topSpeed").set(UnitType.Special_Start_Location, 0.0);
    fields.get("acceleration").set(UnitType.Special_Start_Location, 0);
    fields.get("haltDistance").set(UnitType.Special_Start_Location, 0);
    fields.get("turnRadius").set(UnitType.Special_Start_Location, 0);
    fields.get("canProduce").set(UnitType.Special_Start_Location, false);
    fields.get("canAttack").set(UnitType.Special_Start_Location, false);
    fields.get("canMove").set(UnitType.Special_Start_Location, false);
    fields.get("flyer").set(UnitType.Special_Start_Location, false);
    fields.get("regeneratesHP").set(UnitType.Special_Start_Location, false);
    fields.get("spellcaster").set(UnitType.Special_Start_Location, false);
    fields.get("hasPermanentCloak").set(UnitType.Special_Start_Location, false);
    fields.get("invincible").set(UnitType.Special_Start_Location, false);
    fields.get("organic").set(UnitType.Special_Start_Location, false);
    fields.get("mechanical").set(UnitType.Special_Start_Location, false);
    fields.get("robotic").set(UnitType.Special_Start_Location, false);
    fields.get("detector").set(UnitType.Special_Start_Location, false);
    fields.get("resourceContainer").set(UnitType.Special_Start_Location, false);
    fields.get("resourceDepot").set(UnitType.Special_Start_Location, true);
    fields.get("refinery").set(UnitType.Special_Start_Location, false);
    fields.get("worker").set(UnitType.Special_Start_Location, false);
    fields.get("requiresPsi").set(UnitType.Special_Start_Location, false);
    fields.get("requiresCreep").set(UnitType.Special_Start_Location, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Special_Start_Location, false);
    fields.get("burrowable").set(UnitType.Special_Start_Location, false);
    fields.get("cloakable").set(UnitType.Special_Start_Location, false);
    fields.get("building").set(UnitType.Special_Start_Location, true);
    fields.get("addon").set(UnitType.Special_Start_Location, false);
    fields.get("flyingBuilding").set(UnitType.Special_Start_Location, false);
    fields.get("neutral").set(UnitType.Special_Start_Location, false);
    fields.get("hero").set(UnitType.Special_Start_Location, false);
    fields.get("powerup").set(UnitType.Special_Start_Location, false);
    fields.get("beacon").set(UnitType.Special_Start_Location, false);
    fields.get("flagBeacon").set(UnitType.Special_Start_Location, false);
    fields.get("specialBuilding").set(UnitType.Special_Start_Location, true);
    fields.get("spell").set(UnitType.Special_Start_Location, false);
    fields.get("producesCreep").set(UnitType.Special_Start_Location, false);
    fields.get("producesLarva").set(UnitType.Special_Start_Location, false);
    fields.get("mineralField").set(UnitType.Special_Start_Location, false);
    fields.get("critter").set(UnitType.Special_Start_Location, false);
    fields.get("canBuildAddon").set(UnitType.Special_Start_Location, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Special_Start_Location, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Special_Start_Location, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Powerup_Flag() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Powerup_Flag, 215);
    fields.get("race").set(UnitType.Powerup_Flag, Race.None);
    fields.get("whatBuilds").set(UnitType.Powerup_Flag, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Powerup_Flag, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Powerup_Flag, toMap());
    fields.get("requiredTech").set(UnitType.Powerup_Flag, TechType.None);
    fields.get("cloakingTech").set(UnitType.Powerup_Flag, TechType.None);
    fields.get("abilities").set(UnitType.Powerup_Flag, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Powerup_Flag, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Powerup_Flag, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Powerup_Flag, 100000);
    fields.get("maxShields").set(UnitType.Powerup_Flag, 0);
    fields.get("maxEnergy").set(UnitType.Powerup_Flag, 0);
    fields.get("armor").set(UnitType.Powerup_Flag, 0);
    fields.get("mineralPrice").set(UnitType.Powerup_Flag, 1);
    fields.get("gasPrice").set(UnitType.Powerup_Flag, 1);
    fields.get("buildTime").set(UnitType.Powerup_Flag, 1);
    fields.get("supplyRequired").set(UnitType.Powerup_Flag, 0);
    fields.get("supplyProvided").set(UnitType.Powerup_Flag, 0);
    fields.get("spaceRequired").set(UnitType.Powerup_Flag, 255);
    fields.get("spaceProvided").set(UnitType.Powerup_Flag, 0);
    fields.get("buildScore").set(UnitType.Powerup_Flag, 0);
    fields.get("destroyScore").set(UnitType.Powerup_Flag, 0);
    fields.get("size").set(UnitType.Powerup_Flag, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Powerup_Flag, 1);
    fields.get("tileHeight").set(UnitType.Powerup_Flag, 1);
    fields.get("dimensionLeft").set(UnitType.Powerup_Flag, 16);
    fields.get("dimensionUp").set(UnitType.Powerup_Flag, 16);
    fields.get("dimensionRight").set(UnitType.Powerup_Flag, 15);
    fields.get("dimensionDown").set(UnitType.Powerup_Flag, 15);
    fields.get("width").set(UnitType.Powerup_Flag, 32);
    fields.get("height").set(UnitType.Powerup_Flag, 32);
    fields.get("seekRange").set(UnitType.Powerup_Flag, 0);
    fields.get("sightRange").set(UnitType.Powerup_Flag, 160);
    fields.get("groundWeapon").set(UnitType.Powerup_Flag, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Powerup_Flag, 0);
    fields.get("airWeapon").set(UnitType.Powerup_Flag, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Powerup_Flag, 0);
    fields.get("topSpeed").set(UnitType.Powerup_Flag, 0.0);
    fields.get("acceleration").set(UnitType.Powerup_Flag, 0);
    fields.get("haltDistance").set(UnitType.Powerup_Flag, 0);
    fields.get("turnRadius").set(UnitType.Powerup_Flag, 0);
    fields.get("canProduce").set(UnitType.Powerup_Flag, false);
    fields.get("canAttack").set(UnitType.Powerup_Flag, false);
    fields.get("canMove").set(UnitType.Powerup_Flag, false);
    fields.get("flyer").set(UnitType.Powerup_Flag, false);
    fields.get("regeneratesHP").set(UnitType.Powerup_Flag, false);
    fields.get("spellcaster").set(UnitType.Powerup_Flag, false);
    fields.get("hasPermanentCloak").set(UnitType.Powerup_Flag, false);
    fields.get("invincible").set(UnitType.Powerup_Flag, true);
    fields.get("organic").set(UnitType.Powerup_Flag, false);
    fields.get("mechanical").set(UnitType.Powerup_Flag, false);
    fields.get("robotic").set(UnitType.Powerup_Flag, false);
    fields.get("detector").set(UnitType.Powerup_Flag, false);
    fields.get("resourceContainer").set(UnitType.Powerup_Flag, false);
    fields.get("resourceDepot").set(UnitType.Powerup_Flag, false);
    fields.get("refinery").set(UnitType.Powerup_Flag, false);
    fields.get("worker").set(UnitType.Powerup_Flag, false);
    fields.get("requiresPsi").set(UnitType.Powerup_Flag, false);
    fields.get("requiresCreep").set(UnitType.Powerup_Flag, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Powerup_Flag, false);
    fields.get("burrowable").set(UnitType.Powerup_Flag, false);
    fields.get("cloakable").set(UnitType.Powerup_Flag, false);
    fields.get("building").set(UnitType.Powerup_Flag, false);
    fields.get("addon").set(UnitType.Powerup_Flag, false);
    fields.get("flyingBuilding").set(UnitType.Powerup_Flag, false);
    fields.get("neutral").set(UnitType.Powerup_Flag, false);
    fields.get("hero").set(UnitType.Powerup_Flag, false);
    fields.get("powerup").set(UnitType.Powerup_Flag, true);
    fields.get("beacon").set(UnitType.Powerup_Flag, false);
    fields.get("flagBeacon").set(UnitType.Powerup_Flag, false);
    fields.get("specialBuilding").set(UnitType.Powerup_Flag, false);
    fields.get("spell").set(UnitType.Powerup_Flag, false);
    fields.get("producesCreep").set(UnitType.Powerup_Flag, false);
    fields.get("producesLarva").set(UnitType.Powerup_Flag, false);
    fields.get("mineralField").set(UnitType.Powerup_Flag, false);
    fields.get("critter").set(UnitType.Powerup_Flag, false);
    fields.get("canBuildAddon").set(UnitType.Powerup_Flag, false);
    fields.get("researchesWhat").set(UnitType.Powerup_Flag, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Powerup_Flag, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Powerup_Young_Chrysalis() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Powerup_Young_Chrysalis, 216);
    fields.get("race").set(UnitType.Powerup_Young_Chrysalis, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Powerup_Young_Chrysalis, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Powerup_Young_Chrysalis, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Powerup_Young_Chrysalis, toMap());
    fields.get("requiredTech").set(UnitType.Powerup_Young_Chrysalis, TechType.None);
    fields.get("cloakingTech").set(UnitType.Powerup_Young_Chrysalis, TechType.None);
    fields.get("abilities").set(UnitType.Powerup_Young_Chrysalis, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Powerup_Young_Chrysalis, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Powerup_Young_Chrysalis, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Powerup_Young_Chrysalis, 800);
    fields.get("maxShields").set(UnitType.Powerup_Young_Chrysalis, 0);
    fields.get("maxEnergy").set(UnitType.Powerup_Young_Chrysalis, 0);
    fields.get("armor").set(UnitType.Powerup_Young_Chrysalis, 0);
    fields.get("mineralPrice").set(UnitType.Powerup_Young_Chrysalis, 1);
    fields.get("gasPrice").set(UnitType.Powerup_Young_Chrysalis, 1);
    fields.get("buildTime").set(UnitType.Powerup_Young_Chrysalis, 1);
    fields.get("supplyRequired").set(UnitType.Powerup_Young_Chrysalis, 0);
    fields.get("supplyProvided").set(UnitType.Powerup_Young_Chrysalis, 0);
    fields.get("spaceRequired").set(UnitType.Powerup_Young_Chrysalis, 255);
    fields.get("spaceProvided").set(UnitType.Powerup_Young_Chrysalis, 0);
    fields.get("buildScore").set(UnitType.Powerup_Young_Chrysalis, 0);
    fields.get("destroyScore").set(UnitType.Powerup_Young_Chrysalis, 0);
    fields.get("size").set(UnitType.Powerup_Young_Chrysalis, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Powerup_Young_Chrysalis, 1);
    fields.get("tileHeight").set(UnitType.Powerup_Young_Chrysalis, 1);
    fields.get("dimensionLeft").set(UnitType.Powerup_Young_Chrysalis, 16);
    fields.get("dimensionUp").set(UnitType.Powerup_Young_Chrysalis, 16);
    fields.get("dimensionRight").set(UnitType.Powerup_Young_Chrysalis, 15);
    fields.get("dimensionDown").set(UnitType.Powerup_Young_Chrysalis, 15);
    fields.get("width").set(UnitType.Powerup_Young_Chrysalis, 32);
    fields.get("height").set(UnitType.Powerup_Young_Chrysalis, 32);
    fields.get("seekRange").set(UnitType.Powerup_Young_Chrysalis, 0);
    fields.get("sightRange").set(UnitType.Powerup_Young_Chrysalis, 160);
    fields.get("groundWeapon").set(UnitType.Powerup_Young_Chrysalis, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Powerup_Young_Chrysalis, 0);
    fields.get("airWeapon").set(UnitType.Powerup_Young_Chrysalis, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Powerup_Young_Chrysalis, 0);
    fields.get("topSpeed").set(UnitType.Powerup_Young_Chrysalis, 0.0);
    fields.get("acceleration").set(UnitType.Powerup_Young_Chrysalis, 0);
    fields.get("haltDistance").set(UnitType.Powerup_Young_Chrysalis, 0);
    fields.get("turnRadius").set(UnitType.Powerup_Young_Chrysalis, 0);
    fields.get("canProduce").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("canAttack").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("canMove").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("flyer").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("regeneratesHP").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("spellcaster").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("hasPermanentCloak").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("invincible").set(UnitType.Powerup_Young_Chrysalis, true);
    fields.get("organic").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("mechanical").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("robotic").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("detector").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("resourceContainer").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("resourceDepot").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("refinery").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("worker").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("requiresPsi").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("requiresCreep").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("burrowable").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("cloakable").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("building").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("addon").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("flyingBuilding").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("neutral").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("hero").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("powerup").set(UnitType.Powerup_Young_Chrysalis, true);
    fields.get("beacon").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("flagBeacon").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("specialBuilding").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("spell").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("producesCreep").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("producesLarva").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("mineralField").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("critter").set(UnitType.Powerup_Young_Chrysalis, false);
    fields.get("canBuildAddon").set(UnitType.Powerup_Young_Chrysalis, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Powerup_Young_Chrysalis, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Powerup_Young_Chrysalis, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Powerup_Psi_Emitter() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Powerup_Psi_Emitter, 217);
    fields.get("race").set(UnitType.Powerup_Psi_Emitter, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Powerup_Psi_Emitter, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Powerup_Psi_Emitter, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Powerup_Psi_Emitter, toMap());
    fields.get("requiredTech").set(UnitType.Powerup_Psi_Emitter, TechType.None);
    fields.get("cloakingTech").set(UnitType.Powerup_Psi_Emitter, TechType.None);
    fields.get("abilities").set(UnitType.Powerup_Psi_Emitter, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Powerup_Psi_Emitter, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Powerup_Psi_Emitter, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Powerup_Psi_Emitter, 800);
    fields.get("maxShields").set(UnitType.Powerup_Psi_Emitter, 0);
    fields.get("maxEnergy").set(UnitType.Powerup_Psi_Emitter, 0);
    fields.get("armor").set(UnitType.Powerup_Psi_Emitter, 0);
    fields.get("mineralPrice").set(UnitType.Powerup_Psi_Emitter, 1);
    fields.get("gasPrice").set(UnitType.Powerup_Psi_Emitter, 1);
    fields.get("buildTime").set(UnitType.Powerup_Psi_Emitter, 1);
    fields.get("supplyRequired").set(UnitType.Powerup_Psi_Emitter, 0);
    fields.get("supplyProvided").set(UnitType.Powerup_Psi_Emitter, 0);
    fields.get("spaceRequired").set(UnitType.Powerup_Psi_Emitter, 255);
    fields.get("spaceProvided").set(UnitType.Powerup_Psi_Emitter, 0);
    fields.get("buildScore").set(UnitType.Powerup_Psi_Emitter, 0);
    fields.get("destroyScore").set(UnitType.Powerup_Psi_Emitter, 0);
    fields.get("size").set(UnitType.Powerup_Psi_Emitter, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Powerup_Psi_Emitter, 1);
    fields.get("tileHeight").set(UnitType.Powerup_Psi_Emitter, 1);
    fields.get("dimensionLeft").set(UnitType.Powerup_Psi_Emitter, 16);
    fields.get("dimensionUp").set(UnitType.Powerup_Psi_Emitter, 16);
    fields.get("dimensionRight").set(UnitType.Powerup_Psi_Emitter, 15);
    fields.get("dimensionDown").set(UnitType.Powerup_Psi_Emitter, 15);
    fields.get("width").set(UnitType.Powerup_Psi_Emitter, 32);
    fields.get("height").set(UnitType.Powerup_Psi_Emitter, 32);
    fields.get("seekRange").set(UnitType.Powerup_Psi_Emitter, 0);
    fields.get("sightRange").set(UnitType.Powerup_Psi_Emitter, 160);
    fields.get("groundWeapon").set(UnitType.Powerup_Psi_Emitter, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Powerup_Psi_Emitter, 0);
    fields.get("airWeapon").set(UnitType.Powerup_Psi_Emitter, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Powerup_Psi_Emitter, 0);
    fields.get("topSpeed").set(UnitType.Powerup_Psi_Emitter, 0.0);
    fields.get("acceleration").set(UnitType.Powerup_Psi_Emitter, 0);
    fields.get("haltDistance").set(UnitType.Powerup_Psi_Emitter, 0);
    fields.get("turnRadius").set(UnitType.Powerup_Psi_Emitter, 0);
    fields.get("canProduce").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("canAttack").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("canMove").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("flyer").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("regeneratesHP").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("spellcaster").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("hasPermanentCloak").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("invincible").set(UnitType.Powerup_Psi_Emitter, true);
    fields.get("organic").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("mechanical").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("robotic").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("detector").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("resourceContainer").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("resourceDepot").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("refinery").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("worker").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("requiresPsi").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("requiresCreep").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("burrowable").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("cloakable").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("building").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("addon").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("flyingBuilding").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("neutral").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("hero").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("powerup").set(UnitType.Powerup_Psi_Emitter, true);
    fields.get("beacon").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("flagBeacon").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("specialBuilding").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("spell").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("producesCreep").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("producesLarva").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("mineralField").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("critter").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("canBuildAddon").set(UnitType.Powerup_Psi_Emitter, false);
    fields.get("researchesWhat").set(UnitType.Powerup_Psi_Emitter, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Powerup_Psi_Emitter, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Powerup_Data_Disk() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Powerup_Data_Disk, 218);
    fields.get("race").set(UnitType.Powerup_Data_Disk, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Powerup_Data_Disk, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.Powerup_Data_Disk, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Powerup_Data_Disk, toMap());
    fields.get("requiredTech").set(UnitType.Powerup_Data_Disk, TechType.None);
    fields.get("cloakingTech").set(UnitType.Powerup_Data_Disk, TechType.None);
    fields.get("abilities").set(UnitType.Powerup_Data_Disk, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Powerup_Data_Disk, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Powerup_Data_Disk, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Powerup_Data_Disk, 800);
    fields.get("maxShields").set(UnitType.Powerup_Data_Disk, 0);
    fields.get("maxEnergy").set(UnitType.Powerup_Data_Disk, 0);
    fields.get("armor").set(UnitType.Powerup_Data_Disk, 0);
    fields.get("mineralPrice").set(UnitType.Powerup_Data_Disk, 1);
    fields.get("gasPrice").set(UnitType.Powerup_Data_Disk, 1);
    fields.get("buildTime").set(UnitType.Powerup_Data_Disk, 1);
    fields.get("supplyRequired").set(UnitType.Powerup_Data_Disk, 0);
    fields.get("supplyProvided").set(UnitType.Powerup_Data_Disk, 0);
    fields.get("spaceRequired").set(UnitType.Powerup_Data_Disk, 255);
    fields.get("spaceProvided").set(UnitType.Powerup_Data_Disk, 0);
    fields.get("buildScore").set(UnitType.Powerup_Data_Disk, 0);
    fields.get("destroyScore").set(UnitType.Powerup_Data_Disk, 0);
    fields.get("size").set(UnitType.Powerup_Data_Disk, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Powerup_Data_Disk, 1);
    fields.get("tileHeight").set(UnitType.Powerup_Data_Disk, 1);
    fields.get("dimensionLeft").set(UnitType.Powerup_Data_Disk, 16);
    fields.get("dimensionUp").set(UnitType.Powerup_Data_Disk, 16);
    fields.get("dimensionRight").set(UnitType.Powerup_Data_Disk, 15);
    fields.get("dimensionDown").set(UnitType.Powerup_Data_Disk, 15);
    fields.get("width").set(UnitType.Powerup_Data_Disk, 32);
    fields.get("height").set(UnitType.Powerup_Data_Disk, 32);
    fields.get("seekRange").set(UnitType.Powerup_Data_Disk, 0);
    fields.get("sightRange").set(UnitType.Powerup_Data_Disk, 160);
    fields.get("groundWeapon").set(UnitType.Powerup_Data_Disk, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Powerup_Data_Disk, 0);
    fields.get("airWeapon").set(UnitType.Powerup_Data_Disk, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Powerup_Data_Disk, 0);
    fields.get("topSpeed").set(UnitType.Powerup_Data_Disk, 0.0);
    fields.get("acceleration").set(UnitType.Powerup_Data_Disk, 0);
    fields.get("haltDistance").set(UnitType.Powerup_Data_Disk, 0);
    fields.get("turnRadius").set(UnitType.Powerup_Data_Disk, 0);
    fields.get("canProduce").set(UnitType.Powerup_Data_Disk, false);
    fields.get("canAttack").set(UnitType.Powerup_Data_Disk, false);
    fields.get("canMove").set(UnitType.Powerup_Data_Disk, false);
    fields.get("flyer").set(UnitType.Powerup_Data_Disk, false);
    fields.get("regeneratesHP").set(UnitType.Powerup_Data_Disk, false);
    fields.get("spellcaster").set(UnitType.Powerup_Data_Disk, false);
    fields.get("hasPermanentCloak").set(UnitType.Powerup_Data_Disk, false);
    fields.get("invincible").set(UnitType.Powerup_Data_Disk, true);
    fields.get("organic").set(UnitType.Powerup_Data_Disk, false);
    fields.get("mechanical").set(UnitType.Powerup_Data_Disk, false);
    fields.get("robotic").set(UnitType.Powerup_Data_Disk, false);
    fields.get("detector").set(UnitType.Powerup_Data_Disk, false);
    fields.get("resourceContainer").set(UnitType.Powerup_Data_Disk, false);
    fields.get("resourceDepot").set(UnitType.Powerup_Data_Disk, false);
    fields.get("refinery").set(UnitType.Powerup_Data_Disk, false);
    fields.get("worker").set(UnitType.Powerup_Data_Disk, false);
    fields.get("requiresPsi").set(UnitType.Powerup_Data_Disk, false);
    fields.get("requiresCreep").set(UnitType.Powerup_Data_Disk, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Powerup_Data_Disk, false);
    fields.get("burrowable").set(UnitType.Powerup_Data_Disk, false);
    fields.get("cloakable").set(UnitType.Powerup_Data_Disk, false);
    fields.get("building").set(UnitType.Powerup_Data_Disk, false);
    fields.get("addon").set(UnitType.Powerup_Data_Disk, false);
    fields.get("flyingBuilding").set(UnitType.Powerup_Data_Disk, false);
    fields.get("neutral").set(UnitType.Powerup_Data_Disk, false);
    fields.get("hero").set(UnitType.Powerup_Data_Disk, false);
    fields.get("powerup").set(UnitType.Powerup_Data_Disk, true);
    fields.get("beacon").set(UnitType.Powerup_Data_Disk, false);
    fields.get("flagBeacon").set(UnitType.Powerup_Data_Disk, false);
    fields.get("specialBuilding").set(UnitType.Powerup_Data_Disk, false);
    fields.get("spell").set(UnitType.Powerup_Data_Disk, false);
    fields.get("producesCreep").set(UnitType.Powerup_Data_Disk, false);
    fields.get("producesLarva").set(UnitType.Powerup_Data_Disk, false);
    fields.get("mineralField").set(UnitType.Powerup_Data_Disk, false);
    fields.get("critter").set(UnitType.Powerup_Data_Disk, false);
    fields.get("canBuildAddon").set(UnitType.Powerup_Data_Disk, false);
    fields.get("researchesWhat").set(UnitType.Powerup_Data_Disk, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Powerup_Data_Disk, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Powerup_Khaydarin_Crystal() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Powerup_Khaydarin_Crystal, 219);
    fields.get("race").set(UnitType.Powerup_Khaydarin_Crystal, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Powerup_Khaydarin_Crystal, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Powerup_Khaydarin_Crystal, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Powerup_Khaydarin_Crystal, toMap());
    fields.get("requiredTech").set(UnitType.Powerup_Khaydarin_Crystal, TechType.None);
    fields.get("cloakingTech").set(UnitType.Powerup_Khaydarin_Crystal, TechType.None);
    fields.get("abilities").set(UnitType.Powerup_Khaydarin_Crystal, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Powerup_Khaydarin_Crystal, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Powerup_Khaydarin_Crystal, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Powerup_Khaydarin_Crystal, 800);
    fields.get("maxShields").set(UnitType.Powerup_Khaydarin_Crystal, 0);
    fields.get("maxEnergy").set(UnitType.Powerup_Khaydarin_Crystal, 0);
    fields.get("armor").set(UnitType.Powerup_Khaydarin_Crystal, 0);
    fields.get("mineralPrice").set(UnitType.Powerup_Khaydarin_Crystal, 1);
    fields.get("gasPrice").set(UnitType.Powerup_Khaydarin_Crystal, 1);
    fields.get("buildTime").set(UnitType.Powerup_Khaydarin_Crystal, 1);
    fields.get("supplyRequired").set(UnitType.Powerup_Khaydarin_Crystal, 0);
    fields.get("supplyProvided").set(UnitType.Powerup_Khaydarin_Crystal, 0);
    fields.get("spaceRequired").set(UnitType.Powerup_Khaydarin_Crystal, 255);
    fields.get("spaceProvided").set(UnitType.Powerup_Khaydarin_Crystal, 0);
    fields.get("buildScore").set(UnitType.Powerup_Khaydarin_Crystal, 0);
    fields.get("destroyScore").set(UnitType.Powerup_Khaydarin_Crystal, 0);
    fields.get("size").set(UnitType.Powerup_Khaydarin_Crystal, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Powerup_Khaydarin_Crystal, 1);
    fields.get("tileHeight").set(UnitType.Powerup_Khaydarin_Crystal, 1);
    fields.get("dimensionLeft").set(UnitType.Powerup_Khaydarin_Crystal, 16);
    fields.get("dimensionUp").set(UnitType.Powerup_Khaydarin_Crystal, 16);
    fields.get("dimensionRight").set(UnitType.Powerup_Khaydarin_Crystal, 15);
    fields.get("dimensionDown").set(UnitType.Powerup_Khaydarin_Crystal, 15);
    fields.get("width").set(UnitType.Powerup_Khaydarin_Crystal, 32);
    fields.get("height").set(UnitType.Powerup_Khaydarin_Crystal, 32);
    fields.get("seekRange").set(UnitType.Powerup_Khaydarin_Crystal, 0);
    fields.get("sightRange").set(UnitType.Powerup_Khaydarin_Crystal, 160);
    fields.get("groundWeapon").set(UnitType.Powerup_Khaydarin_Crystal, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Powerup_Khaydarin_Crystal, 0);
    fields.get("airWeapon").set(UnitType.Powerup_Khaydarin_Crystal, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Powerup_Khaydarin_Crystal, 0);
    fields.get("topSpeed").set(UnitType.Powerup_Khaydarin_Crystal, 0.0);
    fields.get("acceleration").set(UnitType.Powerup_Khaydarin_Crystal, 0);
    fields.get("haltDistance").set(UnitType.Powerup_Khaydarin_Crystal, 0);
    fields.get("turnRadius").set(UnitType.Powerup_Khaydarin_Crystal, 0);
    fields.get("canProduce").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("canAttack").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("canMove").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("flyer").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("regeneratesHP").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("spellcaster").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("hasPermanentCloak").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("invincible").set(UnitType.Powerup_Khaydarin_Crystal, true);
    fields.get("organic").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("mechanical").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("robotic").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("detector").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("resourceContainer").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("resourceDepot").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("refinery").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("worker").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("requiresPsi").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("requiresCreep").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("burrowable").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("cloakable").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("building").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("addon").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("flyingBuilding").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("neutral").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("hero").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("powerup").set(UnitType.Powerup_Khaydarin_Crystal, true);
    fields.get("beacon").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("flagBeacon").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("specialBuilding").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("spell").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("producesCreep").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("producesLarva").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("mineralField").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("critter").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields.get("canBuildAddon").set(UnitType.Powerup_Khaydarin_Crystal, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Powerup_Khaydarin_Crystal, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Powerup_Khaydarin_Crystal, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Powerup_Mineral_Cluster_Type_1() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Powerup_Mineral_Cluster_Type_1, 220);
    fields.get("race").set(UnitType.Powerup_Mineral_Cluster_Type_1, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Powerup_Mineral_Cluster_Type_1, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Powerup_Mineral_Cluster_Type_1, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Powerup_Mineral_Cluster_Type_1, toMap());
    fields.get("requiredTech").set(UnitType.Powerup_Mineral_Cluster_Type_1, TechType.None);
    fields.get("cloakingTech").set(UnitType.Powerup_Mineral_Cluster_Type_1, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Powerup_Mineral_Cluster_Type_1, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Powerup_Mineral_Cluster_Type_1, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Powerup_Mineral_Cluster_Type_1, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Powerup_Mineral_Cluster_Type_1, 800);
    fields.get("maxShields").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
    fields.get("maxEnergy").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
    fields.get("armor").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
    fields.get("mineralPrice").set(UnitType.Powerup_Mineral_Cluster_Type_1, 1);
    fields.get("gasPrice").set(UnitType.Powerup_Mineral_Cluster_Type_1, 1);
    fields.get("buildTime").set(UnitType.Powerup_Mineral_Cluster_Type_1, 1);
    fields.get("supplyRequired").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
    fields.get("supplyProvided").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
    fields.get("spaceRequired").set(UnitType.Powerup_Mineral_Cluster_Type_1, 255);
    fields.get("spaceProvided").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
    fields.get("buildScore").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
    fields.get("destroyScore").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
    fields.get("size").set(UnitType.Powerup_Mineral_Cluster_Type_1, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Powerup_Mineral_Cluster_Type_1, 1);
    fields.get("tileHeight").set(UnitType.Powerup_Mineral_Cluster_Type_1, 1);
    fields.get("dimensionLeft").set(UnitType.Powerup_Mineral_Cluster_Type_1, 16);
    fields.get("dimensionUp").set(UnitType.Powerup_Mineral_Cluster_Type_1, 16);
    fields.get("dimensionRight").set(UnitType.Powerup_Mineral_Cluster_Type_1, 15);
    fields.get("dimensionDown").set(UnitType.Powerup_Mineral_Cluster_Type_1, 15);
    fields.get("width").set(UnitType.Powerup_Mineral_Cluster_Type_1, 32);
    fields.get("height").set(UnitType.Powerup_Mineral_Cluster_Type_1, 32);
    fields.get("seekRange").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
    fields.get("sightRange").set(UnitType.Powerup_Mineral_Cluster_Type_1, 160);
    fields.get("groundWeapon").set(UnitType.Powerup_Mineral_Cluster_Type_1, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
    fields.get("airWeapon").set(UnitType.Powerup_Mineral_Cluster_Type_1, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
    fields.get("topSpeed").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0.0);
    fields.get("acceleration").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
    fields.get("haltDistance").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
    fields.get("turnRadius").set(UnitType.Powerup_Mineral_Cluster_Type_1, 0);
    fields.get("canProduce").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("canAttack").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("canMove").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("flyer").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("regeneratesHP").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("spellcaster").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("hasPermanentCloak").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("invincible").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("organic").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("mechanical").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("robotic").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("detector").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("resourceContainer").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("resourceDepot").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("refinery").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("worker").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("requiresPsi").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("requiresCreep").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("burrowable").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("cloakable").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("building").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("addon").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("flyingBuilding").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("neutral").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("hero").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("powerup").set(UnitType.Powerup_Mineral_Cluster_Type_1, true);
    fields.get("beacon").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("flagBeacon").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("specialBuilding").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("spell").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("producesCreep").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("producesLarva").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("mineralField").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("critter").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields.get("canBuildAddon").set(UnitType.Powerup_Mineral_Cluster_Type_1, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Powerup_Mineral_Cluster_Type_1, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Powerup_Mineral_Cluster_Type_1, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Powerup_Mineral_Cluster_Type_2() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Powerup_Mineral_Cluster_Type_2, 221);
    fields.get("race").set(UnitType.Powerup_Mineral_Cluster_Type_2, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Powerup_Mineral_Cluster_Type_2, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Powerup_Mineral_Cluster_Type_2, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Powerup_Mineral_Cluster_Type_2, toMap());
    fields.get("requiredTech").set(UnitType.Powerup_Mineral_Cluster_Type_2, TechType.None);
    fields.get("cloakingTech").set(UnitType.Powerup_Mineral_Cluster_Type_2, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Powerup_Mineral_Cluster_Type_2, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Powerup_Mineral_Cluster_Type_2, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Powerup_Mineral_Cluster_Type_2, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Powerup_Mineral_Cluster_Type_2, 800);
    fields.get("maxShields").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
    fields.get("maxEnergy").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
    fields.get("armor").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
    fields.get("mineralPrice").set(UnitType.Powerup_Mineral_Cluster_Type_2, 1);
    fields.get("gasPrice").set(UnitType.Powerup_Mineral_Cluster_Type_2, 1);
    fields.get("buildTime").set(UnitType.Powerup_Mineral_Cluster_Type_2, 1);
    fields.get("supplyRequired").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
    fields.get("supplyProvided").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
    fields.get("spaceRequired").set(UnitType.Powerup_Mineral_Cluster_Type_2, 255);
    fields.get("spaceProvided").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
    fields.get("buildScore").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
    fields.get("destroyScore").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
    fields.get("size").set(UnitType.Powerup_Mineral_Cluster_Type_2, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Powerup_Mineral_Cluster_Type_2, 1);
    fields.get("tileHeight").set(UnitType.Powerup_Mineral_Cluster_Type_2, 1);
    fields.get("dimensionLeft").set(UnitType.Powerup_Mineral_Cluster_Type_2, 16);
    fields.get("dimensionUp").set(UnitType.Powerup_Mineral_Cluster_Type_2, 16);
    fields.get("dimensionRight").set(UnitType.Powerup_Mineral_Cluster_Type_2, 15);
    fields.get("dimensionDown").set(UnitType.Powerup_Mineral_Cluster_Type_2, 15);
    fields.get("width").set(UnitType.Powerup_Mineral_Cluster_Type_2, 32);
    fields.get("height").set(UnitType.Powerup_Mineral_Cluster_Type_2, 32);
    fields.get("seekRange").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
    fields.get("sightRange").set(UnitType.Powerup_Mineral_Cluster_Type_2, 160);
    fields.get("groundWeapon").set(UnitType.Powerup_Mineral_Cluster_Type_2, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
    fields.get("airWeapon").set(UnitType.Powerup_Mineral_Cluster_Type_2, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
    fields.get("topSpeed").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0.0);
    fields.get("acceleration").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
    fields.get("haltDistance").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
    fields.get("turnRadius").set(UnitType.Powerup_Mineral_Cluster_Type_2, 0);
    fields.get("canProduce").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("canAttack").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("canMove").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("flyer").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("regeneratesHP").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("spellcaster").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("hasPermanentCloak").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("invincible").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("organic").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("mechanical").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("robotic").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("detector").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("resourceContainer").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("resourceDepot").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("refinery").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("worker").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("requiresPsi").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("requiresCreep").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("burrowable").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("cloakable").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("building").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("addon").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("flyingBuilding").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("neutral").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("hero").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("powerup").set(UnitType.Powerup_Mineral_Cluster_Type_2, true);
    fields.get("beacon").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("flagBeacon").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("specialBuilding").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("spell").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("producesCreep").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("producesLarva").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("mineralField").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("critter").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields.get("canBuildAddon").set(UnitType.Powerup_Mineral_Cluster_Type_2, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Powerup_Mineral_Cluster_Type_2, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Powerup_Mineral_Cluster_Type_2, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Powerup_Protoss_Gas_Orb_Type_1() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 222);
    fields.get("race").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, toMap());
    fields.get("requiredTech").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, TechType.None);
    fields.get("cloakingTech").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 800);
    fields.get("maxShields").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
    fields.get("maxEnergy").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
    fields.get("armor").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
    fields.get("mineralPrice").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 1);
    fields.get("gasPrice").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 1);
    fields.get("buildTime").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 1);
    fields.get("supplyRequired").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
    fields.get("supplyProvided").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
    fields.get("spaceRequired").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 255);
    fields.get("spaceProvided").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
    fields.get("buildScore").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
    fields.get("destroyScore").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
    fields.get("size").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 1);
    fields.get("tileHeight").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 1);
    fields.get("dimensionLeft").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 16);
    fields.get("dimensionUp").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 16);
    fields.get("dimensionRight").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 15);
    fields.get("dimensionDown").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 15);
    fields.get("width").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 32);
    fields.get("height").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 32);
    fields.get("seekRange").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
    fields.get("sightRange").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 160);
    fields.get("groundWeapon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
    fields.get("airWeapon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
    fields.get("topSpeed").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0.0);
    fields.get("acceleration").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
    fields.get("haltDistance").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
    fields.get("turnRadius").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, 0);
    fields.get("canProduce").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("canAttack").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("canMove").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("flyer").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("regeneratesHP").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("spellcaster").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("hasPermanentCloak").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("invincible").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("organic").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("mechanical").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("robotic").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("detector").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("resourceContainer").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("resourceDepot").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("refinery").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("worker").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("requiresPsi").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("requiresCreep").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("burrowable").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("cloakable").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("building").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("addon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("flyingBuilding").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("neutral").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("hero").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("powerup").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, true);
    fields.get("beacon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("flagBeacon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("specialBuilding").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("spell").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("producesCreep").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("producesLarva").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("mineralField").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("critter").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields.get("canBuildAddon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Powerup_Protoss_Gas_Orb_Type_1, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Powerup_Protoss_Gas_Orb_Type_2() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 223);
    fields.get("race").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, toMap());
    fields.get("requiredTech").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, TechType.None);
    fields.get("cloakingTech").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 800);
    fields.get("maxShields").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
    fields.get("maxEnergy").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
    fields.get("armor").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
    fields.get("mineralPrice").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 1);
    fields.get("gasPrice").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 1);
    fields.get("buildTime").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 1);
    fields.get("supplyRequired").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
    fields.get("supplyProvided").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
    fields.get("spaceRequired").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 255);
    fields.get("spaceProvided").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
    fields.get("buildScore").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
    fields.get("destroyScore").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
    fields.get("size").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 1);
    fields.get("tileHeight").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 1);
    fields.get("dimensionLeft").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 16);
    fields.get("dimensionUp").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 16);
    fields.get("dimensionRight").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 15);
    fields.get("dimensionDown").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 15);
    fields.get("width").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 32);
    fields.get("height").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 32);
    fields.get("seekRange").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
    fields.get("sightRange").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 160);
    fields.get("groundWeapon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
    fields.get("airWeapon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
    fields.get("topSpeed").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0.0);
    fields.get("acceleration").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
    fields.get("haltDistance").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
    fields.get("turnRadius").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, 0);
    fields.get("canProduce").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("canAttack").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("canMove").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("flyer").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("regeneratesHP").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("spellcaster").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("hasPermanentCloak").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("invincible").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("organic").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("mechanical").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("robotic").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("detector").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("resourceContainer").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("resourceDepot").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("refinery").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("worker").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("requiresPsi").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("requiresCreep").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("burrowable").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("cloakable").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("building").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("addon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("flyingBuilding").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("neutral").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("hero").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("powerup").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, true);
    fields.get("beacon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("flagBeacon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("specialBuilding").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("spell").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("producesCreep").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("producesLarva").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("mineralField").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("critter").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields.get("canBuildAddon").set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Powerup_Protoss_Gas_Orb_Type_2, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Powerup_Zerg_Gas_Sac_Type_1() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 224);
    fields.get("race").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, toMap());
    fields.get("requiredTech").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, TechType.None);
    fields.get("cloakingTech").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 800);
    fields.get("maxShields").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
    fields.get("maxEnergy").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
    fields.get("armor").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
    fields.get("mineralPrice").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 1);
    fields.get("gasPrice").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 1);
    fields.get("buildTime").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 1);
    fields.get("supplyRequired").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
    fields.get("supplyProvided").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
    fields.get("spaceRequired").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 255);
    fields.get("spaceProvided").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
    fields.get("buildScore").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
    fields.get("destroyScore").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
    fields.get("size").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 1);
    fields.get("tileHeight").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 1);
    fields.get("dimensionLeft").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 16);
    fields.get("dimensionUp").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 16);
    fields.get("dimensionRight").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 15);
    fields.get("dimensionDown").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 15);
    fields.get("width").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 32);
    fields.get("height").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 32);
    fields.get("seekRange").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
    fields.get("sightRange").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 160);
    fields.get("groundWeapon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
    fields.get("airWeapon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
    fields.get("topSpeed").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0.0);
    fields.get("acceleration").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
    fields.get("haltDistance").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
    fields.get("turnRadius").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, 0);
    fields.get("canProduce").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("canAttack").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("canMove").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("flyer").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("regeneratesHP").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("spellcaster").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("hasPermanentCloak").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("invincible").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("organic").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("mechanical").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("robotic").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("detector").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("resourceContainer").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("resourceDepot").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("refinery").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("worker").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("requiresPsi").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("requiresCreep").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("burrowable").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("cloakable").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("building").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("addon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("flyingBuilding").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("neutral").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("hero").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("powerup").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, true);
    fields.get("beacon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("flagBeacon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("specialBuilding").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("spell").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("producesCreep").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("producesLarva").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("mineralField").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("critter").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields.get("canBuildAddon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Powerup_Zerg_Gas_Sac_Type_1, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Powerup_Zerg_Gas_Sac_Type_2() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 225);
    fields.get("race").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, toMap());
    fields.get("requiredTech").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, TechType.None);
    fields.get("cloakingTech").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 800);
    fields.get("maxShields").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
    fields.get("maxEnergy").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
    fields.get("armor").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
    fields.get("mineralPrice").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 1);
    fields.get("gasPrice").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 1);
    fields.get("buildTime").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 1);
    fields.get("supplyRequired").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
    fields.get("supplyProvided").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
    fields.get("spaceRequired").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 255);
    fields.get("spaceProvided").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
    fields.get("buildScore").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
    fields.get("destroyScore").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
    fields.get("size").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 1);
    fields.get("tileHeight").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 1);
    fields.get("dimensionLeft").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 16);
    fields.get("dimensionUp").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 16);
    fields.get("dimensionRight").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 15);
    fields.get("dimensionDown").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 15);
    fields.get("width").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 32);
    fields.get("height").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 32);
    fields.get("seekRange").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
    fields.get("sightRange").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 160);
    fields.get("groundWeapon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
    fields.get("airWeapon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
    fields.get("topSpeed").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0.0);
    fields.get("acceleration").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
    fields.get("haltDistance").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
    fields.get("turnRadius").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, 0);
    fields.get("canProduce").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("canAttack").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("canMove").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("flyer").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("regeneratesHP").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("spellcaster").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("hasPermanentCloak").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("invincible").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("organic").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("mechanical").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("robotic").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("detector").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("resourceContainer").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("resourceDepot").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("refinery").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("worker").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("requiresPsi").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("requiresCreep").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("burrowable").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("cloakable").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("building").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("addon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("flyingBuilding").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("neutral").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("hero").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("powerup").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, true);
    fields.get("beacon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("flagBeacon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("specialBuilding").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("spell").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("producesCreep").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("producesLarva").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("mineralField").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("critter").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields.get("canBuildAddon").set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Powerup_Zerg_Gas_Sac_Type_2, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Powerup_Terran_Gas_Tank_Type_1() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 226);
    fields.get("race").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Powerup_Terran_Gas_Tank_Type_1, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Powerup_Terran_Gas_Tank_Type_1, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, toMap());
    fields.get("requiredTech").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, TechType.None);
    fields.get("cloakingTech").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Powerup_Terran_Gas_Tank_Type_1, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Powerup_Terran_Gas_Tank_Type_1, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 800);
    fields.get("maxShields").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
    fields.get("maxEnergy").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
    fields.get("armor").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
    fields.get("mineralPrice").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 1);
    fields.get("gasPrice").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 1);
    fields.get("buildTime").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 1);
    fields.get("supplyRequired").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
    fields.get("supplyProvided").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
    fields.get("spaceRequired").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 255);
    fields.get("spaceProvided").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
    fields.get("buildScore").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
    fields.get("destroyScore").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
    fields.get("size").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 1);
    fields.get("tileHeight").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 1);
    fields.get("dimensionLeft").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 16);
    fields.get("dimensionUp").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 16);
    fields.get("dimensionRight").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 15);
    fields.get("dimensionDown").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 15);
    fields.get("width").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 32);
    fields.get("height").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 32);
    fields.get("seekRange").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
    fields.get("sightRange").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 160);
    fields.get("groundWeapon").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
    fields.get("airWeapon").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
    fields.get("topSpeed").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0.0);
    fields.get("acceleration").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
    fields.get("haltDistance").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
    fields.get("turnRadius").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, 0);
    fields.get("canProduce").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("canAttack").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("canMove").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("flyer").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("regeneratesHP").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("spellcaster").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("hasPermanentCloak").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("invincible").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("organic").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("mechanical").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("robotic").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("detector").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("resourceContainer").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("resourceDepot").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("refinery").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("worker").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("requiresPsi").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("requiresCreep").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("burrowable").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("cloakable").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("building").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("addon").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("flyingBuilding").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("neutral").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("hero").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("powerup").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, true);
    fields.get("beacon").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("flagBeacon").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("specialBuilding").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("spell").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("producesCreep").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("producesLarva").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("mineralField").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("critter").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields.get("canBuildAddon").set(UnitType.Powerup_Terran_Gas_Tank_Type_1, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Powerup_Terran_Gas_Tank_Type_1, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Powerup_Terran_Gas_Tank_Type_1, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Powerup_Terran_Gas_Tank_Type_2() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 227);
    fields.get("race").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, Race.None);
    fields
        .get("whatBuilds")
        .set(UnitType.Powerup_Terran_Gas_Tank_Type_2, new UnitType.WhatBuilds(UnitType.None, 0));
    fields
        .get("buildsWhat")
        .set(UnitType.Powerup_Terran_Gas_Tank_Type_2, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, toMap());
    fields.get("requiredTech").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, TechType.None);
    fields.get("cloakingTech").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, TechType.None);
    fields
        .get("abilities")
        .set(UnitType.Powerup_Terran_Gas_Tank_Type_2, new ArrayList(Arrays.asList()));
    fields
        .get("upgrades")
        .set(UnitType.Powerup_Terran_Gas_Tank_Type_2, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, UpgradeType.Upgrade_60);
    fields.get("maxHitPoints").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 800);
    fields.get("maxShields").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
    fields.get("maxEnergy").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
    fields.get("armor").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
    fields.get("mineralPrice").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 1);
    fields.get("gasPrice").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 1);
    fields.get("buildTime").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 1);
    fields.get("supplyRequired").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
    fields.get("supplyProvided").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
    fields.get("spaceRequired").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 255);
    fields.get("spaceProvided").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
    fields.get("buildScore").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
    fields.get("destroyScore").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
    fields.get("size").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, UnitSizeType.Independent);
    fields.get("tileWidth").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 1);
    fields.get("tileHeight").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 1);
    fields.get("dimensionLeft").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 16);
    fields.get("dimensionUp").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 16);
    fields.get("dimensionRight").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 15);
    fields.get("dimensionDown").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 15);
    fields.get("width").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 32);
    fields.get("height").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 32);
    fields.get("seekRange").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
    fields.get("sightRange").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 160);
    fields.get("groundWeapon").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
    fields.get("airWeapon").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
    fields.get("topSpeed").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0.0);
    fields.get("acceleration").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
    fields.get("haltDistance").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
    fields.get("turnRadius").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, 0);
    fields.get("canProduce").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("canAttack").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("canMove").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("flyer").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("regeneratesHP").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("spellcaster").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("hasPermanentCloak").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("invincible").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("organic").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("mechanical").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("robotic").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("detector").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("resourceContainer").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("resourceDepot").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("refinery").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("worker").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("requiresPsi").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("requiresCreep").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("burrowable").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("cloakable").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("building").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("addon").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("flyingBuilding").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("neutral").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("hero").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("powerup").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, true);
    fields.get("beacon").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("flagBeacon").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("specialBuilding").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("spell").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("producesCreep").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("producesLarva").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("mineralField").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("critter").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields.get("canBuildAddon").set(UnitType.Powerup_Terran_Gas_Tank_Type_2, false);
    fields
        .get("researchesWhat")
        .set(UnitType.Powerup_Terran_Gas_Tank_Type_2, new ArrayList(Arrays.asList()));
    fields
        .get("upgradesWhat")
        .set(UnitType.Powerup_Terran_Gas_Tank_Type_2, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_None() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.None, 228);
    fields.get("race").set(UnitType.None, Race.None);
    fields.get("whatBuilds").set(UnitType.None, new UnitType.WhatBuilds(UnitType.None, 0));
    fields.get("buildsWhat").set(UnitType.None, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.None, toMap());
    fields.get("requiredTech").set(UnitType.None, TechType.None);
    fields.get("cloakingTech").set(UnitType.None, TechType.None);
    fields.get("abilities").set(UnitType.None, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.None, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.None, UpgradeType.None);
    fields.get("maxHitPoints").set(UnitType.None, 0);
    fields.get("maxShields").set(UnitType.None, 0);
    fields.get("maxEnergy").set(UnitType.None, 0);
    fields.get("armor").set(UnitType.None, 0);
    fields.get("mineralPrice").set(UnitType.None, 0);
    fields.get("gasPrice").set(UnitType.None, 0);
    fields.get("buildTime").set(UnitType.None, 0);
    fields.get("supplyRequired").set(UnitType.None, 0);
    fields.get("supplyProvided").set(UnitType.None, 0);
    fields.get("spaceRequired").set(UnitType.None, 0);
    fields.get("spaceProvided").set(UnitType.None, 0);
    fields.get("buildScore").set(UnitType.None, 0);
    fields.get("destroyScore").set(UnitType.None, 0);
    fields.get("size").set(UnitType.None, UnitSizeType.None);
    fields.get("tileWidth").set(UnitType.None, 0);
    fields.get("tileHeight").set(UnitType.None, 0);
    fields.get("dimensionLeft").set(UnitType.None, 0);
    fields.get("dimensionUp").set(UnitType.None, 0);
    fields.get("dimensionRight").set(UnitType.None, 0);
    fields.get("dimensionDown").set(UnitType.None, 0);
    fields.get("width").set(UnitType.None, 1);
    fields.get("height").set(UnitType.None, 1);
    fields.get("seekRange").set(UnitType.None, 0);
    fields.get("sightRange").set(UnitType.None, 0);
    fields.get("groundWeapon").set(UnitType.None, WeaponType.None);
    fields.get("maxGroundHits").set(UnitType.None, 0);
    fields.get("airWeapon").set(UnitType.None, WeaponType.None);
    fields.get("maxAirHits").set(UnitType.None, 0);
    fields.get("topSpeed").set(UnitType.None, 0.0);
    fields.get("acceleration").set(UnitType.None, 0);
    fields.get("haltDistance").set(UnitType.None, 0);
    fields.get("turnRadius").set(UnitType.None, 0);
    fields.get("canProduce").set(UnitType.None, false);
    fields.get("canAttack").set(UnitType.None, false);
    fields.get("canMove").set(UnitType.None, false);
    fields.get("flyer").set(UnitType.None, false);
    fields.get("regeneratesHP").set(UnitType.None, false);
    fields.get("spellcaster").set(UnitType.None, false);
    fields.get("hasPermanentCloak").set(UnitType.None, false);
    fields.get("invincible").set(UnitType.None, false);
    fields.get("organic").set(UnitType.None, false);
    fields.get("mechanical").set(UnitType.None, false);
    fields.get("robotic").set(UnitType.None, false);
    fields.get("detector").set(UnitType.None, false);
    fields.get("resourceContainer").set(UnitType.None, false);
    fields.get("resourceDepot").set(UnitType.None, false);
    fields.get("refinery").set(UnitType.None, false);
    fields.get("worker").set(UnitType.None, false);
    fields.get("requiresPsi").set(UnitType.None, false);
    fields.get("requiresCreep").set(UnitType.None, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.None, false);
    fields.get("burrowable").set(UnitType.None, false);
    fields.get("cloakable").set(UnitType.None, false);
    fields.get("building").set(UnitType.None, false);
    fields.get("addon").set(UnitType.None, false);
    fields.get("flyingBuilding").set(UnitType.None, false);
    fields.get("neutral").set(UnitType.None, false);
    fields.get("hero").set(UnitType.None, false);
    fields.get("powerup").set(UnitType.None, false);
    fields.get("beacon").set(UnitType.None, false);
    fields.get("flagBeacon").set(UnitType.None, false);
    fields.get("specialBuilding").set(UnitType.None, false);
    fields.get("spell").set(UnitType.None, false);
    fields.get("producesCreep").set(UnitType.None, false);
    fields.get("producesLarva").set(UnitType.None, false);
    fields.get("mineralField").set(UnitType.None, false);
    fields.get("critter").set(UnitType.None, false);
    fields.get("canBuildAddon").set(UnitType.None, false);
    fields.get("researchesWhat").set(UnitType.None, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.None, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_AllUnits() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.AllUnits, 229);
    fields.get("race").set(UnitType.AllUnits, null);
    fields.get("whatBuilds").set(UnitType.AllUnits, null);
    fields.get("buildsWhat").set(UnitType.AllUnits, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.AllUnits, toMap());
    fields.get("requiredTech").set(UnitType.AllUnits, null);
    fields.get("cloakingTech").set(UnitType.AllUnits, null);
    fields.get("abilities").set(UnitType.AllUnits, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.AllUnits, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.AllUnits, null);
    fields.get("maxHitPoints").set(UnitType.AllUnits, 0);
    fields.get("maxShields").set(UnitType.AllUnits, 0);
    fields.get("maxEnergy").set(UnitType.AllUnits, 0);
    fields.get("armor").set(UnitType.AllUnits, 0);
    fields.get("mineralPrice").set(UnitType.AllUnits, 0);
    fields.get("gasPrice").set(UnitType.AllUnits, 0);
    fields.get("buildTime").set(UnitType.AllUnits, 0);
    fields.get("supplyRequired").set(UnitType.AllUnits, 0);
    fields.get("supplyProvided").set(UnitType.AllUnits, 0);
    fields.get("spaceRequired").set(UnitType.AllUnits, 0);
    fields.get("spaceProvided").set(UnitType.AllUnits, 0);
    fields.get("buildScore").set(UnitType.AllUnits, 0);
    fields.get("destroyScore").set(UnitType.AllUnits, 0);
    fields.get("size").set(UnitType.AllUnits, null);
    fields.get("tileWidth").set(UnitType.AllUnits, 0);
    fields.get("tileHeight").set(UnitType.AllUnits, 0);
    fields.get("dimensionLeft").set(UnitType.AllUnits, 0);
    fields.get("dimensionUp").set(UnitType.AllUnits, 0);
    fields.get("dimensionRight").set(UnitType.AllUnits, 0);
    fields.get("dimensionDown").set(UnitType.AllUnits, 0);
    fields.get("width").set(UnitType.AllUnits, 0);
    fields.get("height").set(UnitType.AllUnits, 0);
    fields.get("seekRange").set(UnitType.AllUnits, 0);
    fields.get("sightRange").set(UnitType.AllUnits, 0);
    fields.get("groundWeapon").set(UnitType.AllUnits, null);
    fields.get("maxGroundHits").set(UnitType.AllUnits, 0);
    fields.get("airWeapon").set(UnitType.AllUnits, null);
    fields.get("maxAirHits").set(UnitType.AllUnits, 0);
    fields.get("topSpeed").set(UnitType.AllUnits, 0.0);
    fields.get("acceleration").set(UnitType.AllUnits, 0);
    fields.get("haltDistance").set(UnitType.AllUnits, 0);
    fields.get("turnRadius").set(UnitType.AllUnits, 0);
    fields.get("canProduce").set(UnitType.AllUnits, false);
    fields.get("canAttack").set(UnitType.AllUnits, false);
    fields.get("canMove").set(UnitType.AllUnits, false);
    fields.get("flyer").set(UnitType.AllUnits, false);
    fields.get("regeneratesHP").set(UnitType.AllUnits, false);
    fields.get("spellcaster").set(UnitType.AllUnits, false);
    fields.get("hasPermanentCloak").set(UnitType.AllUnits, false);
    fields.get("invincible").set(UnitType.AllUnits, false);
    fields.get("organic").set(UnitType.AllUnits, false);
    fields.get("mechanical").set(UnitType.AllUnits, false);
    fields.get("robotic").set(UnitType.AllUnits, false);
    fields.get("detector").set(UnitType.AllUnits, false);
    fields.get("resourceContainer").set(UnitType.AllUnits, false);
    fields.get("resourceDepot").set(UnitType.AllUnits, false);
    fields.get("refinery").set(UnitType.AllUnits, false);
    fields.get("worker").set(UnitType.AllUnits, false);
    fields.get("requiresPsi").set(UnitType.AllUnits, false);
    fields.get("requiresCreep").set(UnitType.AllUnits, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.AllUnits, false);
    fields.get("burrowable").set(UnitType.AllUnits, false);
    fields.get("cloakable").set(UnitType.AllUnits, false);
    fields.get("building").set(UnitType.AllUnits, false);
    fields.get("addon").set(UnitType.AllUnits, false);
    fields.get("flyingBuilding").set(UnitType.AllUnits, false);
    fields.get("neutral").set(UnitType.AllUnits, false);
    fields.get("hero").set(UnitType.AllUnits, false);
    fields.get("powerup").set(UnitType.AllUnits, false);
    fields.get("beacon").set(UnitType.AllUnits, false);
    fields.get("flagBeacon").set(UnitType.AllUnits, false);
    fields.get("specialBuilding").set(UnitType.AllUnits, false);
    fields.get("spell").set(UnitType.AllUnits, false);
    fields.get("producesCreep").set(UnitType.AllUnits, false);
    fields.get("producesLarva").set(UnitType.AllUnits, false);
    fields.get("mineralField").set(UnitType.AllUnits, false);
    fields.get("critter").set(UnitType.AllUnits, false);
    fields.get("canBuildAddon").set(UnitType.AllUnits, false);
    fields.get("researchesWhat").set(UnitType.AllUnits, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.AllUnits, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Men() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Men, 230);
    fields.get("race").set(UnitType.Men, null);
    fields.get("whatBuilds").set(UnitType.Men, null);
    fields.get("buildsWhat").set(UnitType.Men, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Men, toMap());
    fields.get("requiredTech").set(UnitType.Men, null);
    fields.get("cloakingTech").set(UnitType.Men, null);
    fields.get("abilities").set(UnitType.Men, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Men, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Men, null);
    fields.get("maxHitPoints").set(UnitType.Men, 0);
    fields.get("maxShields").set(UnitType.Men, 0);
    fields.get("maxEnergy").set(UnitType.Men, 0);
    fields.get("armor").set(UnitType.Men, 0);
    fields.get("mineralPrice").set(UnitType.Men, 0);
    fields.get("gasPrice").set(UnitType.Men, 0);
    fields.get("buildTime").set(UnitType.Men, 0);
    fields.get("supplyRequired").set(UnitType.Men, 0);
    fields.get("supplyProvided").set(UnitType.Men, 0);
    fields.get("spaceRequired").set(UnitType.Men, 0);
    fields.get("spaceProvided").set(UnitType.Men, 0);
    fields.get("buildScore").set(UnitType.Men, 0);
    fields.get("destroyScore").set(UnitType.Men, 0);
    fields.get("size").set(UnitType.Men, null);
    fields.get("tileWidth").set(UnitType.Men, 0);
    fields.get("tileHeight").set(UnitType.Men, 0);
    fields.get("dimensionLeft").set(UnitType.Men, 0);
    fields.get("dimensionUp").set(UnitType.Men, 0);
    fields.get("dimensionRight").set(UnitType.Men, 0);
    fields.get("dimensionDown").set(UnitType.Men, 0);
    fields.get("width").set(UnitType.Men, 0);
    fields.get("height").set(UnitType.Men, 0);
    fields.get("seekRange").set(UnitType.Men, 0);
    fields.get("sightRange").set(UnitType.Men, 0);
    fields.get("groundWeapon").set(UnitType.Men, null);
    fields.get("maxGroundHits").set(UnitType.Men, 0);
    fields.get("airWeapon").set(UnitType.Men, null);
    fields.get("maxAirHits").set(UnitType.Men, 0);
    fields.get("topSpeed").set(UnitType.Men, 0.0);
    fields.get("acceleration").set(UnitType.Men, 0);
    fields.get("haltDistance").set(UnitType.Men, 0);
    fields.get("turnRadius").set(UnitType.Men, 0);
    fields.get("canProduce").set(UnitType.Men, false);
    fields.get("canAttack").set(UnitType.Men, false);
    fields.get("canMove").set(UnitType.Men, false);
    fields.get("flyer").set(UnitType.Men, false);
    fields.get("regeneratesHP").set(UnitType.Men, false);
    fields.get("spellcaster").set(UnitType.Men, false);
    fields.get("hasPermanentCloak").set(UnitType.Men, false);
    fields.get("invincible").set(UnitType.Men, false);
    fields.get("organic").set(UnitType.Men, false);
    fields.get("mechanical").set(UnitType.Men, false);
    fields.get("robotic").set(UnitType.Men, false);
    fields.get("detector").set(UnitType.Men, false);
    fields.get("resourceContainer").set(UnitType.Men, false);
    fields.get("resourceDepot").set(UnitType.Men, false);
    fields.get("refinery").set(UnitType.Men, false);
    fields.get("worker").set(UnitType.Men, false);
    fields.get("requiresPsi").set(UnitType.Men, false);
    fields.get("requiresCreep").set(UnitType.Men, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Men, false);
    fields.get("burrowable").set(UnitType.Men, false);
    fields.get("cloakable").set(UnitType.Men, false);
    fields.get("building").set(UnitType.Men, false);
    fields.get("addon").set(UnitType.Men, false);
    fields.get("flyingBuilding").set(UnitType.Men, false);
    fields.get("neutral").set(UnitType.Men, false);
    fields.get("hero").set(UnitType.Men, false);
    fields.get("powerup").set(UnitType.Men, false);
    fields.get("beacon").set(UnitType.Men, false);
    fields.get("flagBeacon").set(UnitType.Men, false);
    fields.get("specialBuilding").set(UnitType.Men, false);
    fields.get("spell").set(UnitType.Men, false);
    fields.get("producesCreep").set(UnitType.Men, false);
    fields.get("producesLarva").set(UnitType.Men, false);
    fields.get("mineralField").set(UnitType.Men, false);
    fields.get("critter").set(UnitType.Men, false);
    fields.get("canBuildAddon").set(UnitType.Men, false);
    fields.get("researchesWhat").set(UnitType.Men, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Men, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Buildings() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Buildings, 231);
    fields.get("race").set(UnitType.Buildings, null);
    fields.get("whatBuilds").set(UnitType.Buildings, null);
    fields.get("buildsWhat").set(UnitType.Buildings, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Buildings, toMap());
    fields.get("requiredTech").set(UnitType.Buildings, null);
    fields.get("cloakingTech").set(UnitType.Buildings, null);
    fields.get("abilities").set(UnitType.Buildings, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Buildings, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Buildings, null);
    fields.get("maxHitPoints").set(UnitType.Buildings, 0);
    fields.get("maxShields").set(UnitType.Buildings, 0);
    fields.get("maxEnergy").set(UnitType.Buildings, 0);
    fields.get("armor").set(UnitType.Buildings, 0);
    fields.get("mineralPrice").set(UnitType.Buildings, 0);
    fields.get("gasPrice").set(UnitType.Buildings, 0);
    fields.get("buildTime").set(UnitType.Buildings, 0);
    fields.get("supplyRequired").set(UnitType.Buildings, 0);
    fields.get("supplyProvided").set(UnitType.Buildings, 0);
    fields.get("spaceRequired").set(UnitType.Buildings, 0);
    fields.get("spaceProvided").set(UnitType.Buildings, 0);
    fields.get("buildScore").set(UnitType.Buildings, 0);
    fields.get("destroyScore").set(UnitType.Buildings, 0);
    fields.get("size").set(UnitType.Buildings, null);
    fields.get("tileWidth").set(UnitType.Buildings, 0);
    fields.get("tileHeight").set(UnitType.Buildings, 0);
    fields.get("dimensionLeft").set(UnitType.Buildings, 0);
    fields.get("dimensionUp").set(UnitType.Buildings, 0);
    fields.get("dimensionRight").set(UnitType.Buildings, 0);
    fields.get("dimensionDown").set(UnitType.Buildings, 0);
    fields.get("width").set(UnitType.Buildings, 0);
    fields.get("height").set(UnitType.Buildings, 0);
    fields.get("seekRange").set(UnitType.Buildings, 0);
    fields.get("sightRange").set(UnitType.Buildings, 0);
    fields.get("groundWeapon").set(UnitType.Buildings, null);
    fields.get("maxGroundHits").set(UnitType.Buildings, 0);
    fields.get("airWeapon").set(UnitType.Buildings, null);
    fields.get("maxAirHits").set(UnitType.Buildings, 0);
    fields.get("topSpeed").set(UnitType.Buildings, 0.0);
    fields.get("acceleration").set(UnitType.Buildings, 0);
    fields.get("haltDistance").set(UnitType.Buildings, 0);
    fields.get("turnRadius").set(UnitType.Buildings, 0);
    fields.get("canProduce").set(UnitType.Buildings, false);
    fields.get("canAttack").set(UnitType.Buildings, false);
    fields.get("canMove").set(UnitType.Buildings, false);
    fields.get("flyer").set(UnitType.Buildings, false);
    fields.get("regeneratesHP").set(UnitType.Buildings, false);
    fields.get("spellcaster").set(UnitType.Buildings, false);
    fields.get("hasPermanentCloak").set(UnitType.Buildings, false);
    fields.get("invincible").set(UnitType.Buildings, false);
    fields.get("organic").set(UnitType.Buildings, false);
    fields.get("mechanical").set(UnitType.Buildings, false);
    fields.get("robotic").set(UnitType.Buildings, false);
    fields.get("detector").set(UnitType.Buildings, false);
    fields.get("resourceContainer").set(UnitType.Buildings, false);
    fields.get("resourceDepot").set(UnitType.Buildings, false);
    fields.get("refinery").set(UnitType.Buildings, false);
    fields.get("worker").set(UnitType.Buildings, false);
    fields.get("requiresPsi").set(UnitType.Buildings, false);
    fields.get("requiresCreep").set(UnitType.Buildings, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Buildings, false);
    fields.get("burrowable").set(UnitType.Buildings, false);
    fields.get("cloakable").set(UnitType.Buildings, false);
    fields.get("building").set(UnitType.Buildings, false);
    fields.get("addon").set(UnitType.Buildings, false);
    fields.get("flyingBuilding").set(UnitType.Buildings, false);
    fields.get("neutral").set(UnitType.Buildings, false);
    fields.get("hero").set(UnitType.Buildings, false);
    fields.get("powerup").set(UnitType.Buildings, false);
    fields.get("beacon").set(UnitType.Buildings, false);
    fields.get("flagBeacon").set(UnitType.Buildings, false);
    fields.get("specialBuilding").set(UnitType.Buildings, false);
    fields.get("spell").set(UnitType.Buildings, false);
    fields.get("producesCreep").set(UnitType.Buildings, false);
    fields.get("producesLarva").set(UnitType.Buildings, false);
    fields.get("mineralField").set(UnitType.Buildings, false);
    fields.get("critter").set(UnitType.Buildings, false);
    fields.get("canBuildAddon").set(UnitType.Buildings, false);
    fields.get("researchesWhat").set(UnitType.Buildings, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Buildings, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Factories() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Factories, 232);
    fields.get("race").set(UnitType.Factories, null);
    fields.get("whatBuilds").set(UnitType.Factories, null);
    fields.get("buildsWhat").set(UnitType.Factories, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Factories, toMap());
    fields.get("requiredTech").set(UnitType.Factories, null);
    fields.get("cloakingTech").set(UnitType.Factories, null);
    fields.get("abilities").set(UnitType.Factories, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Factories, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Factories, null);
    fields.get("maxHitPoints").set(UnitType.Factories, 0);
    fields.get("maxShields").set(UnitType.Factories, 0);
    fields.get("maxEnergy").set(UnitType.Factories, 0);
    fields.get("armor").set(UnitType.Factories, 0);
    fields.get("mineralPrice").set(UnitType.Factories, 0);
    fields.get("gasPrice").set(UnitType.Factories, 0);
    fields.get("buildTime").set(UnitType.Factories, 0);
    fields.get("supplyRequired").set(UnitType.Factories, 0);
    fields.get("supplyProvided").set(UnitType.Factories, 0);
    fields.get("spaceRequired").set(UnitType.Factories, 0);
    fields.get("spaceProvided").set(UnitType.Factories, 0);
    fields.get("buildScore").set(UnitType.Factories, 0);
    fields.get("destroyScore").set(UnitType.Factories, 0);
    fields.get("size").set(UnitType.Factories, null);
    fields.get("tileWidth").set(UnitType.Factories, 0);
    fields.get("tileHeight").set(UnitType.Factories, 0);
    fields.get("dimensionLeft").set(UnitType.Factories, 0);
    fields.get("dimensionUp").set(UnitType.Factories, 0);
    fields.get("dimensionRight").set(UnitType.Factories, 0);
    fields.get("dimensionDown").set(UnitType.Factories, 0);
    fields.get("width").set(UnitType.Factories, 0);
    fields.get("height").set(UnitType.Factories, 0);
    fields.get("seekRange").set(UnitType.Factories, 0);
    fields.get("sightRange").set(UnitType.Factories, 0);
    fields.get("groundWeapon").set(UnitType.Factories, null);
    fields.get("maxGroundHits").set(UnitType.Factories, 0);
    fields.get("airWeapon").set(UnitType.Factories, null);
    fields.get("maxAirHits").set(UnitType.Factories, 0);
    fields.get("topSpeed").set(UnitType.Factories, 0.0);
    fields.get("acceleration").set(UnitType.Factories, 0);
    fields.get("haltDistance").set(UnitType.Factories, 0);
    fields.get("turnRadius").set(UnitType.Factories, 0);
    fields.get("canProduce").set(UnitType.Factories, false);
    fields.get("canAttack").set(UnitType.Factories, false);
    fields.get("canMove").set(UnitType.Factories, false);
    fields.get("flyer").set(UnitType.Factories, false);
    fields.get("regeneratesHP").set(UnitType.Factories, false);
    fields.get("spellcaster").set(UnitType.Factories, false);
    fields.get("hasPermanentCloak").set(UnitType.Factories, false);
    fields.get("invincible").set(UnitType.Factories, false);
    fields.get("organic").set(UnitType.Factories, false);
    fields.get("mechanical").set(UnitType.Factories, false);
    fields.get("robotic").set(UnitType.Factories, false);
    fields.get("detector").set(UnitType.Factories, false);
    fields.get("resourceContainer").set(UnitType.Factories, false);
    fields.get("resourceDepot").set(UnitType.Factories, false);
    fields.get("refinery").set(UnitType.Factories, false);
    fields.get("worker").set(UnitType.Factories, false);
    fields.get("requiresPsi").set(UnitType.Factories, false);
    fields.get("requiresCreep").set(UnitType.Factories, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Factories, false);
    fields.get("burrowable").set(UnitType.Factories, false);
    fields.get("cloakable").set(UnitType.Factories, false);
    fields.get("building").set(UnitType.Factories, false);
    fields.get("addon").set(UnitType.Factories, false);
    fields.get("flyingBuilding").set(UnitType.Factories, false);
    fields.get("neutral").set(UnitType.Factories, false);
    fields.get("hero").set(UnitType.Factories, false);
    fields.get("powerup").set(UnitType.Factories, false);
    fields.get("beacon").set(UnitType.Factories, false);
    fields.get("flagBeacon").set(UnitType.Factories, false);
    fields.get("specialBuilding").set(UnitType.Factories, false);
    fields.get("spell").set(UnitType.Factories, false);
    fields.get("producesCreep").set(UnitType.Factories, false);
    fields.get("producesLarva").set(UnitType.Factories, false);
    fields.get("mineralField").set(UnitType.Factories, false);
    fields.get("critter").set(UnitType.Factories, false);
    fields.get("canBuildAddon").set(UnitType.Factories, false);
    fields.get("researchesWhat").set(UnitType.Factories, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Factories, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_Unknown() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.Unknown, 233);
    fields.get("race").set(UnitType.Unknown, Race.Unknown);
    fields.get("whatBuilds").set(UnitType.Unknown, new UnitType.WhatBuilds(UnitType.Unknown, 1));
    fields.get("buildsWhat").set(UnitType.Unknown, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.Unknown, toMap(UnitType.Unknown, 1));
    fields.get("requiredTech").set(UnitType.Unknown, TechType.None);
    fields.get("cloakingTech").set(UnitType.Unknown, TechType.None);
    fields.get("abilities").set(UnitType.Unknown, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.Unknown, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.Unknown, UpgradeType.Unknown);
    fields.get("maxHitPoints").set(UnitType.Unknown, 0);
    fields.get("maxShields").set(UnitType.Unknown, 0);
    fields.get("maxEnergy").set(UnitType.Unknown, 0);
    fields.get("armor").set(UnitType.Unknown, 0);
    fields.get("mineralPrice").set(UnitType.Unknown, 0);
    fields.get("gasPrice").set(UnitType.Unknown, 0);
    fields.get("buildTime").set(UnitType.Unknown, 0);
    fields.get("supplyRequired").set(UnitType.Unknown, 0);
    fields.get("supplyProvided").set(UnitType.Unknown, 0);
    fields.get("spaceRequired").set(UnitType.Unknown, 0);
    fields.get("spaceProvided").set(UnitType.Unknown, 0);
    fields.get("buildScore").set(UnitType.Unknown, 0);
    fields.get("destroyScore").set(UnitType.Unknown, 0);
    fields.get("size").set(UnitType.Unknown, UnitSizeType.Unknown);
    fields.get("tileWidth").set(UnitType.Unknown, 0);
    fields.get("tileHeight").set(UnitType.Unknown, 0);
    fields.get("dimensionLeft").set(UnitType.Unknown, 0);
    fields.get("dimensionUp").set(UnitType.Unknown, 0);
    fields.get("dimensionRight").set(UnitType.Unknown, 0);
    fields.get("dimensionDown").set(UnitType.Unknown, 0);
    fields.get("width").set(UnitType.Unknown, 1);
    fields.get("height").set(UnitType.Unknown, 1);
    fields.get("seekRange").set(UnitType.Unknown, 0);
    fields.get("sightRange").set(UnitType.Unknown, 0);
    fields.get("groundWeapon").set(UnitType.Unknown, WeaponType.Unknown);
    fields.get("maxGroundHits").set(UnitType.Unknown, 0);
    fields.get("airWeapon").set(UnitType.Unknown, WeaponType.Unknown);
    fields.get("maxAirHits").set(UnitType.Unknown, 0);
    fields.get("topSpeed").set(UnitType.Unknown, 0.0);
    fields.get("acceleration").set(UnitType.Unknown, 0);
    fields.get("haltDistance").set(UnitType.Unknown, 0);
    fields.get("turnRadius").set(UnitType.Unknown, 0);
    fields.get("canProduce").set(UnitType.Unknown, false);
    fields.get("canAttack").set(UnitType.Unknown, true);
    fields.get("canMove").set(UnitType.Unknown, false);
    fields.get("flyer").set(UnitType.Unknown, false);
    fields.get("regeneratesHP").set(UnitType.Unknown, false);
    fields.get("spellcaster").set(UnitType.Unknown, false);
    fields.get("hasPermanentCloak").set(UnitType.Unknown, false);
    fields.get("invincible").set(UnitType.Unknown, false);
    fields.get("organic").set(UnitType.Unknown, false);
    fields.get("mechanical").set(UnitType.Unknown, false);
    fields.get("robotic").set(UnitType.Unknown, false);
    fields.get("detector").set(UnitType.Unknown, false);
    fields.get("resourceContainer").set(UnitType.Unknown, false);
    fields.get("resourceDepot").set(UnitType.Unknown, false);
    fields.get("refinery").set(UnitType.Unknown, false);
    fields.get("worker").set(UnitType.Unknown, false);
    fields.get("requiresPsi").set(UnitType.Unknown, false);
    fields.get("requiresCreep").set(UnitType.Unknown, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.Unknown, false);
    fields.get("burrowable").set(UnitType.Unknown, false);
    fields.get("cloakable").set(UnitType.Unknown, false);
    fields.get("building").set(UnitType.Unknown, false);
    fields.get("addon").set(UnitType.Unknown, false);
    fields.get("flyingBuilding").set(UnitType.Unknown, false);
    fields.get("neutral").set(UnitType.Unknown, false);
    fields.get("hero").set(UnitType.Unknown, false);
    fields.get("powerup").set(UnitType.Unknown, false);
    fields.get("beacon").set(UnitType.Unknown, false);
    fields.get("flagBeacon").set(UnitType.Unknown, false);
    fields.get("specialBuilding").set(UnitType.Unknown, false);
    fields.get("spell").set(UnitType.Unknown, false);
    fields.get("producesCreep").set(UnitType.Unknown, false);
    fields.get("producesLarva").set(UnitType.Unknown, false);
    fields.get("mineralField").set(UnitType.Unknown, false);
    fields.get("critter").set(UnitType.Unknown, false);
    fields.get("canBuildAddon").set(UnitType.Unknown, false);
    fields.get("researchesWhat").set(UnitType.Unknown, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.Unknown, new ArrayList(Arrays.asList()));
  }

  private static void initializeUnitType_MAX() throws Exception {
    Class<?> c = UnitType.class;
    Map<String, Field> fields =
        Stream.of(c.getDeclaredFields())
            .collect(
                Collectors.toMap(
                    f -> f.getName(),
                    f -> {
                      f.setAccessible(true);
                      return f;
                    }));
    fields.get("iD").set(UnitType.MAX, 234);
    fields.get("race").set(UnitType.MAX, null);
    fields.get("whatBuilds").set(UnitType.MAX, null);
    fields.get("buildsWhat").set(UnitType.MAX, new ArrayList(Arrays.asList()));
    fields.get("requiredUnits").set(UnitType.MAX, toMap());
    fields.get("requiredTech").set(UnitType.MAX, null);
    fields.get("cloakingTech").set(UnitType.MAX, null);
    fields.get("abilities").set(UnitType.MAX, new ArrayList(Arrays.asList()));
    fields.get("upgrades").set(UnitType.MAX, new ArrayList(Arrays.asList()));
    fields.get("armorUpgrade").set(UnitType.MAX, null);
    fields.get("maxHitPoints").set(UnitType.MAX, 0);
    fields.get("maxShields").set(UnitType.MAX, 0);
    fields.get("maxEnergy").set(UnitType.MAX, 0);
    fields.get("armor").set(UnitType.MAX, 0);
    fields.get("mineralPrice").set(UnitType.MAX, 0);
    fields.get("gasPrice").set(UnitType.MAX, 0);
    fields.get("buildTime").set(UnitType.MAX, 0);
    fields.get("supplyRequired").set(UnitType.MAX, 0);
    fields.get("supplyProvided").set(UnitType.MAX, 0);
    fields.get("spaceRequired").set(UnitType.MAX, 0);
    fields.get("spaceProvided").set(UnitType.MAX, 0);
    fields.get("buildScore").set(UnitType.MAX, 0);
    fields.get("destroyScore").set(UnitType.MAX, 0);
    fields.get("size").set(UnitType.MAX, null);
    fields.get("tileWidth").set(UnitType.MAX, 0);
    fields.get("tileHeight").set(UnitType.MAX, 0);
    fields.get("dimensionLeft").set(UnitType.MAX, 0);
    fields.get("dimensionUp").set(UnitType.MAX, 0);
    fields.get("dimensionRight").set(UnitType.MAX, 0);
    fields.get("dimensionDown").set(UnitType.MAX, 0);
    fields.get("width").set(UnitType.MAX, 0);
    fields.get("height").set(UnitType.MAX, 0);
    fields.get("seekRange").set(UnitType.MAX, 0);
    fields.get("sightRange").set(UnitType.MAX, 0);
    fields.get("groundWeapon").set(UnitType.MAX, null);
    fields.get("maxGroundHits").set(UnitType.MAX, 0);
    fields.get("airWeapon").set(UnitType.MAX, null);
    fields.get("maxAirHits").set(UnitType.MAX, 0);
    fields.get("topSpeed").set(UnitType.MAX, 0.0);
    fields.get("acceleration").set(UnitType.MAX, 0);
    fields.get("haltDistance").set(UnitType.MAX, 0);
    fields.get("turnRadius").set(UnitType.MAX, 0);
    fields.get("canProduce").set(UnitType.MAX, false);
    fields.get("canAttack").set(UnitType.MAX, false);
    fields.get("canMove").set(UnitType.MAX, false);
    fields.get("flyer").set(UnitType.MAX, false);
    fields.get("regeneratesHP").set(UnitType.MAX, false);
    fields.get("spellcaster").set(UnitType.MAX, false);
    fields.get("hasPermanentCloak").set(UnitType.MAX, false);
    fields.get("invincible").set(UnitType.MAX, false);
    fields.get("organic").set(UnitType.MAX, false);
    fields.get("mechanical").set(UnitType.MAX, false);
    fields.get("robotic").set(UnitType.MAX, false);
    fields.get("detector").set(UnitType.MAX, false);
    fields.get("resourceContainer").set(UnitType.MAX, false);
    fields.get("resourceDepot").set(UnitType.MAX, false);
    fields.get("refinery").set(UnitType.MAX, false);
    fields.get("worker").set(UnitType.MAX, false);
    fields.get("requiresPsi").set(UnitType.MAX, false);
    fields.get("requiresCreep").set(UnitType.MAX, false);
    fields.get("twoUnitsInOneEgg").set(UnitType.MAX, false);
    fields.get("burrowable").set(UnitType.MAX, false);
    fields.get("cloakable").set(UnitType.MAX, false);
    fields.get("building").set(UnitType.MAX, false);
    fields.get("addon").set(UnitType.MAX, false);
    fields.get("flyingBuilding").set(UnitType.MAX, false);
    fields.get("neutral").set(UnitType.MAX, false);
    fields.get("hero").set(UnitType.MAX, false);
    fields.get("powerup").set(UnitType.MAX, false);
    fields.get("beacon").set(UnitType.MAX, false);
    fields.get("flagBeacon").set(UnitType.MAX, false);
    fields.get("specialBuilding").set(UnitType.MAX, false);
    fields.get("spell").set(UnitType.MAX, false);
    fields.get("producesCreep").set(UnitType.MAX, false);
    fields.get("producesLarva").set(UnitType.MAX, false);
    fields.get("mineralField").set(UnitType.MAX, false);
    fields.get("critter").set(UnitType.MAX, false);
    fields.get("canBuildAddon").set(UnitType.MAX, false);
    fields.get("researchesWhat").set(UnitType.MAX, new ArrayList(Arrays.asList()));
    fields.get("upgradesWhat").set(UnitType.MAX, new ArrayList(Arrays.asList()));
  }

  private static Map<?, ?> toMap(Object... element) {
    Map<Object, Object> map = new HashMap<>();
    for (int i = 0; i < element.length; i += 2) {
      map.put(element[i], element[i + 1]);
    }
    return map;
  }
}
