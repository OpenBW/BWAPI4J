import org.gradle.api.tasks.testing.logging.TestExceptionFormat
import org.gradle.api.tasks.testing.logging.TestLogEvent

import java.nio.charset.StandardCharsets

group 'org.openbw.bwapi4j'
version '0.8.3b'

buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.jengelman.gradle.plugins:shadow:2.0.3"
        classpath "net.ltgt.gradle:gradle-apt-plugin:0.18"
    }
}


subprojects {
    repositories {
        mavenCentral()
        jcenter()
        flatDir {
            dirs 'lib'
        }
    }

    // This is a temporary fix for ignoring incorrect javadocs formatting.
    // The javadoc formatting should probably be fixed properly.
    // For now, we'll disable the strict formatting enforcement flag (doclint).
    tasks.withType(Javadoc) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

project(":BWAPI4J-AP") {
    apply plugin: 'idea'
    apply plugin: 'java'

    dependencies {
        compile "org.antlr:ST4:4.0.8"
    }
}

project(":BWAPI4J") {
    apply plugin: "net.ltgt.apt"
    apply plugin: "net.ltgt.apt-idea"
    apply plugin: 'idea'
    apply plugin: 'java'
    apply plugin: 'java-library'
    apply plugin: 'com.github.johnrengelman.shadow'

    dependencies {
        compile 'org.apache.logging.log4j:log4j-api:2.11.0'
        compile 'org.apache.logging.log4j:log4j-core:2.11.0'
        compile 'org.apache.commons:commons-lang3:3.7'
        compile 'com.github.xaguzman:pathfinding:0.2.6'
        compile 'net.lingala.zip4j:zip4j:1.3.2'
        compileOnly project(":BWAPI4J-AP")
        annotationProcessor project(":BWAPI4J-AP")

        testCompile 'junit:junit:4.12'
        testCompile 'org.apache.commons:commons-compress:1.16.1'
    }
    shadowJar {
        relocate 'org.apache.commons', 'org.openbw.bwapi4j.org.apache.commons'
        relocate 'org.xguzm', 'org.openbw.bwapi4j.org.xguzm'
        relocate 'net.lingala.zip4j', 'org.openbw.bwapi4j.net.lingala.zip4j'
        classifier = null
        from('BWAPI4JBridge/Release') {
            include '*.dll'
            include '*.dylib'
            include '*.so'
        }
    }

    test {
        // stefanglase, Nov 27 2010, https://stackoverflow.com/a/4292739
        testLogging {
            // set options for log level LIFECYCLE
            events TestLogEvent.FAILED,
                    TestLogEvent.PASSED
//                TestLogEvent.SKIPPED,
//                TestLogEvent.STANDARD_OUT
            exceptionFormat TestExceptionFormat.FULL
            showExceptions true
            showCauses true
            showStackTraces true

//        // set options for log level DEBUG and INFO
//        debug {
//            events TestLogEvent.STARTED,
//                    TestLogEvent.FAILED,
//                    TestLogEvent.PASSED,
//                    TestLogEvent.SKIPPED,
//                    TestLogEvent.STANDARD_ERROR,
//                    TestLogEvent.STANDARD_OUT
//            exceptionFormat TestExceptionFormat.FULL
//        }
//        info.events = debug.events
//        info.exceptionFormat = debug.exceptionFormat

            afterSuite { desc, result ->
                if (!desc.parent) { // will match the outermost suite
                    def output = "Results: ${result.resultType} (${result.testCount} tests, ${result.successfulTestCount} successes, ${result.failedTestCount} failures, ${result.skippedTestCount} skipped)"
                    def startItem = '|  ', endItem = '  |'
                    def repeatLength = startItem.length() + output.length() + endItem.length()
                    println('\n' + ('-' * repeatLength) + '\n' + startItem + output + endItem + '\n' + ('-' * repeatLength))
                }
            }
        }
    }
    task sourcesJar(type: Jar, dependsOn: classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    artifacts {
        archives sourcesJar
        archives javadocJar
    }

    task generateJniHeaders(type: Exec) {
        def classpath = sourceSets.main.java.outputDir
        def nativeIncludes = "src/native/include"
        commandLine "javah", "-jni", "-verbose", "-d", nativeIncludes, "-classpath", classpath,
                "bwem.map.MapInitializerImpl",
                "org.openbw.bwapi4j.BW",
                "org.openbw.bwapi4j.BWMapImpl",
                "org.openbw.bwapi4j.InteractionHandler",
                "org.openbw.bwapi4j.MapDrawer",
                "org.openbw.bwapi4j.DamageEvaluator",
                "org.openbw.bwapi4j.unit.UnitImpl"

        dependsOn classes
    }

    task generateVsDevCmdBatch << {
        VsDevCmdGenerator.generateVsDevCmdBatch();
    }

    def bridgeDir = Constants.Directory.Bridge.toString();

    task buildVanillaBwapiForWindows(type:Exec) {
        workingDir "$bridgeDir"
        commandLine 'cmd', '/c', Constants.Script.VANILLA_WINDOWS.getFilename(Constants.Project.bwapi.toString())
        dependsOn generateVsDevCmdBatch
    }

    task buildVanillaBwemForWindows(type:Exec) {
        workingDir "$bridgeDir"
        commandLine 'cmd', '/c', Constants.Script.VANILLA_WINDOWS.getFilename(Constants.Project.bwem.toString())
        dependsOn generateVsDevCmdBatch, buildVanillaBwapiForWindows
    }

    task buildVanillaBridgeForWindows(type:Exec) {
        workingDir "$bridgeDir"
        commandLine 'cmd', '/c', Constants.Script.VANILLA_WINDOWS.getFilename(Constants.Project.bridge.toString())
        dependsOn generateVsDevCmdBatch, generateJniHeaders, buildVanillaBwapiForWindows, buildVanillaBwemForWindows
    }

    task buildOpenBWBwapiForWindows(type:Exec) {
        workingDir "$bridgeDir"
        commandLine 'cmd', '/c', Constants.Script.OPENBW_WINDOWS.getFilename(Constants.Project.bwapi.toString())
        dependsOn generateVsDevCmdBatch
    }

    task buildOpenBWBwemForWindows(type:Exec) {
        workingDir "$bridgeDir"
        commandLine 'cmd', '/c', Constants.Script.OPENBW_WINDOWS.getFilename(Constants.Project.bwem.toString())
        dependsOn generateVsDevCmdBatch, buildOpenBWBwapiForWindows
    }

    task buildOpenBWBridgeForWindows(type:Exec) {
        workingDir "$bridgeDir"
        commandLine 'cmd', '/c', Constants.Script.OPENBW_WINDOWS.getFilename(Constants.Project.bridge.toString())
        dependsOn generateVsDevCmdBatch, generateJniHeaders, buildOpenBWBwapiForWindows, buildOpenBWBwemForWindows
    }

    task buildOpenBWBwapiForLinux(type:Exec) {
        workingDir "$bridgeDir"
        commandLine 'bash', Constants.Script.OPENBW_LINUX.getFilename(Constants.Project.bwapi.toString())
    }

    task buildOpenBWBwemForLinux(type:Exec) {
        workingDir "$bridgeDir"
        commandLine 'bash', Constants.Script.OPENBW_LINUX.getFilename(Constants.Project.bwem.toString())
        dependsOn buildOpenBWBwapiForLinux
    }

    task buildOpenBWBridgeForLinux(type:Exec) {
        workingDir "$bridgeDir"
        commandLine 'bash', Constants.Script.OPENBW_LINUX.getFilename(Constants.Project.bridge.toString())
        dependsOn generateJniHeaders, buildOpenBWBwapiForLinux, buildOpenBWBwemForLinux
    }
}

class Constants {
    private static String BUILD_PREFIX = "build";
    private static String FILENAME_WORD_SEPARATOR = "_";

    private class Utils {
        static String concatenateWith(final String separator, final String firstString, final String... remainingStrings) {
            if (firstString == null) {
                throw new IllegalArgumentException();
            }
            String result = firstString;
            if (remainingStrings != null) {
                for (final String remainingString : remainingStrings) {
                    result += separator + remainingString;
                }
            }
            return result;
        }
    }

    enum Directory {
        Bridge("../BWAPI4JBridge");

        private final String path;

        private Directory(final String path) {
            this.path = path;
        }

        @Override
        String toString() {
            return this.path;
        }
    }

    enum Project { bridge, bwapi, bwem }

    enum BridgeType { vanilla, openbw }

    enum OS { windows, linux }

    enum ScriptType {
        WindowsBatch("bat"),
        LinuxBash("sh");

        private final String fileExtension;

        private ScriptType(final String fileExtension) {
            this.fileExtension = fileExtension;
        }

        String getFileExtension() {
            return this.fileExtension;
        }

        String appendFileExtension(final String path) {
            return (path + "." + this.fileExtension);
        }
    }

    enum Script {
        VANILLA_WINDOWS(BridgeType.vanilla, OS.windows, ScriptType.WindowsBatch),
        OPENBW_WINDOWS(BridgeType.openbw, OS.windows, ScriptType.WindowsBatch),
        OPENBW_LINUX(BridgeType.openbw, OS.linux, ScriptType.LinuxBash);

        private final BridgeType bridgeType;
        private final OS os;
        private final ScriptType scriptType;
        
        private Script(final BridgeType bridgeType, final OS os, final ScriptType scriptType) {
            this.bridgeType = bridgeType;
            this.os = os;
            this.scriptType = scriptType;
        }

        String getFilename(final String project) {
            return scriptType.appendFileExtension(Constants.Utils.concatenateWith(Constants.FILENAME_WORD_SEPARATOR, Constants.BUILD_PREFIX, project, bridgeType.toString(), os.toString()));
        }
    }
}

class VsDevCmdGenerator {
    private static final Map<String, String> SYSTEM_ENVIRONMENT_VARIABLES = System.getenv();
    private static final String PROGRAM_FILES_KEY = "ProgramFiles";

    private static final String PREFIX = "Microsoft Visual Studio\\2017";
    private static final String SUFFIX = "Common7\\Tools\\VsDevCmd.bat";

    private static boolean doesDirectoryExist(final String directory) {
        if (directory == null || directory.isEmpty()) {
            return false;
        }

        final File path = new File(directory);

        return (path.exists() && path.isDirectory());
    }

    private static boolean doesFileExist(final String filePath) {
        if (filePath == null || filePath.isEmpty()) {
            return false;
        }

        final File file = new File(filePath);

        return (file.exists() && !file.isDirectory());
    }

    private static boolean isAppVeyor() {
        final String appVeyorValue = SYSTEM_ENVIRONMENT_VARIABLES.get("APPVEYOR");
        return (appVeyorValue != null && appVeyorValue.equalsIgnoreCase("yes"));
    }

    static List<String> getProgramFilesDirectoryCandidates() {
        final List<String> candidates = new ArrayList<>();

        final String programFilesDirectory = SYSTEM_ENVIRONMENT_VARIABLES.get(PROGRAM_FILES_KEY);

        candidates.add(programFilesDirectory + " (x86)");

        if (isAppVeyor()) {
            return candidates;
        }

        candidates.add(programFilesDirectory);

        return candidates;
    }

    enum VisualStudioVersion {
        Enterprise,
        Professional,
        Community
    }

    static String getVsDevCmdPath() {
        final List<String> programFilesDirectoryCandidates = getProgramFilesDirectoryCandidates();

        for (final VisualStudioVersion version : VisualStudioVersion.values()) {
            for (final String programFilesDirectoryCandidate : programFilesDirectoryCandidates) {
                final String path = programFilesDirectoryCandidate + "\\" + PREFIX + "\\" + version.toString() + "\\" + SUFFIX;
                if (doesFileExist(path)) {
                    return path;
                }
            }
        }

        throw new IllegalStateException("Failed to find file: VsDevCmd.bat");
    }

    static void generateVsDevCmdBatch()  {
        final File batchFile = new File("BWAPI4JBridge\\VsDevCmd.bat");

        if (doesFileExist(batchFile.toString())) {
            return;
        }

        final String vsDevCmdFile = getVsDevCmdPath();

        final FileOutputStream fos = new FileOutputStream(batchFile);
        final BufferedWriter br = new BufferedWriter(new OutputStreamWriter(fos, StandardCharsets.UTF_8));

        br.writeLine("@echo Setting up VS2017 Development Environment...");
        br.writeLine("");
        br.writeLine("IF EXIST \"" + vsDevCmdFile + "\" (");
        br.writeLine("\"" + vsDevCmdFile + "\"");
        br.writeLine(")");

        br.close();
        fos.close();
    }
}
